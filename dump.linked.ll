; ModuleID = 'dump.linked.bc'
source_filename = "llvm-link"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5"
target triple = "amdgcn-unknown-amdhsa-hcc"

%0 = type { i32, float }
%1 = type { double, double, i32 }
%2 = type { double, double }
%3 = type { double, i32 }
%struct.RuntimeImpl = type <{ %"class.std::__cxx11::basic_string", i8*, i8* (i8*, i32, i64, i8*)*, i8* (i8*, i32, i64, i8*)*, i8* ()*, i8, [7 x i8] }>
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_put"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%"class.hc::completion_future" = type { %"class.std::shared_future", %"class.std::thread"*, %"class.std::shared_ptr.8" }
%"class.std::shared_future" = type { %"class.std::__basic_future" }
%"class.std::__basic_future" = type { %"class.std::shared_ptr" }
%"class.std::shared_ptr" = type { %"class.std::__shared_ptr" }
%"class.std::__shared_ptr" = type { %"class.std::__future_base::_State_baseV2"*, %"class.std::__shared_count" }
%"class.std::__future_base::_State_baseV2" = type <{ i32 (...)**, %"class.std::unique_ptr", %"class.std::__atomic_futex_unsigned", %"struct.std::atomic_flag", [3 x i8], %"struct.std::__atomic_base", [4 x i8] }>
%"class.std::unique_ptr" = type { %"class.std::tuple" }
%"class.std::tuple" = type { %"struct.std::_Tuple_impl" }
%"struct.std::_Tuple_impl" = type { %"struct.std::_Head_base.7" }
%"struct.std::_Head_base.7" = type { %"struct.std::__future_base::_Result_base"* }
%"struct.std::__future_base::_Result_base" = type { i32 (...)**, %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" }
%"class.std::__atomic_futex_unsigned" = type { %"struct.std::atomic" }
%"struct.std::atomic" = type { %"struct.std::__atomic_base" }
%"struct.std::atomic_flag" = type { %"struct.std::less" }
%"struct.std::less" = type { i8 }
%"struct.std::__atomic_base" = type { i32 }
%"class.std::__shared_count" = type { %"class.std::_Sp_counted_base"* }
%"class.std::_Sp_counted_base" = type { i32 (...)**, %"class.std::mutex", i32, i32 }
%"class.std::mutex" = type { %"class.std::__mutex_base" }
%"class.std::__mutex_base" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %"struct.(anonymous union)::__pthread_mutex_s" }
%"struct.(anonymous union)::__pthread_mutex_s" = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::thread" = type { %"class.std::thread::id" }
%"class.std::thread::id" = type { i64 }
%"class.std::shared_ptr.8" = type { %"class.std::__shared_ptr.9" }
%"class.std::__shared_ptr.9" = type { %"class.Kalmar::KalmarAsyncOp"*, %"class.std::__shared_count" }
%"class.Kalmar::KalmarAsyncOp" = type { i32 (...)**, %"class.Kalmar::KalmarQueue"*, i32, i64 }
%"class.Kalmar::KalmarQueue" = type { i32 (...)**, %"class.Kalmar::KalmarDevice"*, i32, i32, i64 }
%"class.Kalmar::KalmarDevice" = type <{ i32 (...)**, i32, [4 x i8], %"class.std::map", %"class.std::mutex", i8, [7 x i8] }>
%"class.std::map" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<std::thread::id, std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> >, std::_Select1st<std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> > >, std::less<std::thread::id>, std::allocator<std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> > > >::_Rb_tree_impl" }
%"struct.std::_Rb_tree<std::thread::id, std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> >, std::_Select1st<std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> > >, std::less<std::thread::id>, std::allocator<std::pair<const std::thread::id, std::shared_ptr<Kalmar::KalmarQueue> > > >::_Rb_tree_impl" = type { %"struct.std::less", %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"class.hc::accelerator_view" = type { %"class.std::shared_ptr.17" }
%"class.std::shared_ptr.17" = type { %"class.std::__shared_ptr.18" }
%"class.std::__shared_ptr.18" = type { %"class.Kalmar::KalmarQueue"*, %"class.std::__shared_count" }
%"class.Kalmar::index" = type { %"struct.Kalmar::index_impl" }
%"struct.Kalmar::index_impl" = type { %"class.Kalmar::__index_leaf" }
%"class.Kalmar::__index_leaf" = type { i32, i32 }
%class.anon = type { i32* }
%"class.Kalmar::index.0" = type { %"struct.Kalmar::index_impl.1" }
%"struct.Kalmar::index_impl.1" = type { %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf" }
%"class.Kalmar::index.3" = type { %"struct.Kalmar::index_impl.4" }
%"struct.Kalmar::index_impl.4" = type { %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf" }
%"class.Kalmar::CLAMP::HSAPlatformDetect" = type { %"class.Kalmar::CLAMP::PlatformDetect" }
%"class.Kalmar::CLAMP::PlatformDetect" = type { i32 (...)**, %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string", i8* }
%"class.Kalmar::KalmarContext" = type <{ i32 (...)**, %"class.Kalmar::KalmarDevice"*, %"class.std::vector", i8, [7 x i8] }>
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<Kalmar::KalmarDevice *, std::allocator<Kalmar::KalmarDevice *> >::_Vector_impl" }
%"struct.std::_Vector_base<Kalmar::KalmarDevice *, std::allocator<Kalmar::KalmarDevice *> >::_Vector_impl" = type { %"class.Kalmar::KalmarDevice"**, %"class.Kalmar::KalmarDevice"**, %"class.Kalmar::KalmarDevice"** }
%"class.__gnu_cxx::__normal_iterator" = type { %"class.Kalmar::KalmarDevice"** }
%"struct.__gnu_cxx::__ops::_Iter_pred" = type { %class.anon.16 }
%class.anon.16 = type { %"class.std::__cxx11::basic_string.10"* }
%"class.std::__cxx11::basic_string.10" = type { %class.anon, i64, %union.anon }
%"struct.std::_Rb_tree_const_iterator" = type { %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_node" = type { %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf" }
%"struct.__gnu_cxx::__aligned_membuf" = type { [24 x i8] }
%"struct.std::pair.23" = type { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }

@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @__hcc_shared_library_fini, i8* null }]
@llvm.used = appending global [358 x i8*] [i8* bitcast (void (%"class.hc::completion_future"*, %"class.hc::accelerator_view"*, %"class.Kalmar::index"*, %class.anon*)* @"_ZN2hc17parallel_for_eachIZ4mainE3$_0EENS_17completion_futureERKNS_16accelerator_viewERKNS_6extentILi1EEERKT_" to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math10fpclassifyEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math10fpclassifyEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math10fpclassifyEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math10nearbyintfEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math10nextafterfEff to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math10remainderfEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3cosEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3cosEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3cosEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3erfEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3erfEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3erfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3expEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3expEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3expEf to i8*), i8* bitcast (half (half, half, half)* @_ZN6Kalmar12precise_math3fmaEDhDhDh to i8*), i8* bitcast (double (double, double, double)* @_ZN6Kalmar12precise_math3fmaEddd to i8*), i8* bitcast (float (float, float, float)* @_ZN6Kalmar12precise_math3fmaEfff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3logEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3logEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3logEf to i8*), i8* bitcast (double (i32)* @_ZN6Kalmar12precise_math3nanEi to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math3powEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math3powEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math3powEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3sinEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3sinEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3sinEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math3tanEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math3tanEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math3tanEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4acosEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4acosEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4acosEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4asinEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4asinEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4asinEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4atanEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4atanEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4atanEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4cbrtEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4cbrtEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4cbrtEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4ceilEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4ceilEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4ceilEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4cosfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4coshEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4coshEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4coshEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4erfcEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4erfcEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4erfcEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4erffEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4exp2EDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4exp2Ed to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4exp2Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4expfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4fabsEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4fabsEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4fabsEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math4fdimEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math4fdimEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math4fdimEff to i8*), i8* bitcast (float (float, float, float)* @_ZN6Kalmar12precise_math4fmafEfff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math4fmaxEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math4fmaxEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math4fmaxEff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math4fminEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math4fminEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math4fminEff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math4fmodEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math4fmodEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math4fmodEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4log2EDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4log2Ed to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4log2Ef to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4logbEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4logbEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4logbEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4logfEf to i8*), i8* bitcast (half (half, half*)* @_ZN6Kalmar12precise_math4modfEDhPDh to i8*), i8* bitcast (double (double, double*)* @_ZN6Kalmar12precise_math4modfEdPd to i8*), i8* bitcast (float (float, float*)* @_ZN6Kalmar12precise_math4modfEfPf to i8*), i8* bitcast (float (i32)* @_ZN6Kalmar12precise_math4nanfEi to i8*), i8* bitcast (half (i32)* @_ZN6Kalmar12precise_math4nanhEi to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math4powfEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4sinfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4sinhEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4sinhEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4sinhEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4sqrtEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4sqrtEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4sqrtEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4tanfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math4tanhEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math4tanhEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math4tanhEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5acosfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5acoshEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5acoshEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5acoshEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5asinfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5asinhEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5asinhEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5asinhEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math5atan2EDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math5atan2Edd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5atan2Eff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5atanfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5atanhEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5atanhEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5atanhEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5cbrtfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5ceilfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5coshfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5cospiEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5cospiEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5cospiEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5erfcfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5exp10EDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5exp10Ed to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5exp10Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5exp2fEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5expm1EDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5expm1Ed to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5expm1Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5fabsfEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5fdimfEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5floorEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5floorEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5floorEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5fmaxfEff to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5fminfEff to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5fmodfEff to i8*), i8* bitcast (half (half, i32*)* @_ZN6Kalmar12precise_math5frexpEDhPi to i8*), i8* bitcast (double (double, i32*)* @_ZN6Kalmar12precise_math5frexpEdPi to i8*), i8* bitcast (float (float, i32*)* @_ZN6Kalmar12precise_math5frexpEfPi to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math5hypotEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math5hypotEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5hypotEff to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math5ilogbEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math5ilogbEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math5ilogbEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math5isinfEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math5isinfEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math5isinfEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math5isnanEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math5isnanEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math5isnanEf to i8*), i8* bitcast (half (half, i16)* @_ZN6Kalmar12precise_math5ldexpEDhs to i8*), i8* bitcast (double (double, i32)* @_ZN6Kalmar12precise_math5ldexpEdi to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar12precise_math5ldexpEfi to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5log10EDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5log10Ed to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5log10Ef to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5log1pEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5log1pEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5log1pEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5log2fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5logbfEf to i8*), i8* bitcast (float (float, float*)* @_ZN6Kalmar12precise_math5modffEfPf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5rcbrtEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5rcbrtEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5rcbrtEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5roundEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5roundEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5roundEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5rsqrtEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5rsqrtEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5rsqrtEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math5scalbEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math5scalbEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math5scalbEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5sinhfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5sinpiEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5sinpiEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5sinpiEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5sqrtfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5tanhfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5tanpiEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5tanpiEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5tanpiEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math5truncEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math5truncEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math5truncEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6acoshfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6asinhfEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math6atan2fEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6atanhfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6cospifEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math6erfinvEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math6erfinvEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6erfinvEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6exp10fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6expm1fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6floorfEf to i8*), i8* bitcast (float (float, i32*)* @_ZN6Kalmar12precise_math6frexpfEfPi to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math6hypotfEff to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math6ilogbfEf to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar12precise_math6ldexpfEfi to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math6lgammaEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math6lgammaEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6lgammaEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6log10fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6log1pfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6rcbrtfEf to i8*), i8* bitcast (half (half, half, i32*)* @_ZN6Kalmar12precise_math6remquoEDhDhPi to i8*), i8* bitcast (double (double, double, i32*)* @_ZN6Kalmar12precise_math6remquoEddPi to i8*), i8* bitcast (float (float, float, i32*)* @_ZN6Kalmar12precise_math6remquoEffPi to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6roundfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6rsqrtfEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math6scalbfEff to i8*), i8* bitcast (half (half, i32)* @_ZN6Kalmar12precise_math6scalbnEDhi to i8*), i8* bitcast (double (double, i32)* @_ZN6Kalmar12precise_math6scalbnEdi to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar12precise_math6scalbnEfi to i8*), i8* bitcast (void (half, half*, half*)* @_ZN6Kalmar12precise_math6sincosEDhPDhS1_ to i8*), i8* bitcast (void (double, double*, double*)* @_ZN6Kalmar12precise_math6sincosEdPdS1_ to i8*), i8* bitcast (void (float, float*, float*)* @_ZN6Kalmar12precise_math6sincosEfPfS1_ to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6sinpifEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6tanpifEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math6tgammaEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math6tgammaEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6tgammaEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math6truncfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math7erfcinvEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math7erfcinvEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math7erfcinvEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math7erfinvfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math7lgammafEf to i8*), i8* bitcast (float (float, float, i32*)* @_ZN6Kalmar12precise_math7remquofEffPi to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar12precise_math7scalbnfEfi to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math7signbitEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math7signbitEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math7signbitEf to i8*), i8* bitcast (void (float, float*, float*)* @_ZN6Kalmar12precise_math7sincosfEfPfS1_ to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math7tgammafEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math8copysignEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math8copysignEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math8copysignEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math8erfcinvfEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math8isfiniteEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math8isfiniteEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math8isfiniteEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar12precise_math8isnormalEDh to i8*), i8* bitcast (i32 (double)* @_ZN6Kalmar12precise_math8isnormalEd to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math8isnormalEf to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar12precise_math8signbitfEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math9copysignfEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar12precise_math9nearbyintEDh to i8*), i8* bitcast (double (double)* @_ZN6Kalmar12precise_math9nearbyintEd to i8*), i8* bitcast (float (float)* @_ZN6Kalmar12precise_math9nearbyintEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math9nextafterEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math9nextafterEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math9nextafterEff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar12precise_math9remainderEDhDh to i8*), i8* bitcast (double (double, double)* @_ZN6Kalmar12precise_math9remainderEdd to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar12precise_math9remainderEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math3cosEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math3cosEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math3expEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math3expEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math3logEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math3logEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar9fast_math3powEDhDh to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math3powEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math3sinEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math3sinEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math3tanEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math3tanEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4acosEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4acosEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4asinEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4asinEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4atanEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4atanEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4ceilEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4ceilEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4cosfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4coshEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4coshEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4exp2EDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4exp2Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4expfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4fabsEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4fabsEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar9fast_math4fmaxEDhDh to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math4fmaxEff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar9fast_math4fminEDhDh to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math4fminEff to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar9fast_math4fmodEDhDh to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math4fmodEff to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4log2EDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4log2Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4logfEf to i8*), i8* bitcast (half (half, half*)* @_ZN6Kalmar9fast_math4modfEDhPDh to i8*), i8* bitcast (float (float, float*)* @_ZN6Kalmar9fast_math4modfEfPf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math4powfEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4sinfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4sinhEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4sinhEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4sqrtEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4sqrtEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4tanfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math4tanhEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math4tanhEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5acosfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5asinfEf to i8*), i8* bitcast (half (half, half)* @_ZN6Kalmar9fast_math5atan2EDhDh to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math5atan2Eff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5atanfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5ceilfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5coshfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5exp2fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5fabsfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math5floorEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5floorEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math5fmaxfEff to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math5fminfEff to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math5fmodfEff to i8*), i8* bitcast (half (half, i32*)* @_ZN6Kalmar9fast_math5frexpEDhPi to i8*), i8* bitcast (float (float, i32*)* @_ZN6Kalmar9fast_math5frexpEfPi to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar9fast_math5isinfEDh to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar9fast_math5isinfEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar9fast_math5isnanEDh to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar9fast_math5isnanEf to i8*), i8* bitcast (half (half, i16)* @_ZN6Kalmar9fast_math5ldexpEDht to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar9fast_math5ldexpEfi to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math5log10EDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5log10Ef to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5log2fEf to i8*), i8* bitcast (float (float, float*)* @_ZN6Kalmar9fast_math5modffEfPf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math5roundEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5roundEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math5rsqrtEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5rsqrtEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5sinhfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5sqrtfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5tanhfEf to i8*), i8* bitcast (half (half)* @_ZN6Kalmar9fast_math5truncEDh to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math5truncEf to i8*), i8* bitcast (float (float, float)* @_ZN6Kalmar9fast_math6atan2fEff to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math6floorfEf to i8*), i8* bitcast (float (float, i32*)* @_ZN6Kalmar9fast_math6frexpfEfPi to i8*), i8* bitcast (float (float, i32)* @_ZN6Kalmar9fast_math6ldexpfEfi to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math6log10fEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math6roundfEf to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math6rsqrtfEf to i8*), i8* bitcast (void (half, half*, half*)* @_ZN6Kalmar9fast_math6sincosEDhPDhS1_ to i8*), i8* bitcast (void (float, float*, float*)* @_ZN6Kalmar9fast_math6sincosEfPfS1_ to i8*), i8* bitcast (float (float)* @_ZN6Kalmar9fast_math6truncfEf to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar9fast_math7signbitEDh to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar9fast_math7signbitEf to i8*), i8* bitcast (void (float, float*, float*)* @_ZN6Kalmar9fast_math7sincosfEfPfS1_ to i8*), i8* bitcast (i32 (half)* @_ZN6Kalmar9fast_math8isfiniteEDh to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar9fast_math8isfiniteEf to i8*), i8* bitcast (i32 (float)* @_ZN6Kalmar9fast_math8signbitfEf to i8*)], section "llvm.metadata"
@_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl = internal unnamed_addr addrspace(1) global %struct.RuntimeImpl* null, align 8
@.str.5 = private unnamed_addr addrspace(4) constant [4 x i8] c"HSA\00", align 1
@.str.11 = private unnamed_addr addrspace(4) constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.10 = private unnamed_addr addrspace(4) constant [17 x i8] c"libmcwamp_hsa.so\00", align 1
@_ZTVN6Kalmar5CLAMP14PlatformDetectE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN6Kalmar5CLAMP14PlatformDetectE to i8*), i8* bitcast (i1 (%"class.Kalmar::CLAMP::PlatformDetect"*)* @_ZN6Kalmar5CLAMP14PlatformDetect6detectEv to i8*)] }, align 8
@_binary_kernel_bundle_start = external hidden addrspace(1) global [0 x i8*], align 8
@_ZTVN6Kalmar5CLAMP17HSAPlatformDetectE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6Kalmar5CLAMP17HSAPlatformDetectE to i8*), i8* bitcast (i1 (%"class.Kalmar::CLAMP::PlatformDetect"*)* @_ZN6Kalmar5CLAMP14PlatformDetect6detectEv to i8*)] }, align 8
@.str.2 = private unnamed_addr addrspace(4) constant [12 x i8] c"HCC_VERBOSE\00", align 1
@.str.3 = private unnamed_addr addrspace(4) constant [3 x i8] c"ON\00", align 1
@_ZN6Kalmar5CLAMPL14mcwamp_verboseE = external local_unnamed_addr addrspace(1) global i8, align 1
@.str.4 = private unnamed_addr addrspace(4) constant [12 x i8] c"HCC_RUNTIME\00", align 1
@.str.13 = private unnamed_addr addrspace(4) constant [16 x i8] c"Use HSA runtime\00", align 1
@_ZSt4cout = external addrspace(1) global %"class.std::basic_ostream", align 8
@.str.15 = private unnamed_addr addrspace(4) constant [28 x i8] c"C++AMP runtime load error: \00", align 1
@_ZSt4cerr = external addrspace(1) global %"class.std::basic_ostream", align 8
@.str.16 = private unnamed_addr addrspace(4) constant [12 x i8] c"PushArgImpl\00", align 1
@.str.17 = private unnamed_addr addrspace(4) constant [15 x i8] c"PushArgPtrImpl\00", align 1
@.str.18 = private unnamed_addr addrspace(4) constant [15 x i8] c"GetContextImpl\00", align 1
@.str.14 = private unnamed_addr addrspace(4) constant [24 x i8] c"Can't load HSA runtime!\00", align 1
@.str.6 = private unnamed_addr addrspace(4) constant [54 x i8] c"Ignore unsupported HCC_RUNTIME environment variable: \00", align 1
@.str.7 = private unnamed_addr addrspace(4) constant [4 x i8] c"CPU\00", align 1
@.str.19 = private unnamed_addr addrspace(4) constant [16 x i8] c"Use CPU runtime\00", align 1
@.str.20 = private unnamed_addr addrspace(4) constant [17 x i8] c"libmcwamp_cpu.so\00", align 1
@.str.21 = private unnamed_addr addrspace(4) constant [24 x i8] c"Can't load CPU runtime!\00", align 1
@.str.8 = private unnamed_addr addrspace(4) constant [49 x i8] c"Ignore unknown HCC_RUNTIME environment variable:\00", align 1
@.str.9 = private unnamed_addr addrspace(4) constant [48 x i8] c"No suitable runtime detected. Fall back to CPU!\00", align 1
@_ZTIN6Kalmar5CLAMP17HSAPlatformDetectE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @_ZTSN6Kalmar5CLAMP17HSAPlatformDetectE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN6Kalmar5CLAMP14PlatformDetectE to i8*) }, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN6Kalmar5CLAMP17HSAPlatformDetectE = linkonce_odr constant [35 x i8] c"N6Kalmar5CLAMP17HSAPlatformDetectE\00", align 1
@_ZTIN6Kalmar5CLAMP14PlatformDetectE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZTSN6Kalmar5CLAMP14PlatformDetectE, i32 0, i32 0) }, align 8
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN6Kalmar5CLAMP14PlatformDetectE = linkonce_odr constant [32 x i8] c"N6Kalmar5CLAMP14PlatformDetectE\00", align 1
@_ZN6Kalmar5CLAMPL9in_kernelE = external local_unnamed_addr addrspace(1) global i8, align 1
@_binary_kernel_bundle_end = external hidden addrspace(1) global [0 x i8*], align 8
@.str.26 = private unnamed_addr addrspace(4) constant [25 x i8] c"__CLANG_OFFLOAD_BUNDLE__\00", align 1
@.str.33 = private unnamed_addr addrspace(4) constant [24 x i8] c"hcc-amdgcn-amd-amdhsa--\00", align 1
@.str.2.1 = private unnamed_addr addrspace(4) constant [8 x i32] [i32 100, i32 101, i32 102, i32 97, i32 117, i32 108, i32 116, i32 0], align 4
@.str.3.2 = private unnamed_addr addrspace(4) constant [42 x i8] c"basic_string::_M_construct null not valid\00", align 1
@.str.4.3 = private unnamed_addr addrspace(4) constant [1 x i32] zeroinitializer, align 4
@stderr = external local_unnamed_addr addrspace(1) global %struct._IO_FILE*, align 8
@.str.5.4 = private unnamed_addr addrspace(4) constant [54 x i8] c"There is no device can be used to do the computation\0A\00", align 1
@redret = common protected local_unnamed_addr addrspace(1) global %0 zeroinitializer, align 4
@__oclc_ISA_version = linkonce_odr protected local_unnamed_addr addrspace(4) constant i32 900, align 4
@__oclc_finite_only_opt = linkonce_odr protected local_unnamed_addr addrspace(4) constant i8 0, align 1
@__oclc_daz_opt = linkonce_odr protected local_unnamed_addr addrspace(4) constant i8 0, align 1
@__oclc_correctly_rounded_sqrt32 = linkonce_odr protected local_unnamed_addr addrspace(4) constant i8 1, align 1
@__oclc_unsafe_math_opt = linkonce_odr protected local_unnamed_addr addrspace(4) constant i8 0, align 1

; Function Attrs: norecurse nounwind readnone
define void @__hcc_shared_library_fini() #0 {
entry:
  ret void
}

; Function Attrs: noinline norecurse nounwind readnone
define internal void @"_ZN2hc17parallel_for_eachIZ4mainE3$_0EENS_17completion_futureERKNS_16accelerator_viewERKNS_6extentILi1EEERKT_"(%"class.hc::completion_future"* noalias nocapture sret %agg.result, %"class.hc::accelerator_view"* nocapture dereferenceable(16) %av, %"class.Kalmar::index"* nocapture dereferenceable(8) %compute_domain, %class.anon* nocapture dereferenceable(8) %f) #1 {
entry:
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math10fpclassifyEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_fpclassify_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math10fpclassifyEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_fpclassify_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math10fpclassifyEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_fpclassify(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math10nearbyintfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_nearbyint(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math10nextafterfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_nextafter(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math10remainderfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_remainder(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3cosEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cos_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3cosEd(double %x) #2 {
entry:
  %call = tail call double @__hc_cos_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3cosEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_cos(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3erfEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_erf_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3erfEd(double %x) #2 {
entry:
  %call = tail call double @__hc_erf_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3erfEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_erf(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3expEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_exp_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3expEd(double %x) #2 {
entry:
  %call = tail call double @__hc_exp_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3expEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_exp(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3fmaEDhDhDh(half %x, half %y, half %z) #2 {
entry:
  %call = tail call half @__hc_fma_half(half %x, half %y, half %z) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3fmaEddd(double %x, double %y, double %z) #2 {
entry:
  %call = tail call double @__hc_fma_double(double %x, double %y, double %z) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3fmaEfff(float %x, float %y, float %z) #2 {
entry:
  %call.i = tail call float @__hc_fma(float %x, float %y, float %z) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3logEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3logEd(double %x) #2 {
entry:
  %call = tail call double @__hc_log_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3logEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3nanEi(i32 %tagp) #2 {
entry:
  %conv = sext i32 %tagp to i64
  %call = tail call double @__hc_nan_double(i64 %conv) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3powEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_pow_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3powEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_pow_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3powEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_pow(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3sinEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sin_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3sinEd(double %x) #2 {
entry:
  %call = tail call double @__hc_sin_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3sinEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sin(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math3tanEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_tan_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math3tanEd(double %x) #2 {
entry:
  %call = tail call double @__hc_tan_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math3tanEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tan(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4acosEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_acos_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4acosEd(double %x) #2 {
entry:
  %call = tail call double @__hc_acos_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4acosEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_acos(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4asinEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_asin_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4asinEd(double %x) #2 {
entry:
  %call = tail call double @__hc_asin_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4asinEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_asin(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4atanEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_atan_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4atanEd(double %x) #2 {
entry:
  %call = tail call double @__hc_atan_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4atanEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_atan(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4cbrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cbrt_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4cbrtEd(double %x) #2 {
entry:
  %call = tail call double @__hc_cbrt_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4cbrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_cbrt(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4ceilEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_ceil_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4ceilEd(double %x) #2 {
entry:
  %call = tail call double @__hc_ceil_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4ceilEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_ceil(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4cosfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_cos(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4coshEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cosh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4coshEd(double %x) #2 {
entry:
  %call = tail call double @__hc_cosh_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4coshEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_cosh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4erfcEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_erfc_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4erfcEd(double %x) #2 {
entry:
  %call = tail call double @__hc_erfc_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4erfcEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_erfc(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4erffEf(float %x) #2 {
entry:
  %call = tail call float @__hc_erf(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4exp2EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_exp2_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4exp2Ed(double %x) #2 {
entry:
  %call = tail call double @__hc_exp2_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4exp2Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_exp2(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4expfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_exp(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4fabsEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_fabs_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4fabsEd(double %x) #2 {
entry:
  %call = tail call double @__hc_fabs_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fabsEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_fabs(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4fdimEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fdim_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4fdimEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_fdim_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fdimEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fdim(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fmafEfff(float %x, float %y, float %z) #2 {
entry:
  %call = tail call float @__hc_fma(float %x, float %y, float %z) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4fmaxEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmax_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4fmaxEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_fmax_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fmaxEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmax(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4fminEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmin_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4fminEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_fmin_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fminEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmin(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4fmodEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmod_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4fmodEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_fmod_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4fmodEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmod(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4log2EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log2_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4log2Ed(double %x) #2 {
entry:
  %call = tail call double @__hc_log2_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4log2Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log2(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4logbEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_logb_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4logbEd(double %x) #2 {
entry:
  %call = tail call double @__hc_logb_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4logbEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_logb(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4logfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4modfEDhPDh(half %x, half* %p) #2 {
entry:
  %call = tail call half @__hc_modf_half(half %x, half* %p) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4modfEdPd(double %x, double* %p) #2 {
entry:
  %call = tail call double @__hc_modf_double(double %x, double* %p) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4modfEfPf(float %x, float* %p) #2 {
entry:
  %call.i = tail call float @__hc_modf(float %x, float* %p) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4nanfEi(i32 %tagp) #2 {
entry:
  %call = tail call float @__hc_nan(i32 %tagp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4nanhEi(i32 %x) #2 {
entry:
  %call = tail call half @__hc_nan_half(i32 %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4powfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_pow(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4sinfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sin(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4sinhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sinh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4sinhEd(double %x) #2 {
entry:
  %call = tail call double @__hc_sinh_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4sinhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sinh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4sqrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sqrt_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4sqrtEd(double %x) #2 {
entry:
  %call = tail call double @__hc_sqrt_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4sqrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sqrt(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4tanfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tan(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math4tanhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_tanh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math4tanhEd(double %x) #2 {
entry:
  %conv = fptrunc double %x to float
  %call = tail call float @__hc_tanh(float %conv) #43
  %conv1 = fpext float %call to double
  ret double %conv1
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math4tanhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tanh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5acosfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_acos(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5acoshEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_acosh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5acoshEd(double %x) #2 {
entry:
  %call = tail call double @__hc_acosh_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5acoshEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_acosh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5asinfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_asin(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5asinhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_asinh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5asinhEd(double %x) #2 {
entry:
  %call = tail call double @__hc_asinh_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5asinhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_asinh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5atan2EDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_atan2_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5atan2Edd(double %y, double %x) #2 {
entry:
  %call = tail call double @__hc_atan2_double(double %y, double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5atan2Eff(float %y, float %x) #2 {
entry:
  %call.i = tail call float @__hc_atan2(float %y, float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5atanfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_atan(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5atanhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_atanh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5atanhEd(double %x) #2 {
entry:
  %call = tail call double @__hc_atanh_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5atanhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_atanh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5cbrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_cbrt(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5ceilfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_ceil(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5coshfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_cosh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5cospiEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cospi_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5cospiEd(double %x) #2 {
entry:
  %call = tail call double @__hc_cospi_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5cospiEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_cospi(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5erfcfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_erfc(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5exp10EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_exp10_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5exp10Ed(double %x) #2 {
entry:
  %call = tail call double @__hc_exp10_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5exp10Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_exp10(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5exp2fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_exp2(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5expm1EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_expm1_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5expm1Ed(double %x) #2 {
entry:
  %call = tail call double @__hc_expm1_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5expm1Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_expm1(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5fabsfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_fabs(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5fdimfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fdim(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5floorEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_floor_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5floorEd(double %x) #2 {
entry:
  %call = tail call double @__hc_floor_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5floorEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_floor(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5fmaxfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmax(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5fminfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmin(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5fmodfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmod(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5frexpEDhPi(half %x, i32* %exp) #2 {
entry:
  %call = tail call half @__hc_frexp_half(half %x, i32* %exp) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5frexpEdPi(double %x, i32* %exp) #2 {
entry:
  %call = tail call double @__hc_frexp_double(double %x, i32* %exp) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5frexpEfPi(float %x, i32* %exp) #2 {
entry:
  %call.i = tail call float @__hc_frexp(float %x, i32* %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5hypotEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_hypot_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5hypotEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_hypot_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5hypotEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_hypot(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5ilogbEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_ilogb_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5ilogbEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_ilogb_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5ilogbEf(float %x) #2 {
entry:
  %call.i = tail call i32 @__hc_ilogb(float %x) #43
  ret i32 %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isinfEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isinf_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isinfEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_isinf_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isinfEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isinf(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isnanEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isnan_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isnanEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_isnan_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math5isnanEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isnan(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5ldexpEDhs(half %x, i16 signext %e) #2 {
entry:
  %call = tail call half @__hc_ldexp_half(half %x, i16 signext %e) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5ldexpEdi(double %x, i32 %exp) #2 {
entry:
  %call = tail call double @__hc_ldexp_double(double %x, i32 %exp) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5ldexpEfi(float %x, i32 %exp) #2 {
entry:
  %call.i = tail call float @__hc_ldexp(float %x, i32 %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5log10EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log10_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5log10Ed(double %x) #2 {
entry:
  %call = tail call double @__hc_log10_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5log10Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log10(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5log1pEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log1p_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5log1pEd(double %x) #2 {
entry:
  %conv = fptrunc double %x to float
  %call = tail call float @__hc_log1p(float %conv) #43
  %conv1 = fpext float %call to double
  ret double %conv1
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5log1pEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log1p(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5log2fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log2(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5logbfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_logb(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5modffEfPf(float %x, float* %iptr) #2 {
entry:
  %call = tail call float @__hc_modf(float %x, float* %iptr) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5rcbrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_rcbrt_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5rcbrtEd(double %x) #2 {
entry:
  %call = tail call double @__hc_rcbrt_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5rcbrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_rcbrt(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5roundEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_round_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5roundEd(double %x) #2 {
entry:
  %call = tail call double @__hc_round_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5roundEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_round(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5rsqrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_rsqrt_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5rsqrtEd(double %x) #2 {
entry:
  %call = tail call double @__hc_rsqrt_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5rsqrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_rsqrt(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5scalbEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_scalb_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5scalbEdd(double %x, double %exp) #2 {
entry:
  %call = tail call double @__hc_scalb_double(double %x, double %exp) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5scalbEff(float %x, float %exp) #2 {
entry:
  %call.i = tail call float @__hc_scalb(float %x, float %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5sinhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sinh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5sinpiEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sinpi_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5sinpiEd(double %x) #2 {
entry:
  %call = tail call double @__hc_sinpi_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5sinpiEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sinpi(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5sqrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sqrt(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5tanhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tanh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5tanpiEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_tanpi_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5tanpiEd(double %x) #2 {
entry:
  %call = tail call double @__hc_tanpi_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5tanpiEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tanpi(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math5truncEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_trunc_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math5truncEd(double %x) #2 {
entry:
  %call = tail call double @__hc_trunc_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math5truncEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_trunc(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6acoshfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_acosh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6asinhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_asinh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6atan2fEff(float %y, float %x) #2 {
entry:
  %call = tail call float @__hc_atan2(float %y, float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6atanhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_atanh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6cospifEf(float %x) #2 {
entry:
  %call = tail call float @__hc_cospi(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math6erfinvEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_erfinv_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math6erfinvEd(double %x) #2 {
entry:
  %call = tail call double @__hc_erfinv_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6erfinvEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_erfinv(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6exp10fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_exp10(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6expm1fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_expm1(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6floorfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_floor(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6frexpfEfPi(float %x, i32* %exp) #2 {
entry:
  %call = tail call float @__hc_frexp(float %x, i32* %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6hypotfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_hypot(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math6ilogbfEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_ilogb(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6ldexpfEfi(float %x, i32 %exp) #2 {
entry:
  %call = tail call float @__hc_ldexp(float %x, i32 %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math6lgammaEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_lgamma_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math6lgammaEd(double %x) #2 {
entry:
  %call = tail call double @__hc_lgamma_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6lgammaEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_lgamma(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6log10fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log10(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6log1pfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log1p(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6rcbrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_rcbrt(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math6remquoEDhDhPi(half %x, half %y, i32* %q) #2 {
entry:
  %call = tail call half @__hc_remquo_half(half %x, half %y, i32* %q) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math6remquoEddPi(double %x, double %y, i32* %quo) #2 {
entry:
  %call = tail call double @__hc_remquo_double(double %x, double %y, i32* %quo) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6remquoEffPi(float %x, float %y, i32* %quo) #2 {
entry:
  %call.i = tail call float @__hc_remquo(float %x, float %y, i32* %quo) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6roundfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_round(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6rsqrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_rsqrt(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6scalbfEff(float %x, float %exp) #2 {
entry:
  %call = tail call float @__hc_scalb(float %x, float %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math6scalbnEDhi(half %x, i32 %e) #2 {
entry:
  %call = tail call half @__hc_scalbn_half(half %x, i32 %e) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math6scalbnEdi(double %x, i32 %exp) #2 {
entry:
  %call = tail call double @__hc_scalbn_double(double %x, i32 %exp) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6scalbnEfi(float %x, i32 %exp) #2 {
entry:
  %call.i = tail call float @__hc_scalbn(float %x, i32 %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar12precise_math6sincosEDhPDhS1_(half %x, half* %s, half* %c) #2 {
entry:
  %call = tail call half @__hc_sincos_half(half %x, half* %c) #43
  store half %call, half* %s, align 2, !tbaa !11
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar12precise_math6sincosEdPdS1_(double %x, double* %s, double* %c) #2 {
entry:
  %call = tail call double @__hc_sincos_double(double %x, double* %c) #43
  store double %call, double* %s, align 8, !tbaa !15
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar12precise_math6sincosEfPfS1_(float %x, float* %s, float* %c) #2 {
entry:
  %call.i = tail call float @__hc_sincos(float %x, float* %c) #43
  store float %call.i, float* %s, align 4, !tbaa !17
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6sinpifEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sinpi(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6tanpifEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tanpi(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math6tgammaEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_tgamma_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math6tgammaEd(double %x) #2 {
entry:
  %call = tail call double @__hc_tgamma_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6tgammaEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tgamma(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math6truncfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_trunc(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math7erfcinvEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_erfcinv_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math7erfcinvEd(double %x) #2 {
entry:
  %call = tail call double @__hc_erfcinv_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7erfcinvEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_erfcinv(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7erfinvfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_erfinv(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7lgammafEf(float %x) #2 {
entry:
  %call = tail call float @__hc_lgamma(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7remquofEffPi(float %x, float %y, i32* %quo) #2 {
entry:
  %call = tail call float @__hc_remquo(float %x, float %y, i32* %quo) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7scalbnfEfi(float %x, i32 %exp) #2 {
entry:
  %call = tail call float @__hc_scalbn(float %x, i32 %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math7signbitEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_signbit_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math7signbitEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_signbit_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math7signbitEf(float %x) #2 {
entry:
  %call.i = tail call i32 @__hc_signbit(float %x) #43
  ret i32 %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar12precise_math7sincosfEfPfS1_(float %x, float* %s, float* %c) #2 {
entry:
  %call = tail call float @__hc_sincos(float %x, float* %c) #43
  store float %call, float* %s, align 4, !tbaa !17
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math7tgammafEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tgamma(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math8copysignEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_copysign_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math8copysignEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_copysign_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math8copysignEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_copysign(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math8erfcinvfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_erfcinv(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isfiniteEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isfinite_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isfiniteEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_isfinite_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isfiniteEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isfinite(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isnormalEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isnormal_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isnormalEd(double %x) #2 {
entry:
  %call = tail call i32 @__hc_isnormal_double(double %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8isnormalEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isnormal(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar12precise_math8signbitfEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_signbit(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math9copysignfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_copysign(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math9nearbyintEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_nearbyint_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math9nearbyintEd(double %x) #2 {
entry:
  %call = tail call double @__hc_nearbyint_double(double %x) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math9nearbyintEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_nearbyint(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math9nextafterEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_nextafter_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math9nextafterEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_nextafter_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math9nextafterEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_nextafter(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar12precise_math9remainderEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_remainder_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr double @_ZN6Kalmar12precise_math9remainderEdd(double %x, double %y) #2 {
entry:
  %call = tail call double @__hc_remainder_double(double %x, double %y) #43
  ret double %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar12precise_math9remainderEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_remainder(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3cosEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cos_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3cosEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_native_cos(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3expEDh(half %x) #2 {
entry:
  %conv = fpext half %x to double
  %mul = fmul double %conv, 0x3FF71547652B82FE
  %conv1 = fptrunc double %mul to half
  %call = tail call half @__hc_exp2_native_half(half %conv1) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3expEf(float %x) #2 {
entry:
  %conv.i = fpext float %x to double
  %mul.i = fmul double %conv.i, 0x3FF71547652B82FE
  %conv1.i = fptrunc double %mul.i to float
  %call.i = tail call float @__hc_exp2_native(float %conv1.i) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3logEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log2_native_half(half %x) #43
  %mul = fmul half %call, 0xH398C
  ret half %mul
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3logEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log2_native(float %x) #43
  %mul.i = fmul float %call.i, 0x3FE62E4300000000
  ret float %mul.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3powEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_pow_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3powEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_pow(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3sinEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sin_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3sinEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sin_native(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math3tanEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sin_native_half(half %x) #43
  %call1 = tail call half @__hc_cos_native_half(half %x) #43
  %call2 = tail call half @__hc_rcp_native_half(half %call1) #43
  %mul = fmul half %call, %call2
  ret half %mul
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math3tanEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tan(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4acosEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_acos_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4acosEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_acos(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4asinEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_asin_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4asinEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_asin(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4atanEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_atan_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4atanEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_atan(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4ceilEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_ceil_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4ceilEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_ceil(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4cosfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_native_cos(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4coshEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_cosh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4coshEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_cosh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4exp2EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_exp2_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4exp2Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_exp2_native(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4expfEf(float %x) #2 {
entry:
  %conv = fpext float %x to double
  %mul = fmul double %conv, 0x3FF71547652B82FE
  %conv1 = fptrunc double %mul to float
  %call = tail call float @__hc_exp2_native(float %conv1) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4fabsEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_fabs_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4fabsEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_fabs(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4fmaxEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmax_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4fmaxEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmax(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4fminEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmin_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4fminEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmin(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4fmodEDhDh(half %x, half %y) #2 {
entry:
  %call = tail call half @__hc_fmod_half(half %x, half %y) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4fmodEff(float %x, float %y) #2 {
entry:
  %call.i = tail call float @__hc_fmod(float %x, float %y) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4log2EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log2_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4log2Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log2_native(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4logfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log2_native(float %x) #43
  %mul = fmul float %call, 0x3FE62E4300000000
  ret float %mul
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4modfEDhPDh(half %x, half* %iptr) #2 {
entry:
  %call = tail call half @__hc_modf_half(half %x, half* %iptr) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4modfEfPf(float %x, float* %iptr) #2 {
entry:
  %call.i = tail call float @__hc_modf(float %x, float* %iptr) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4powfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_pow(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4sinfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sin_native(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4sinhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sinh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4sinhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sinh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4sqrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_sqrt_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4sqrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_sqrt_native(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4tanfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tan(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math4tanhEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_tanh_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math4tanhEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_tanh(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5acosfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_acos(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5asinfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_asin(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5atan2EDhDh(half %y, half %x) #2 {
entry:
  %call = tail call half @__hc_atan2_half(half %y, half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5atan2Eff(float %y, float %x) #2 {
entry:
  %call.i = tail call float @__hc_atan2(float %y, float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5atanfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_atan(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5ceilfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_ceil(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5coshfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_cosh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5exp2fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_exp2_native(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5fabsfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_fabs(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5floorEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_floor_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5floorEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_floor(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5fmaxfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmax(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5fminfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmin(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5fmodfEff(float %x, float %y) #2 {
entry:
  %call = tail call float @__hc_fmod(float %x, float %y) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5frexpEDhPi(half %x, i32* %exp) #2 {
entry:
  %call = tail call half @__hc_frexp_half(half %x, i32* %exp) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5frexpEfPi(float %x, i32* %exp) #2 {
entry:
  %call.i = tail call float @__hc_frexp(float %x, i32* %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math5isinfEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isinf_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math5isinfEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isinf(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math5isnanEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isnan_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math5isnanEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isnan(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5ldexpEDht(half %x, i16 zeroext %exp) #2 {
entry:
  %call = tail call half @__hc_ldexp_half(half %x, i16 signext %exp) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5ldexpEfi(float %x, i32 %exp) #2 {
entry:
  %call.i = tail call float @__hc_ldexp(float %x, i32 %exp) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5log10EDh(half %x) #2 {
entry:
  %call = tail call half @__hc_log2_native_half(half %x) #43
  %mul = fmul half %call, 0xH34D1
  ret half %mul
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5log10Ef(float %x) #2 {
entry:
  %call.i = tail call float @__hc_log2_native(float %x) #43
  %mul.i = fmul float %call.i, 0x3FD3441360000000
  ret float %mul.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5log2fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log2_native(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5modffEfPf(float %x, float* %iptr) #2 {
entry:
  %call = tail call float @__hc_modf(float %x, float* %iptr) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5roundEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_round_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5roundEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_round(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5rsqrtEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_rsqrt_native_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5rsqrtEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_rsqrt_native(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5sinhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sinh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5sqrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_sqrt_native(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5tanhfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_tanh(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr half @_ZN6Kalmar9fast_math5truncEDh(half %x) #2 {
entry:
  %call = tail call half @__hc_trunc_half(half %x) #43
  ret half %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math5truncEf(float %x) #2 {
entry:
  %call.i = tail call float @__hc_trunc(float %x) #43
  ret float %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6atan2fEff(float %y, float %x) #2 {
entry:
  %call = tail call float @__hc_atan2(float %y, float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6floorfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_floor(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6frexpfEfPi(float %x, i32* %exp) #2 {
entry:
  %call = tail call float @__hc_frexp(float %x, i32* %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6ldexpfEfi(float %x, i32 %exp) #2 {
entry:
  %call = tail call float @__hc_ldexp(float %x, i32 %exp) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6log10fEf(float %x) #2 {
entry:
  %call = tail call float @__hc_log2_native(float %x) #43
  %mul = fmul float %call, 0x3FD3441360000000
  ret float %mul
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6roundfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_round(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6rsqrtfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_rsqrt_native(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar9fast_math6sincosEDhPDhS1_(half %x, half* %s, half* %c) #2 {
entry:
  %call = tail call half @__hc_sincos_half(half %x, half* %c) #43
  store half %call, half* %s, align 2, !tbaa !11
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar9fast_math6sincosEfPfS1_(float %x, float* %s, float* %c) #2 {
entry:
  %call.i = tail call float @__hc_sincos(float %x, float* %c) #43
  store float %call.i, float* %s, align 4, !tbaa !17
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr float @_ZN6Kalmar9fast_math6truncfEf(float %x) #2 {
entry:
  %call = tail call float @__hc_trunc(float %x) #43
  ret float %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math7signbitEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_signbit_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math7signbitEf(float %x) #2 {
entry:
  %call.i = tail call i32 @__hc_signbit(float %x) #43
  ret i32 %call.i
}

; Function Attrs: alwaysinline
define linkonce_odr void @_ZN6Kalmar9fast_math7sincosfEfPfS1_(float %x, float* %s, float* %c) #2 {
entry:
  %call = tail call float @__hc_sincos(float %x, float* %c) #43
  store float %call, float* %s, align 4, !tbaa !17
  ret void
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math8isfiniteEDh(half %x) #2 {
entry:
  %call = tail call i32 @__hc_isfinite_half(half %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math8isfiniteEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_isfinite(float %x) #43
  ret i32 %call
}

; Function Attrs: alwaysinline
define linkonce_odr i32 @_ZN6Kalmar9fast_math8signbitfEf(float %x) #2 {
entry:
  %call = tail call i32 @__hc_signbit(float %x) #43
  ret i32 %call
}

declare half @__hc_rsqrt_native_half(half) local_unnamed_addr #3

declare half @__hc_cos_native_half(half) local_unnamed_addr #3

declare half @__hc_rcp_native_half(half) local_unnamed_addr #3

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC2Ev(%"class.Kalmar::index"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC1Ev(%"class.Kalmar::index"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC2ERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %other) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC1ERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %other) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC2Ei(%"class.Kalmar::index"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC1Ei(%"class.Kalmar::index"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC2EPKi(%"class.Kalmar::index"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC1EPKi(%"class.Kalmar::index"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC2EPi(%"class.Kalmar::index"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi1EEC1EPi(%"class.Kalmar::index"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEaSERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %other) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline norecurse
define weak_odr i32 @_ZNK6Kalmar5indexILi1EEixEj(%"class.Kalmar::index"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %base_ = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"struct.Kalmar::index_impl", %"struct.Kalmar::index_impl"* %base_, i64 %idx.ext.i, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  ret i32 %0
}

; Function Attrs: alwaysinline norecurse
define weak_odr dereferenceable(4) i32* @_ZN6Kalmar5indexILi1EEixEj(%"class.Kalmar::index"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %base_ = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"struct.Kalmar::index_impl", %"struct.Kalmar::index_impl"* %base_, i64 %idx.ext.i, i32 0, i32 0
  ret i32* %__idx.i.i
}

; Function Attrs: alwaysinline norecurse
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi1EEeqERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %other) local_unnamed_addr #5 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %other, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i4.i, align 4, !tbaa !22
  %cmp.i = icmp eq i32 %0, %1
  ret i1 %cmp.i
}

; Function Attrs: alwaysinline norecurse
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi1EEneERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %other) local_unnamed_addr #5 align 2 {
entry:
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %other, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i4.i.i, align 4, !tbaa !22
  %cmp.i.i = icmp ne i32 %0, %1
  ret i1 %cmp.i.i
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEpLERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i4.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %1, %0
  store i32 %add.i.i, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEmIERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i4.i, align 4, !tbaa !19
  %sub.i.i = sub nsw i32 %1, %0
  store i32 %sub.i.i, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEmLERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i4.i, align 4, !tbaa !19
  %mul.i.i = mul nsw i32 %1, %0
  store i32 %mul.i.i, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEdVERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i4.i, align 4, !tbaa !19
  %div.i.i = sdiv i32 %1, %0
  store i32 %div.i.i, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EErMERKS1_(%"class.Kalmar::index"* %this, %"class.Kalmar::index"* dereferenceable(8) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i4.i, align 4, !tbaa !19
  %rem.i.i = srem i32 %1, %0
  store i32 %rem.i.i, i32* %__idx.i4.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEpLEi(%"class.Kalmar::index"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, %value
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEmIEi(%"class.Kalmar::index"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = sub nsw i32 %0, %value
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEmLEi(%"class.Kalmar::index"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %mul.i.i = mul nsw i32 %0, %value
  store i32 %mul.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEdVEi(%"class.Kalmar::index"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %div.i.i = sdiv i32 %0, %value
  store i32 %div.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EErMEi(%"class.Kalmar::index"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %rem.i.i = srem i32 %0, %value
  store i32 %rem.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEppEv(%"class.Kalmar::index"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, 1
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi1EEppEi(%"class.Kalmar::index"* noalias sret %agg.result, %"class.Kalmar::index"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %1, 1
  store i32 %add.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(8) %"class.Kalmar::index"* @_ZN6Kalmar5indexILi1EEmmEv(%"class.Kalmar::index"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = add nsw i32 %0, -1
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  ret %"class.Kalmar::index"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi1EEmmEi(%"class.Kalmar::index"* noalias sret %agg.result, %"class.Kalmar::index"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %sub.i.i = add nsw i32 %1, -1
  store i32 %sub.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi1EE21__cxxamp_opencl_indexEv(%"class.Kalmar::index"* %this) local_unnamed_addr #2 align 2 {
entry:
  %call.i = tail call i32 @amp_get_global_id(i32 0) #44
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index", %"class.Kalmar::index"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %call.i, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC2Ev(%"class.Kalmar::index.0"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i2.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 0, i32* %__idx.i2.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC1Ev(%"class.Kalmar::index.0"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i2.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 0, i32* %__idx.i2.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC2ERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %other) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i3.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i3.i, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i4.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i4.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC1ERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %other) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i.i, align 4, !tbaa !22
  %__idx.i3.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i3.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %__idx.i4.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i4.i.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC2Ei(%"class.Kalmar::index.0"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i2.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %i0, i32* %__idx.i2.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC1Ei(%"class.Kalmar::index.0"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i2.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %i0, i32* %__idx.i2.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC2EPKi(%"class.Kalmar::index.0"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  %arrayidx2.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i, align 4, !tbaa !22
  %__idx.i3.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i3.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC1EPKi(%"class.Kalmar::index.0"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %arrayidx2.i.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i.i, align 4, !tbaa !22
  %__idx.i3.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i3.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC2EPi(%"class.Kalmar::index.0"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  %arrayidx2.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i, align 4, !tbaa !22
  %__idx.i3.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i3.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi2EEC1EPi(%"class.Kalmar::index.0"* %this, i32* %components) unnamed_addr #4 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %arrayidx2.i.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i.i, align 4, !tbaa !22
  %__idx.i3.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i3.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEaSERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %other) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline norecurse
define weak_odr i32 @_ZNK6Kalmar5indexILi2EEixEj(%"class.Kalmar::index.0"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %this12.cast.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i, i64 %idx.ext.i, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  ret i32 %0
}

; Function Attrs: alwaysinline norecurse
define weak_odr dereferenceable(4) i32* @_ZN6Kalmar5indexILi2EEixEj(%"class.Kalmar::index.0"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %this12.cast.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i, i64 %idx.ext.i, i32 0
  ret i32* %__idx.i.i
}

; Function Attrs: alwaysinline
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi2EEeqERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %other) local_unnamed_addr #2 align 2 {
entry:
  %this12.cast.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 1, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %this12.cast.i.i4.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0
  %__idx.i.i.i6.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i, i64 1, i32 0
  %1 = load i32, i32* %__idx.i.i.i6.i, align 4, !tbaa !22
  %cmp.i = icmp eq i32 %0, %1
  br i1 %cmp.i, label %land.rhs.i, label %_ZN6Kalmar12index_helperILi2ENS_5indexILi2EEEE5equalERKS2_S5_.exit

land.rhs.i:                                       ; preds = %entry
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %2 = load i32, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0, i32 0
  %3 = load i32, i32* %__idx.i.i.i4.i.i, align 4, !tbaa !22
  %cmp.i.i = icmp eq i32 %2, %3
  br label %_ZN6Kalmar12index_helperILi2ENS_5indexILi2EEEE5equalERKS2_S5_.exit

_ZN6Kalmar12index_helperILi2ENS_5indexILi2EEEE5equalERKS2_S5_.exit: ; preds = %land.rhs.i, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp.i.i, %land.rhs.i ]
  ret i1 %4
}

; Function Attrs: alwaysinline
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi2EEneERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %other) local_unnamed_addr #2 align 2 {
entry:
  %this12.cast.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i.i, i64 1, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %this12.cast.i.i4.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0
  %__idx.i.i.i6.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i.i, i64 1, i32 0
  %1 = load i32, i32* %__idx.i.i.i6.i.i, align 4, !tbaa !22
  %cmp.i.i = icmp eq i32 %0, %1
  br i1 %cmp.i.i, label %land.rhs.i.i, label %_ZNK6Kalmar5indexILi2EEeqERKS1_.exit

land.rhs.i.i:                                     ; preds = %entry
  %__idx.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %2 = load i32, i32* %__idx.i.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %other, i64 0, i32 0, i32 0, i32 0
  %3 = load i32, i32* %__idx.i.i.i4.i.i.i, align 4, !tbaa !22
  %cmp.i.i.i = icmp ne i32 %2, %3
  br label %_ZNK6Kalmar5indexILi2EEeqERKS1_.exit

_ZNK6Kalmar5indexILi2EEeqERKS1_.exit:             ; preds = %land.rhs.i.i, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp.i.i.i, %land.rhs.i.i ]
  ret i1 %4
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEpLERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i12.i, align 4, !tbaa !19
  %add.i13.i = add nsw i32 %1, %0
  store i32 %add.i13.i, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %rhs, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i10.i, align 4, !tbaa !23
  %add.i.i = add nsw i32 %3, %2
  store i32 %add.i.i, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEmIERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i12.i, align 4, !tbaa !19
  %sub.i13.i = sub nsw i32 %1, %0
  store i32 %sub.i13.i, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %rhs, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i10.i, align 4, !tbaa !23
  %sub.i.i = sub nsw i32 %3, %2
  store i32 %sub.i.i, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEmLERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i12.i, align 4, !tbaa !19
  %mul.i13.i = mul nsw i32 %1, %0
  store i32 %mul.i13.i, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i10.i, align 4, !tbaa !23
  %mul.i.i = mul nsw i32 %3, %2
  store i32 %mul.i.i, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEdVERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i12.i, align 4, !tbaa !19
  %div.i13.i = sdiv i32 %1, %0
  store i32 %div.i13.i, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i10.i, align 4, !tbaa !23
  %div.i.i = sdiv i32 %3, %2
  store i32 %div.i.i, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EErMERKS1_(%"class.Kalmar::index.0"* %this, %"class.Kalmar::index.0"* dereferenceable(16) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i12.i, align 4, !tbaa !19
  %rem.i13.i = srem i32 %1, %0
  store i32 %rem.i13.i, i32* %__idx.i12.i, align 4, !tbaa !19
  %__idx.i11.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i11.i, align 4, !tbaa !22
  %__idx.i10.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i10.i, align 4, !tbaa !23
  %rem.i.i = srem i32 %3, %2
  store i32 %rem.i.i, i32* %__idx.i10.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEpLEi(%"class.Kalmar::index.0"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, %value
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %add.i8.i = add nsw i32 %1, %value
  store i32 %add.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEmIEi(%"class.Kalmar::index.0"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = sub nsw i32 %0, %value
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %sub.i8.i = sub nsw i32 %1, %value
  store i32 %sub.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEmLEi(%"class.Kalmar::index.0"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %mul.i.i = mul nsw i32 %0, %value
  store i32 %mul.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %mul.i8.i = mul nsw i32 %1, %value
  store i32 %mul.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEdVEi(%"class.Kalmar::index.0"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %div.i.i = sdiv i32 %0, %value
  store i32 %div.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %div.i8.i = sdiv i32 %1, %value
  store i32 %div.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EErMEi(%"class.Kalmar::index.0"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %rem.i.i = srem i32 %0, %value
  store i32 %rem.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %rem.i8.i = srem i32 %1, %value
  store i32 %rem.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEppEv(%"class.Kalmar::index.0"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, 1
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %add.i8.i = add nsw i32 %1, 1
  store i32 %add.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi2EEppEi(%"class.Kalmar::index.0"* noalias sret %agg.result, %"class.Kalmar::index.0"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i3.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i3.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %__idx.i4.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %agg.result, i64 0, i32 0, i32 1, i32 0
  store i32 %2, i32* %__idx.i4.i.i.i.i, align 4, !tbaa !23
  %add.i.i = add nsw i32 %1, 1
  store i32 %add.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %add.i8.i = add nsw i32 %2, 1
  store i32 %add.i8.i, i32* %__idx.i3.i.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(16) %"class.Kalmar::index.0"* @_ZN6Kalmar5indexILi2EEmmEv(%"class.Kalmar::index.0"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = add nsw i32 %0, -1
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i7.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i7.i, align 4, !tbaa !23
  %sub.i8.i = add nsw i32 %1, -1
  store i32 %sub.i8.i, i32* %__idx.i7.i, align 4, !tbaa !23
  ret %"class.Kalmar::index.0"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi2EEmmEi(%"class.Kalmar::index.0"* noalias sret %agg.result, %"class.Kalmar::index.0"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i3.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i3.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %__idx.i4.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %agg.result, i64 0, i32 0, i32 1, i32 0
  store i32 %2, i32* %__idx.i4.i.i.i.i, align 4, !tbaa !23
  %sub.i.i = add nsw i32 %1, -1
  store i32 %sub.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %sub.i8.i = add nsw i32 %2, -1
  store i32 %sub.i8.i, i32* %__idx.i3.i.i.i, align 4, !tbaa !23
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi2EE21__cxxamp_opencl_indexEv(%"class.Kalmar::index.0"* %this) local_unnamed_addr #2 align 2 {
entry:
  %call.i = tail call i32 @amp_get_global_id(i32 0) #44
  %this12.cast.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 1, i32 0
  store i32 %call.i, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %call.i.i = tail call i32 @amp_get_global_id(i32 1) #44
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.0", %"class.Kalmar::index.0"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %call.i.i, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi3EEC2Ev(%"class.Kalmar::index.3"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i3.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 0, i32* %__idx.i3.i, align 4, !tbaa !23
  %__idx.i2.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 0, i32* %__idx.i2.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi3EEC1Ev(%"class.Kalmar::index.3"* %this) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i3.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 0, i32* %__idx.i3.i.i, align 4, !tbaa !23
  %__idx.i2.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 0, i32* %__idx.i2.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC2ERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %other) unnamed_addr #6 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i6.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i6.i, align 4, !tbaa !22
  %__idx.i5.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i5.i, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i7.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i7.i.i, align 4, !tbaa !23
  %__idx.i6.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i6.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC1ERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %other) unnamed_addr #6 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i.i, align 4, !tbaa !22
  %__idx.i6.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i6.i.i, align 4, !tbaa !22
  %__idx.i5.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i5.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %__idx.i7.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i7.i.i.i, align 4, !tbaa !23
  %__idx.i6.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i6.i.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi3EEC2Ei(%"class.Kalmar::index.3"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i3.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %i0, i32* %__idx.i3.i, align 4, !tbaa !23
  %__idx.i2.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %i0, i32* %__idx.i2.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline norecurse
define weak_odr void @_ZN6Kalmar5indexILi3EEC1Ei(%"class.Kalmar::index.3"* %this, i32 %i0) unnamed_addr #4 align 2 {
entry:
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %i0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %__idx.i3.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %i0, i32* %__idx.i3.i.i, align 4, !tbaa !23
  %__idx.i2.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %i0, i32* %__idx.i2.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC2EPKi(%"class.Kalmar::index.3"* %this, i32* %components) unnamed_addr #6 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  %arrayidx2.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i, align 4, !tbaa !22
  %__idx.i5.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i5.i, align 4, !tbaa !23
  %arrayidx3.i = getelementptr inbounds i32, i32* %components, i64 2
  %2 = load i32, i32* %arrayidx3.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i4.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC1EPKi(%"class.Kalmar::index.3"* %this, i32* %components) unnamed_addr #6 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %arrayidx2.i.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i.i, align 4, !tbaa !22
  %__idx.i5.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i5.i.i, align 4, !tbaa !23
  %arrayidx3.i.i = getelementptr inbounds i32, i32* %components, i64 2
  %2 = load i32, i32* %arrayidx3.i.i, align 4, !tbaa !22
  %__idx.i4.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i4.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC2EPi(%"class.Kalmar::index.3"* %this, i32* %components) unnamed_addr #6 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i, align 4, !tbaa !19
  %arrayidx2.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i, align 4, !tbaa !22
  %__idx.i5.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i5.i, align 4, !tbaa !23
  %arrayidx3.i = getelementptr inbounds i32, i32* %components, i64 2
  %2 = load i32, i32* %arrayidx3.i, align 4, !tbaa !22
  %__idx.i4.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i4.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEC1EPi(%"class.Kalmar::index.3"* %this, i32* %components) unnamed_addr #6 align 2 {
entry:
  %0 = load i32, i32* %components, align 4, !tbaa !22
  %__idx.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i.i.i, align 4, !tbaa !19
  %arrayidx2.i.i = getelementptr inbounds i32, i32* %components, i64 1
  %1 = load i32, i32* %arrayidx2.i.i, align 4, !tbaa !22
  %__idx.i5.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i5.i.i, align 4, !tbaa !23
  %arrayidx3.i.i = getelementptr inbounds i32, i32* %components, i64 2
  %2 = load i32, i32* %arrayidx3.i.i, align 4, !tbaa !22
  %__idx.i4.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i4.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEaSERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %other) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %0, i32* %__idx.i21.i, align 4, !tbaa !19
  %__idx.i20.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i20.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  store i32 %1, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  store i32 %2, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline norecurse
define weak_odr i32 @_ZNK6Kalmar5indexILi3EEixEj(%"class.Kalmar::index.3"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %this12.cast.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i, i64 %idx.ext.i, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  ret i32 %0
}

; Function Attrs: alwaysinline norecurse
define weak_odr dereferenceable(4) i32* @_ZN6Kalmar5indexILi3EEixEj(%"class.Kalmar::index.3"* %this, i32 %c) local_unnamed_addr #5 align 2 {
entry:
  %this12.cast.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0
  %idx.ext.i = zext i32 %c to i64
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i, i64 %idx.ext.i, i32 0
  ret i32* %__idx.i.i
}

; Function Attrs: alwaysinline
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi3EEeqERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %other) local_unnamed_addr #2 align 2 {
entry:
  %this12.cast.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 2, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %this12.cast.i.i4.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0
  %__idx.i.i.i6.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i, i64 2, i32 0
  %1 = load i32, i32* %__idx.i.i.i6.i, align 4, !tbaa !22
  %cmp.i = icmp eq i32 %0, %1
  br i1 %cmp.i, label %land.rhs.i, label %_ZN6Kalmar12index_helperILi3ENS_5indexILi3EEEE5equalERKS2_S5_.exit

land.rhs.i:                                       ; preds = %entry
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 1, i32 0
  %2 = load i32, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i6.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i, i64 1, i32 0
  %3 = load i32, i32* %__idx.i.i.i6.i.i, align 4, !tbaa !22
  %cmp.i.i = icmp eq i32 %2, %3
  br i1 %cmp.i.i, label %land.rhs.i.i, label %_ZN6Kalmar12index_helperILi3ENS_5indexILi3EEEE5equalERKS2_S5_.exit

land.rhs.i.i:                                     ; preds = %land.rhs.i
  %__idx.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %__idx.i.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %__idx.i.i.i4.i.i.i, align 4, !tbaa !22
  %cmp.i.i.i = icmp eq i32 %4, %5
  br label %_ZN6Kalmar12index_helperILi3ENS_5indexILi3EEEE5equalERKS2_S5_.exit

_ZN6Kalmar12index_helperILi3ENS_5indexILi3EEEE5equalERKS2_S5_.exit: ; preds = %land.rhs.i.i, %land.rhs.i, %entry
  %6 = phi i1 [ false, %entry ], [ false, %land.rhs.i ], [ %cmp.i.i.i, %land.rhs.i.i ]
  ret i1 %6
}

; Function Attrs: alwaysinline
define weak_odr zeroext i1 @_ZNK6Kalmar5indexILi3EEneERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %other) local_unnamed_addr #2 align 2 {
entry:
  %this12.cast.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i.i, i64 2, i32 0
  %0 = load i32, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %this12.cast.i.i4.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0
  %__idx.i.i.i6.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i.i, i64 2, i32 0
  %1 = load i32, i32* %__idx.i.i.i6.i.i, align 4, !tbaa !22
  %cmp.i.i = icmp eq i32 %0, %1
  br i1 %cmp.i.i, label %land.rhs.i.i, label %_ZNK6Kalmar5indexILi3EEeqERKS1_.exit

land.rhs.i.i:                                     ; preds = %entry
  %__idx.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i.i, i64 1, i32 0
  %2 = load i32, i32* %__idx.i.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i6.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i4.i.i, i64 1, i32 0
  %3 = load i32, i32* %__idx.i.i.i6.i.i.i, align 4, !tbaa !22
  %cmp.i.i.i = icmp eq i32 %2, %3
  br i1 %cmp.i.i.i, label %land.rhs.i.i.i, label %_ZNK6Kalmar5indexILi3EEeqERKS1_.exit

land.rhs.i.i.i:                                   ; preds = %land.rhs.i.i
  %__idx.i.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %__idx.i.i.i.i.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i4.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %other, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %__idx.i.i.i4.i.i.i.i, align 4, !tbaa !22
  %cmp.i.i.i.i = icmp ne i32 %4, %5
  br label %_ZNK6Kalmar5indexILi3EEeqERKS1_.exit

_ZNK6Kalmar5indexILi3EEeqERKS1_.exit:             ; preds = %land.rhs.i.i.i, %land.rhs.i.i, %entry
  %6 = phi i1 [ true, %entry ], [ true, %land.rhs.i.i ], [ %cmp.i.i.i.i, %land.rhs.i.i.i ]
  ret i1 %6
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEpLERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i22.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i22.i, align 4, !tbaa !19
  %add.i23.i = add nsw i32 %1, %0
  store i32 %add.i23.i, i32* %__idx.i22.i, align 4, !tbaa !19
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i21.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i19.i, align 4, !tbaa !23
  %add.i20.i = add nsw i32 %3, %2
  store i32 %add.i20.i, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 2, i32 0
  %4 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %5 = load i32, i32* %__idx.i17.i, align 4, !tbaa !25
  %add.i.i = add nsw i32 %5, %4
  store i32 %add.i.i, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEmIERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %rhs) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i22.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i22.i, align 4, !tbaa !19
  %sub.i23.i = sub nsw i32 %1, %0
  store i32 %sub.i23.i, i32* %__idx.i22.i, align 4, !tbaa !19
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i21.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i19.i, align 4, !tbaa !23
  %sub.i20.i = sub nsw i32 %3, %2
  store i32 %sub.i20.i, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %rhs, i64 0, i32 0, i32 2, i32 0
  %4 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %5 = load i32, i32* %__idx.i17.i, align 4, !tbaa !25
  %sub.i.i = sub nsw i32 %5, %4
  store i32 %sub.i.i, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEmLERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i22.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i22.i, align 4, !tbaa !19
  %mul.i23.i = mul nsw i32 %1, %0
  store i32 %mul.i23.i, i32* %__idx.i22.i, align 4, !tbaa !19
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i21.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i19.i, align 4, !tbaa !23
  %mul.i20.i = mul nsw i32 %3, %2
  store i32 %mul.i20.i, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 2, i32 0
  %4 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %5 = load i32, i32* %__idx.i17.i, align 4, !tbaa !25
  %mul.i.i = mul nsw i32 %5, %4
  store i32 %mul.i.i, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEdVERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i22.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i22.i, align 4, !tbaa !19
  %div.i23.i = sdiv i32 %1, %0
  store i32 %div.i23.i, i32* %__idx.i22.i, align 4, !tbaa !19
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i21.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i19.i, align 4, !tbaa !23
  %div.i20.i = sdiv i32 %3, %2
  store i32 %div.i20.i, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 2, i32 0
  %4 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %5 = load i32, i32* %__idx.i17.i, align 4, !tbaa !25
  %div.i.i = sdiv i32 %5, %4
  store i32 %div.i.i, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EErMERKS1_(%"class.Kalmar::index.3"* %this, %"class.Kalmar::index.3"* dereferenceable(24) %__r) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !22
  %__idx.i22.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i22.i, align 4, !tbaa !19
  %rem.i23.i = srem i32 %1, %0
  store i32 %rem.i23.i, i32* %__idx.i22.i, align 4, !tbaa !19
  %__idx.i21.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i21.i, align 4, !tbaa !22
  %__idx.i19.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %3 = load i32, i32* %__idx.i19.i, align 4, !tbaa !23
  %rem.i20.i = srem i32 %3, %2
  store i32 %rem.i20.i, i32* %__idx.i19.i, align 4, !tbaa !23
  %__idx.i18.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %__r, i64 0, i32 0, i32 2, i32 0
  %4 = load i32, i32* %__idx.i18.i, align 4, !tbaa !22
  %__idx.i17.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %5 = load i32, i32* %__idx.i17.i, align 4, !tbaa !25
  %rem.i.i = srem i32 %5, %4
  store i32 %rem.i.i, i32* %__idx.i17.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEpLEi(%"class.Kalmar::index.3"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, %value
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %add.i15.i = add nsw i32 %1, %value
  store i32 %add.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %add.i13.i = add nsw i32 %2, %value
  store i32 %add.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEmIEi(%"class.Kalmar::index.3"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = sub nsw i32 %0, %value
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %sub.i15.i = sub nsw i32 %1, %value
  store i32 %sub.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %sub.i13.i = sub nsw i32 %2, %value
  store i32 %sub.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEmLEi(%"class.Kalmar::index.3"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %mul.i.i = mul nsw i32 %0, %value
  store i32 %mul.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %mul.i15.i = mul nsw i32 %1, %value
  store i32 %mul.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %mul.i13.i = mul nsw i32 %2, %value
  store i32 %mul.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEdVEi(%"class.Kalmar::index.3"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %div.i.i = sdiv i32 %0, %value
  store i32 %div.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %div.i15.i = sdiv i32 %1, %value
  store i32 %div.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %div.i13.i = sdiv i32 %2, %value
  store i32 %div.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EErMEi(%"class.Kalmar::index.3"* %this, i32 %value) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %rem.i.i = srem i32 %0, %value
  store i32 %rem.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %rem.i15.i = srem i32 %1, %value
  store i32 %rem.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %rem.i13.i = srem i32 %2, %value
  store i32 %rem.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEppEv(%"class.Kalmar::index.3"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %add.i.i = add nsw i32 %0, 1
  store i32 %add.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %add.i15.i = add nsw i32 %1, 1
  store i32 %add.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %add.i13.i = add nsw i32 %2, 1
  store i32 %add.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEppEi(%"class.Kalmar::index.3"* noalias sret %agg.result, %"class.Kalmar::index.3"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i6.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i6.i.i.i, align 4, !tbaa !22
  %__idx.i5.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %3 = load i32, i32* %__idx.i5.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %__idx.i7.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 1, i32 0
  store i32 %2, i32* %__idx.i7.i.i.i.i, align 4, !tbaa !23
  %__idx.i6.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 2, i32 0
  store i32 %3, i32* %__idx.i6.i.i.i.i, align 4, !tbaa !25
  %add.i.i = add nsw i32 %1, 1
  store i32 %add.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %add.i15.i = add nsw i32 %2, 1
  store i32 %add.i15.i, i32* %__idx.i6.i.i.i, align 4, !tbaa !23
  %add.i13.i = add nsw i32 %3, 1
  store i32 %add.i13.i, i32* %__idx.i5.i.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr dereferenceable(24) %"class.Kalmar::index.3"* @_ZN6Kalmar5indexILi3EEmmEv(%"class.Kalmar::index.3"* %this) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load i32, i32* %__idx.i.i, align 4, !tbaa !19
  %sub.i.i = add nsw i32 %0, -1
  store i32 %sub.i.i, i32* %__idx.i.i, align 4, !tbaa !19
  %__idx.i14.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %1 = load i32, i32* %__idx.i14.i, align 4, !tbaa !23
  %sub.i15.i = add nsw i32 %1, -1
  store i32 %sub.i15.i, i32* %__idx.i14.i, align 4, !tbaa !23
  %__idx.i12.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %2 = load i32, i32* %__idx.i12.i, align 4, !tbaa !25
  %sub.i13.i = add nsw i32 %2, -1
  store i32 %sub.i13.i, i32* %__idx.i12.i, align 4, !tbaa !25
  ret %"class.Kalmar::index.3"* %this
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EEmmEi(%"class.Kalmar::index.3"* noalias sret %agg.result, %"class.Kalmar::index.3"* %this, i32) local_unnamed_addr #2 align 2 {
entry:
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  %1 = load i32, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %__idx.i6.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 1, i32 0
  %2 = load i32, i32* %__idx.i6.i.i.i, align 4, !tbaa !22
  %__idx.i5.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 2, i32 0
  %3 = load i32, i32* %__idx.i5.i.i.i, align 4, !tbaa !22
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 0, i32 0
  store i32 %1, i32* %__idx.i.i.i.i.i, align 4, !tbaa !19
  %__idx.i7.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 1, i32 0
  store i32 %2, i32* %__idx.i7.i.i.i.i, align 4, !tbaa !23
  %__idx.i6.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %agg.result, i64 0, i32 0, i32 2, i32 0
  store i32 %3, i32* %__idx.i6.i.i.i.i, align 4, !tbaa !25
  %sub.i.i = add nsw i32 %1, -1
  store i32 %sub.i.i, i32* %__idx.i.i.i.i, align 4, !tbaa !19
  %sub.i15.i = add nsw i32 %2, -1
  store i32 %sub.i15.i, i32* %__idx.i6.i.i.i, align 4, !tbaa !23
  %sub.i13.i = add nsw i32 %3, -1
  store i32 %sub.i13.i, i32* %__idx.i5.i.i.i, align 4, !tbaa !25
  ret void
}

; Function Attrs: alwaysinline
define weak_odr void @_ZN6Kalmar5indexILi3EE21__cxxamp_opencl_indexEv(%"class.Kalmar::index.3"* %this) local_unnamed_addr #2 align 2 {
entry:
  %call.i = tail call i32 @amp_get_global_id(i32 0) #44
  %this12.cast.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0
  %__idx.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 2, i32 0
  store i32 %call.i, i32* %__idx.i.i.i.i, align 4, !tbaa !22
  %call.i.i = tail call i32 @amp_get_global_id(i32 1) #44
  %__idx.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::__index_leaf", %"class.Kalmar::__index_leaf"* %this12.cast.i.i.i, i64 1, i32 0
  store i32 %call.i.i, i32* %__idx.i.i.i.i.i, align 4, !tbaa !22
  %call.i.i.i = tail call i32 @amp_get_global_id(i32 2) #44
  %__idx.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::index.3", %"class.Kalmar::index.3"* %this, i64 0, i32 0, i32 0, i32 0
  store i32 %call.i.i.i, i32* %__idx.i.i.i.i.i.i, align 4, !tbaa !22
  ret void
}

define %struct.RuntimeImpl* @_ZN6Kalmar5CLAMP16GetOrInitRuntimeEv() local_unnamed_addr #7 {
entry:
  %__dnew.i.i.i.i.i.i636 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i.i.i471 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i.i.i264 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i201 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i.i.i126 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i67 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i9.i.i = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i.i.i = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i12.i = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i.i = alloca i64, align 8, addrspace(5)
  %ref.tmp.i = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %ref.tmp3.i = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %hsa_rt = alloca %"class.Kalmar::CLAMP::HSAPlatformDetect", align 8, addrspace(5)
  %0 = addrspacecast %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt to %"class.Kalmar::CLAMP::HSAPlatformDetect"*
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %1 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp to %"class.std::__cxx11::basic_string"*
  %ref.tmp10 = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %2 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10 to %"class.std::__cxx11::basic_string"*
  %ref.tmp22 = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %3 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22 to %"class.std::__cxx11::basic_string"*
  %4 = load %struct.RuntimeImpl*, %struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl, align 8, !tbaa !27
  %cmp = icmp eq %struct.RuntimeImpl* %4, null
  br i1 %cmp, label %if.then, label %if.end45

if.then:                                          ; preds = %entry
  %5 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %5)
  %6 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %6)
  %7 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i to %"class.std::__cxx11::basic_string"*
  %8 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i to %"class.std::__cxx11::basic_string"*
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 2
  %.cast.i.i.i = ptrtoint %union.anon* %9 to i64
  %10 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i to i64 addrspace(5)*
  store i64 %.cast.i.i.i, i64 addrspace(5)* %10, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i8* null), label %cond.end.i.i, label %cond.true.i.i

cond.true.i.i:                                    ; preds = %if.then
  %call.i.i.i = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*)) #45
  %add.ptr.i.i1278 = getelementptr inbounds [4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 %call.i.i.i
  %add.ptr.i.i = addrspacecast i8 addrspace(4)* %add.ptr.i.i1278 to i8*
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.true.i.i, %if.then
  %cond.i.i = phi i8* [ %add.ptr.i.i, %cond.true.i.i ], [ inttoptr (i64 -1 to i8*), %if.then ]
  %11 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %11)
  %12 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i to i64*
  %cmp.i.i.i.i.i = icmp eq i8* %cond.i.i, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*)
  %or.cond = or i1 %cmp.i.i.i.i.i, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond, label %if.end.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %cond.end.i.i
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i:                                 ; preds = %cond.end.i.i
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i = ptrtoint i8* %cond.i.i to i64
  %sub.ptr.sub.i.i.i.i.i.i.i = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i.i, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i.i = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i.i, 15
  br i1 %cmp3.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.thread, label %if.end6.i.i.i.i.i

if.else.i.i.i.i.i.i.i.thread:                     ; preds = %if.end.i.i.i.i.i
  %call5.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %7, i64* dereferenceable(8) %12, i64 0) #43
  %_M_p.i8.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i.i, align 8, !tbaa !33
  %13 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i, i32 0, i32 2, i32 0
  store i64 %13, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.end.i.i.i.i.i
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i, i32 0, i32 0, i32 0
  %14 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.i, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %15 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %15, i8* %14, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.thread
  %_M_p.i.i.i.i.i.i11931195 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.thread ], [ %_M_p.i.i.i.i.i.i, %if.end6.i.i.i.i.i ]
  %16 = phi i8* [ %call5.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.thread ], [ %14, %if.end6.i.i.i.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i.i, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %_M_p.i.i.i.i.i.i1192 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i ], [ %_M_p.i.i.i.i.i.i11931195, %if.end.i.i.i.i.i.i.i.i ], [ %_M_p.i.i.i.i.i.i, %if.end6.i.i.i.i.i ]
  %17 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i, i32 0, i32 1
  store i64 %17, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !36
  %18 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.i1192, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %18, i64 %17
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %11)
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 2
  %.cast.i.i20.i = ptrtoint %union.anon* %19 to i64
  %20 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i to i64 addrspace(5)*
  store i64 %.cast.i.i20.i, i64 addrspace(5)* %20, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null), label %cond.end.i25.i, label %cond.true.i23.i

cond.true.i23.i:                                  ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i
  %call.i.i21.i = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)) #45
  %add.ptr.i22.i1279 = getelementptr inbounds [17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 %call.i.i21.i
  %add.ptr.i22.i = addrspacecast i8 addrspace(4)* %add.ptr.i22.i1279 to i8*
  br label %cond.end.i25.i

cond.end.i25.i:                                   ; preds = %cond.true.i23.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i
  %cond.i24.i = phi i8* [ %add.ptr.i22.i, %cond.true.i23.i ], [ inttoptr (i64 -1 to i8*), %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i ]
  %21 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i12.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %21)
  %22 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i12.i to i64*
  %cmp.i.i.i.i26.i = icmp eq i8* %cond.i24.i, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)
  %or.cond1268 = or i1 %cmp.i.i.i.i26.i, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1268, label %if.end.i.i.i.i33.i, label %if.then.i.i.i.i28.i

if.then.i.i.i.i28.i:                              ; preds = %cond.end.i25.i
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i33.i:                               ; preds = %cond.end.i25.i
  %sub.ptr.lhs.cast.i.i.i.i.i.i30.i = ptrtoint i8* %cond.i24.i to i64
  %sub.ptr.sub.i.i.i.i.i.i31.i = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i30.i, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i31.i, i64 addrspace(5)* %__dnew.i.i.i.i12.i, align 8, !tbaa !31
  %cmp3.i.i.i.i32.i = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i31.i, 15
  br i1 %cmp3.i.i.i.i32.i, label %if.else.i.i.i.i.i.i46.i.thread, label %if.end6.i.i.i.i43.i

if.else.i.i.i.i.i.i46.i.thread:                   ; preds = %if.end.i.i.i.i33.i
  %call5.i.i.i.i34.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %8, i64* dereferenceable(8) %22, i64 0) #43
  %_M_p.i8.i.i.i.i35.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i34.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i35.i, align 8, !tbaa !33
  %23 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i12.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i36.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i, i32 0, i32 2, i32 0
  store i64 %23, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i36.i, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i47.i

if.end6.i.i.i.i43.i:                              ; preds = %if.end.i.i.i.i33.i
  %_M_p.i.i.i.i.i38.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i, i32 0, i32 0, i32 0
  %24 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i38.i, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i31.i, label %if.end.i.i.i.i.i.i.i47.i [
    i64 1, label %if.then.i.i.i.i.i.i44.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i
  ]

if.then.i.i.i.i.i.i44.i:                          ; preds = %if.end6.i.i.i.i43.i
  %25 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %25, i8* %24, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i

if.end.i.i.i.i.i.i.i47.i:                         ; preds = %if.end6.i.i.i.i43.i, %if.else.i.i.i.i.i.i46.i.thread
  %_M_p.i.i.i.i.i38.i12001202 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i35.i, %if.else.i.i.i.i.i.i46.i.thread ], [ %_M_p.i.i.i.i.i38.i, %if.end6.i.i.i.i43.i ]
  %26 = phi i8* [ %call5.i.i.i.i34.i, %if.else.i.i.i.i.i.i46.i.thread ], [ %24, %if.end6.i.i.i.i43.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i31.i, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i: ; preds = %if.end.i.i.i.i.i.i.i47.i, %if.then.i.i.i.i.i.i44.i, %if.end6.i.i.i.i43.i
  %_M_p.i.i.i.i.i38.i1199 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i38.i, %if.then.i.i.i.i.i.i44.i ], [ %_M_p.i.i.i.i.i38.i12001202, %if.end.i.i.i.i.i.i.i47.i ], [ %_M_p.i.i.i.i.i38.i, %if.end6.i.i.i.i43.i ]
  %27 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i12.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i49.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i, i32 0, i32 1
  store i64 %27, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i49.i, align 8, !tbaa !36
  %28 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i38.i1199, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i51.i = getelementptr inbounds i8, i8* %28, i64 %27
  store i8 0, i8* %arrayidx.i.i.i.i.i51.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %21)
  %29 = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN6Kalmar5CLAMP14PlatformDetectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** addrspace(5)* %29, align 8, !tbaa !37
  %m_ampRuntimeLibrary.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 1
  %30 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %m_ampRuntimeLibrary.i.i to %"class.std::__cxx11::basic_string"*
  %31 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %30, i64 0, i32 2
  %.cast.i.i.i.i = ptrtoint %union.anon* %31 to i64
  %32 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %m_ampRuntimeLibrary.i.i to i64 addrspace(5)*
  store i64 %.cast.i.i.i.i, i64 addrspace(5)* %32, align 8, !tbaa !29
  %33 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i38.i1199, align 8, !tbaa !33
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 1
  %34 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !36
  %35 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %35)
  %36 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i to i64*
  %cmp.i.i.i.i.i.i55.i = icmp ne i8* %33, null
  %cmp.i.i.i.i.i.i = icmp eq i64 %34, 0
  %or.cond1269 = or i1 %cmp.i.i.i.i.i.i55.i, %cmp.i.i.i.i.i.i
  %37 = bitcast %union.anon* %31 to i8*
  br i1 %or.cond1269, label %if.end.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i
  call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr ([42 x i8], [42 x i8]* addrspacecast ([42 x i8] addrspace(4)* @.str.11 to [42 x i8]*), i64 0, i64 0)) #46
  unreachable

if.end.i.i.i.i.i.i:                               ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit52.i
  store i64 %34, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i = icmp ugt i64 %34, 15
  br i1 %cmp3.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i.thread, label %if.end6.i.i.i.i.i.i

if.else.i.i.i.i.i.i.i.i.thread:                   ; preds = %if.end.i.i.i.i.i.i
  %call5.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %30, i64* dereferenceable(8) %36, i64 0) #43
  %_M_p.i8.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %m_ampRuntimeLibrary.i.i, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i.i.i, align 8, !tbaa !33
  %38 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 1, i32 2, i32 0
  store i64 %38, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i.i

if.end6.i.i.i.i.i.i:                              ; preds = %if.end.i.i.i.i.i.i
  %_M_p.i.i.i.i.i.i56.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %m_ampRuntimeLibrary.i.i, i32 0, i32 0, i32 0
  switch i64 %34, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i
  ]

if.then.i.i.i.i.i.i.i.i:                          ; preds = %if.end6.i.i.i.i.i.i
  %39 = load i8, i8* %33, align 1, !tbaa !35
  store i8 %39, i8* %37, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end6.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i.thread
  %_M_p.i.i.i.i.i.i56.i12071209 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i.thread ], [ %_M_p.i.i.i.i.i.i56.i, %if.end6.i.i.i.i.i.i ]
  %40 = phi i8* [ %call5.i.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i.thread ], [ %37, %if.end6.i.i.i.i.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %33, i64 %34, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i: ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i
  %_M_p.i.i.i.i.i.i56.i1206 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i.i56.i, %if.then.i.i.i.i.i.i.i.i ], [ %_M_p.i.i.i.i.i.i56.i12071209, %if.end.i.i.i.i.i.i.i.i.i ], [ %_M_p.i.i.i.i.i.i56.i, %if.end6.i.i.i.i.i.i ]
  %41 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 1, i32 1
  store i64 %41, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !36
  %42 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.i56.i1206, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %42, i64 %41
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %35)
  %m_name.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 2
  %43 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %m_name.i.i to %"class.std::__cxx11::basic_string"*
  %44 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %43, i64 0, i32 2
  %.cast.i.i18.i.i = ptrtoint %union.anon* %44 to i64
  %45 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %m_name.i.i to i64 addrspace(5)*
  store i64 %.cast.i.i18.i.i, i64 addrspace(5)* %45, align 8, !tbaa !29
  %_M_p.i6.i19.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 0, i32 0
  %46 = load i8*, i8** %_M_p.i6.i19.i.i, align 8, !tbaa !33
  %_M_string_length.i.i21.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 1
  %47 = load i64, i64* %_M_string_length.i.i21.i.i, align 8, !tbaa !36
  %48 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i9.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %48)
  %49 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i9.i.i to i64*
  %cmp.i.i.i.i.i23.i.i = icmp ne i8* %46, null
  %cmp.i.i.i.i24.i.i = icmp eq i64 %47, 0
  %or.cond1270 = or i1 %cmp.i.i.i.i.i23.i.i, %cmp.i.i.i.i24.i.i
  %50 = bitcast %union.anon* %44 to i8*
  br i1 %or.cond1270, label %if.end.i.i.i.i31.i.i, label %if.then.i.i.i.i26.i.i

if.then.i.i.i.i26.i.i:                            ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i
  call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr ([42 x i8], [42 x i8]* addrspacecast ([42 x i8] addrspace(4)* @.str.11 to [42 x i8]*), i64 0, i64 0)) #46
  unreachable

if.end.i.i.i.i31.i.i:                             ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i.i
  store i64 %47, i64 addrspace(5)* %__dnew.i.i.i.i9.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i30.i.i = icmp ugt i64 %47, 15
  br i1 %cmp3.i.i.i.i30.i.i, label %if.else.i.i.i.i.i.i44.i.i.thread, label %if.end6.i.i.i.i41.i.i

if.else.i.i.i.i.i.i44.i.i.thread:                 ; preds = %if.end.i.i.i.i31.i.i
  %call5.i.i.i.i32.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %43, i64* dereferenceable(8) %49, i64 0) #43
  %_M_p.i8.i.i.i.i33.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %m_name.i.i, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i32.i.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i33.i.i, align 8, !tbaa !33
  %51 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i9.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i34.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 2, i32 2, i32 0
  store i64 %51, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i34.i.i, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i45.i.i

if.end6.i.i.i.i41.i.i:                            ; preds = %if.end.i.i.i.i31.i.i
  %_M_p.i.i.i.i.i36.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %m_name.i.i, i32 0, i32 0, i32 0
  switch i64 %47, label %if.end.i.i.i.i.i.i.i45.i.i [
    i64 1, label %if.then.i.i.i.i.i.i42.i.i
    i64 0, label %_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i
  ]

if.then.i.i.i.i.i.i42.i.i:                        ; preds = %if.end6.i.i.i.i41.i.i
  %52 = load i8, i8* %46, align 1, !tbaa !35
  store i8 %52, i8* %50, align 1, !tbaa !35
  br label %_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i

if.end.i.i.i.i.i.i.i45.i.i:                       ; preds = %if.end6.i.i.i.i41.i.i, %if.else.i.i.i.i.i.i44.i.i.thread
  %_M_p.i.i.i.i.i36.i.i12141216 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i33.i.i, %if.else.i.i.i.i.i.i44.i.i.thread ], [ %_M_p.i.i.i.i.i36.i.i, %if.end6.i.i.i.i41.i.i ]
  %53 = phi i8* [ %call5.i.i.i.i32.i.i, %if.else.i.i.i.i.i.i44.i.i.thread ], [ %50, %if.end6.i.i.i.i41.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %46, i64 %47, i1 false) #47
  br label %_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i

_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i: ; preds = %if.end.i.i.i.i.i.i.i45.i.i, %if.then.i.i.i.i.i.i42.i.i, %if.end6.i.i.i.i41.i.i
  %_M_p.i.i.i.i.i36.i.i1213 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i36.i.i, %if.then.i.i.i.i.i.i42.i.i ], [ %_M_p.i.i.i.i.i36.i.i12141216, %if.end.i.i.i.i.i.i.i45.i.i ], [ %_M_p.i.i.i.i.i36.i.i, %if.end6.i.i.i.i41.i.i ]
  %54 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i9.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i47.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 2, i32 1
  store i64 %54, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i47.i.i, align 8, !tbaa !36
  %55 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i36.i.i1213, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i49.i.i = getelementptr inbounds i8, i8* %55, i64 %54
  store i8 0, i8* %arrayidx.i.i.i.i.i49.i.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %48)
  %m_kernel_source.i.i = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 3
  %56 = bitcast i8* addrspace(5)* %m_kernel_source.i.i to i64 addrspace(5)*
  store i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64), i64 addrspace(5)* %56, align 8, !tbaa !39
  %57 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i38.i1199, align 8, !tbaa !33
  %58 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp3.i, i32 0, i32 2
  %arraydecay.i.i.i.i61.i = bitcast %union.anon addrspace(5)* %58 to i8 addrspace(5)*
  %59 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i61.i to i8*
  %cmp.i.i.i62.i = icmp eq i8* %57, %59
  br i1 %cmp.i.i.i62.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68.i, label %if.then.i.i67.i

if.then.i.i67.i:                                  ; preds = %_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i
  call void @_ZdlPv(i8* %57) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68.i: ; preds = %if.then.i.i67.i, %_ZN6Kalmar5CLAMP14PlatformDetectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_Pv.exit.i
  %60 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.i1192, align 8, !tbaa !33
  %61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp.i, i32 0, i32 2
  %arraydecay.i.i.i.i.i = bitcast %union.anon addrspace(5)* %61 to i8 addrspace(5)*
  %62 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i.i to i8*
  %cmp.i.i.i.i = icmp eq i8* %60, %62
  br i1 %cmp.i.i.i.i, label %_ZN6Kalmar5CLAMP17HSAPlatformDetectC2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68.i
  call void @_ZdlPv(i8* %60) #45
  br label %_ZN6Kalmar5CLAMP17HSAPlatformDetectC2Ev.exit

_ZN6Kalmar5CLAMP17HSAPlatformDetectC2Ev.exit:     ; preds = %if.then.i.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68.i
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN6Kalmar5CLAMP17HSAPlatformDetectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** addrspace(5)* %29, align 8, !tbaa !37
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %5)
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %6)
  %call = call i8* @getenv(i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.2 to [12 x i8]*), i64 0, i64 0)) #45
  %cmp1 = icmp eq i8* %call, null
  br i1 %cmp1, label %if.end6, label %if.then2

if.then2:                                         ; preds = %_ZN6Kalmar5CLAMP17HSAPlatformDetectC2Ev.exit
  %63 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 2
  %.cast.i.i = ptrtoint %union.anon* %63 to i64
  %64 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp to i64 addrspace(5)*
  store i64 %.cast.i.i, i64 addrspace(5)* %64, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*), i8* null), label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.then2
  %call.i.i = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*)) #45
  %add.ptr.i1280 = getelementptr inbounds [3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 %call.i.i
  %add.ptr.i = addrspacecast i8 addrspace(4)* %add.ptr.i1280 to i8*
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.then2
  %cond.i = phi i8* [ %add.ptr.i, %cond.true.i ], [ inttoptr (i64 -1 to i8*), %if.then2 ]
  %65 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %65)
  %66 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i to i64*
  %cmp.i.i.i.i49 = icmp eq i8* %cond.i, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*)
  %or.cond1271 = or i1 %cmp.i.i.i.i49, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1271, label %if.end.i.i.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %cond.end.i
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i:                                   ; preds = %cond.end.i
  %sub.ptr.lhs.cast.i.i.i.i.i.i50 = ptrtoint i8* %cond.i to i64
  %sub.ptr.sub.i.i.i.i.i.i51 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i50, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i51, i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i51, 15
  br i1 %cmp3.i.i.i.i, label %if.else.i.i.i.i.i.i.thread, label %if.end6.i.i.i.i

if.else.i.i.i.i.i.i.thread:                       ; preds = %if.end.i.i.i.i
  %call5.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %1, i64* dereferenceable(8) %66, i64 0) #43
  %_M_p.i8.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i, align 8, !tbaa !33
  %67 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp, i32 0, i32 2, i32 0
  store i64 %67, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i

if.end6.i.i.i.i:                                  ; preds = %if.end.i.i.i.i
  %_M_p.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp, i32 0, i32 0, i32 0
  %68 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i52, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i51, label %if.end.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i54
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  ]

if.then.i.i.i.i.i.i54:                            ; preds = %if.end6.i.i.i.i
  %69 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %69, i8* %68, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

if.end.i.i.i.i.i.i.i:                             ; preds = %if.end6.i.i.i.i, %if.else.i.i.i.i.i.i.thread
  %_M_p.i.i.i.i.i5212211223 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i, %if.else.i.i.i.i.i.i.thread ], [ %_M_p.i.i.i.i.i52, %if.end6.i.i.i.i ]
  %70 = phi i8* [ %call5.i.i.i.i, %if.else.i.i.i.i.i.i.thread ], [ %68, %if.end6.i.i.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([3 x i8], [3 x i8] addrspace(4)* @.str.3, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i51, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit: ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i54, %if.end6.i.i.i.i
  %_M_p.i.i.i.i.i521220 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i52, %if.then.i.i.i.i.i.i54 ], [ %_M_p.i.i.i.i.i5212211223, %if.end.i.i.i.i.i.i.i ], [ %_M_p.i.i.i.i.i52, %if.end6.i.i.i.i ]
  %71 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp, i32 0, i32 1
  store i64 %71, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !36
  %72 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i521220, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %72, i64 %71
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %65)
  %call.i = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %1, i8* nonnull %call) #43
  %cmp.i = icmp eq i32 %call.i, 0
  %73 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i521220, align 8, !tbaa !33
  %74 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp, i32 0, i32 2
  %arraydecay.i.i.i.i58 = bitcast %union.anon addrspace(5)* %74 to i8 addrspace(5)*
  %75 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i58 to i8*
  %cmp.i.i.i = icmp eq i8* %73, %75
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  call void @_ZdlPv(i8* %73) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  br i1 %cmp.i, label %if.then5, label %if.end6

if.then5:                                         ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  store i8 1, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL14mcwamp_verboseE, align 1, !tbaa !41
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, %_ZN6Kalmar5CLAMP17HSAPlatformDetectC2Ev.exit
  %call7 = call i8* @getenv(i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.4 to [12 x i8]*), i64 0, i64 0)) #45
  %cmp8 = icmp eq i8* %call7, null
  br i1 %cmp8, label %if.end33, label %if.then9

if.then9:                                         ; preds = %if.end6
  %76 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 2
  %.cast.i.i75 = ptrtoint %union.anon* %76 to i64
  %77 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10 to i64 addrspace(5)*
  store i64 %.cast.i.i75, i64 addrspace(5)* %77, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i8* null), label %cond.end.i80, label %cond.true.i78

cond.true.i78:                                    ; preds = %if.then9
  %call.i.i76 = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*)) #45
  %add.ptr.i771281 = getelementptr inbounds [4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 %call.i.i76
  %add.ptr.i77 = addrspacecast i8 addrspace(4)* %add.ptr.i771281 to i8*
  br label %cond.end.i80

cond.end.i80:                                     ; preds = %cond.true.i78, %if.then9
  %cond.i79 = phi i8* [ %add.ptr.i77, %cond.true.i78 ], [ inttoptr (i64 -1 to i8*), %if.then9 ]
  %78 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i67 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %78)
  %79 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i67 to i64*
  %cmp.i.i.i.i81 = icmp eq i8* %cond.i79, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*)
  %or.cond1272 = or i1 %cmp.i.i.i.i81, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1272, label %if.end.i.i.i.i88, label %if.then.i.i.i.i83

if.then.i.i.i.i83:                                ; preds = %cond.end.i80
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i88:                                 ; preds = %cond.end.i80
  %sub.ptr.lhs.cast.i.i.i.i.i.i85 = ptrtoint i8* %cond.i79 to i64
  %sub.ptr.sub.i.i.i.i.i.i86 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i85, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i86, i64 addrspace(5)* %__dnew.i.i.i.i67, align 8, !tbaa !31
  %cmp3.i.i.i.i87 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i86, 15
  br i1 %cmp3.i.i.i.i87, label %if.else.i.i.i.i.i.i101.thread, label %if.end6.i.i.i.i98

if.else.i.i.i.i.i.i101.thread:                    ; preds = %if.end.i.i.i.i88
  %call5.i.i.i.i89 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %2, i64* dereferenceable(8) %79, i64 0) #43
  %_M_p.i8.i.i.i.i90 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i89, i8* addrspace(5)* %_M_p.i8.i.i.i.i90, align 8, !tbaa !33
  %80 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i67, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i91 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10, i32 0, i32 2, i32 0
  store i64 %80, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i91, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i102

if.end6.i.i.i.i98:                                ; preds = %if.end.i.i.i.i88
  %_M_p.i.i.i.i.i93 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10, i32 0, i32 0, i32 0
  %81 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i93, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i86, label %if.end.i.i.i.i.i.i.i102 [
    i64 1, label %if.then.i.i.i.i.i.i99
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107
  ]

if.then.i.i.i.i.i.i99:                            ; preds = %if.end6.i.i.i.i98
  %82 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %82, i8* %81, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107

if.end.i.i.i.i.i.i.i102:                          ; preds = %if.end6.i.i.i.i98, %if.else.i.i.i.i.i.i101.thread
  %_M_p.i.i.i.i.i9312281230 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i90, %if.else.i.i.i.i.i.i101.thread ], [ %_M_p.i.i.i.i.i93, %if.end6.i.i.i.i98 ]
  %83 = phi i8* [ %call5.i.i.i.i89, %if.else.i.i.i.i.i.i101.thread ], [ %81, %if.end6.i.i.i.i98 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.5, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i86, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107: ; preds = %if.end.i.i.i.i.i.i.i102, %if.then.i.i.i.i.i.i99, %if.end6.i.i.i.i98
  %_M_p.i.i.i.i.i931227 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i93, %if.then.i.i.i.i.i.i99 ], [ %_M_p.i.i.i.i.i9312281230, %if.end.i.i.i.i.i.i.i102 ], [ %_M_p.i.i.i.i.i93, %if.end6.i.i.i.i98 ]
  %84 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i67, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i104 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10, i32 0, i32 1
  store i64 %84, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i104, align 8, !tbaa !36
  %85 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i931227, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i106 = getelementptr inbounds i8, i8* %85, i64 %84
  store i8 0, i8* %arrayidx.i.i.i.i.i106, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %78)
  %call.i108 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %2, i8* nonnull %call7) #43
  %cmp.i109 = icmp eq i32 %call.i108, 0
  %86 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i931227, align 8, !tbaa !33
  %87 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp10, i32 0, i32 2
  %arraydecay.i.i.i.i111 = bitcast %union.anon addrspace(5)* %87 to i8 addrspace(5)*
  %88 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i111 to i8*
  %cmp.i.i.i112 = icmp eq i8* %86, %88
  br i1 %cmp.i.i.i112, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit118, label %if.then.i.i117

if.then.i.i117:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107
  call void @_ZdlPv(i8* %86) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit118

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit118: ; preds = %if.then.i.i117, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit107
  br i1 %cmp.i109, label %if.then13, label %if.else21

if.then13:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit118
  %89 = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect"* %0, i64 0, i32 0
  %call14 = call zeroext i1 @_ZN6Kalmar5CLAMP14PlatformDetect6detectEv(%"class.Kalmar::CLAMP::PlatformDetect"* %89) #43
  br i1 %call14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.then13
  %90 = load i8, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL14mcwamp_verboseE, align 1, !tbaa !41, !range !43
  %tobool.i = icmp eq i8 %90, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then15
  br i1 icmp eq (i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i132, label %if.else.i.i

if.then.i.i132:                                   ; preds = %if.then.i
  %vtable.i.i = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i = getelementptr i8, i8* %vtable.i.i, i64 -24
  %91 = bitcast i8* %vbase.offset.ptr.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %91, align 8
  %add.ptr.i.i131 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*), i64 %vbase.offset.i.i
  %92 = bitcast i8 addrspace(1)* %add.ptr.i.i131 to %"class.std::basic_ios" addrspace(1)*
  %93 = addrspacecast %"class.std::basic_ios" addrspace(1)* %92 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i.i131, i64 32
  %94 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i to i32 addrspace(1)*
  %95 = load i32, i32 addrspace(1)* %94, align 8, !tbaa !44
  %or.i.i.i.i = or i32 %95, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %93, i32 %or.i.i.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i

if.else.i.i:                                      ; preds = %if.then.i
  %call.i.i.i133 = call i64 @strlen(i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0)) #45
  %call1.i.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0), i64 %call.i.i.i133) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i: ; preds = %if.else.i.i, %if.then.i.i132
  %vtable.i8.i = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i9.i = getelementptr i8, i8* %vtable.i8.i, i64 -24
  %96 = bitcast i8* %vbase.offset.ptr.i9.i to i64*
  %vbase.offset.i10.i = load i64, i64* %96, align 8
  %add.ptr.i11.i = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i10.i
  %_M_ctype.i849 = getelementptr inbounds i8, i8* %add.ptr.i11.i, i64 240
  %97 = bitcast i8* %_M_ctype.i849 to %"class.std::ctype"**
  %98 = load %"class.std::ctype"*, %"class.std::ctype"** %97, align 8, !tbaa !50
  %tobool.i1030 = icmp eq %"class.std::ctype"* %98, null
  br i1 %tobool.i1030, label %if.then.i1031, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1033

if.then.i1031:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1033: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i
  %_M_widen_ok.i853 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %98, i64 0, i32 8
  %99 = load i8, i8* %_M_widen_ok.i853, align 8, !tbaa !52
  %tobool.i854 = icmp eq i8 %99, 0
  br i1 %tobool.i854, label %if.end.i860, label %if.then.i856

if.then.i856:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1033
  %arrayidx.i855 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %98, i64 0, i32 9, i64 10
  %100 = load i8, i8* %arrayidx.i855, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit862

if.end.i860:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1033
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %98) #43
  %101 = bitcast %"class.std::ctype"* %98 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i857 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %101, align 8, !tbaa !37
  %vfn.i858 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i857, i64 6
  %102 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i858, align 8
  %call.i859 = call signext i8 %102(%"class.std::ctype"* nonnull %98, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit862

_ZNKSt5ctypeIcE5widenEc.exit862:                  ; preds = %if.end.i860, %if.then.i856
  %storemerge.i861 = phi i8 [ %call.i859, %if.end.i860 ], [ %100, %if.then.i856 ]
  %call1.i13.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8 signext %storemerge.i861) #43
  %call.i.i134 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i13.i) #43
  br label %if.end.i

if.end.i:                                         ; preds = %_ZNKSt5ctypeIcE5widenEc.exit862, %if.then15
  %call2.i = call i8* @_Znwm(i64 72) #48
  %m_ImplName.i.i = bitcast i8* %call2.i to %"class.std::__cxx11::basic_string"*
  %103 = getelementptr inbounds i8, i8* %call2.i, i64 16
  %.cast.i.i.i.i138 = ptrtoint i8* %103 to i64
  %104 = bitcast i8* %call2.i to i64*
  store i64 %.cast.i.i.i.i138, i64* %104, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null), label %cond.end.i.i.i, label %cond.true.i.i.i

cond.true.i.i.i:                                  ; preds = %if.end.i
  %call.i.i.i.i = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)) #45
  %add.ptr.i.i.i1391286 = getelementptr inbounds [17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 %call.i.i.i.i
  %add.ptr.i.i.i139 = addrspacecast i8 addrspace(4)* %add.ptr.i.i.i1391286 to i8*
  br label %cond.end.i.i.i

cond.end.i.i.i:                                   ; preds = %cond.true.i.i.i, %if.end.i
  %cond.i.i.i = phi i8* [ %add.ptr.i.i.i139, %cond.true.i.i.i ], [ inttoptr (i64 -1 to i8*), %if.end.i ]
  %105 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i126 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %105)
  %106 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i126 to i64*
  %cmp.i.i.i.i.i.i140 = icmp eq i8* %cond.i.i.i, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)
  %or.cond1273 = or i1 %cmp.i.i.i.i.i.i140, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1273, label %if.end.i.i.i.i.i.i147, label %if.then.i.i.i.i.i.i142

if.then.i.i.i.i.i.i142:                           ; preds = %cond.end.i.i.i
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i.i147:                            ; preds = %cond.end.i.i.i
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i144 = ptrtoint i8* %cond.i.i.i to i64
  %sub.ptr.sub.i.i.i.i.i.i.i.i145 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i144, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i.i.i145, i64 addrspace(5)* %__dnew.i.i.i.i.i.i126, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i146 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i.i.i145, 15
  br i1 %cmp3.i.i.i.i.i.i146, label %if.else.i.i.i.i.i.i.i.i160.thread, label %if.end6.i.i.i.i.i.i157

if.else.i.i.i.i.i.i.i.i160.thread:                ; preds = %if.end.i.i.i.i.i.i147
  %107 = bitcast i8* %103 to i64*
  %_M_p.i8.i.i.i.i.i.i149 = bitcast i8* %call2.i to i8**
  %call5.i.i.i.i.i.i148 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %m_ImplName.i.i, i64* dereferenceable(8) %106, i64 0) #43
  store i8* %call5.i.i.i.i.i.i148, i8** %_M_p.i8.i.i.i.i.i.i149, align 8, !tbaa !33
  %108 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i126, align 8, !tbaa !31
  store i64 %108, i64* %107, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i.i161

if.end6.i.i.i.i.i.i157:                           ; preds = %if.end.i.i.i.i.i.i147
  %_M_p.i.i.i.i.i.i.i152 = bitcast i8* %call2.i to i8**
  %109 = load i8*, i8** %_M_p.i.i.i.i.i.i.i152, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i.i.i145, label %if.end.i.i.i.i.i.i.i.i.i161 [
    i64 1, label %if.then.i.i.i.i.i.i.i.i158
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i
  ]

if.then.i.i.i.i.i.i.i.i158:                       ; preds = %if.end6.i.i.i.i.i.i157
  %110 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %110, i8* %109, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i

if.end.i.i.i.i.i.i.i.i.i161:                      ; preds = %if.end6.i.i.i.i.i.i157, %if.else.i.i.i.i.i.i.i.i160.thread
  %_M_p.i.i.i.i.i.i.i15212351237 = phi i8** [ %_M_p.i8.i.i.i.i.i.i149, %if.else.i.i.i.i.i.i.i.i160.thread ], [ %_M_p.i.i.i.i.i.i.i152, %if.end6.i.i.i.i.i.i157 ]
  %111 = phi i8* [ %call5.i.i.i.i.i.i148, %if.else.i.i.i.i.i.i.i.i160.thread ], [ %109, %if.end6.i.i.i.i.i.i157 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i.i.i145, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i: ; preds = %if.end.i.i.i.i.i.i.i.i.i161, %if.then.i.i.i.i.i.i.i.i158, %if.end6.i.i.i.i.i.i157
  %_M_p.i.i.i.i.i.i.i1521234 = phi i8** [ %_M_p.i.i.i.i.i.i.i152, %if.then.i.i.i.i.i.i.i.i158 ], [ %_M_p.i.i.i.i.i.i.i15212351237, %if.end.i.i.i.i.i.i.i.i.i161 ], [ %_M_p.i.i.i.i.i.i.i152, %if.end6.i.i.i.i.i.i157 ]
  %112 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i126, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i.i163 = getelementptr inbounds i8, i8* %call2.i, i64 8
  %113 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i163 to i64*
  store i64 %112, i64* %113, align 8, !tbaa !36
  %114 = load i8*, i8** %_M_p.i.i.i.i.i.i.i1521234, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i.i165 = getelementptr inbounds i8, i8* %114, i64 %112
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i165, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %105)
  %m_RuntimeHandle.i.i = getelementptr inbounds i8, i8* %call2.i, i64 32
  %115 = bitcast i8* %m_RuntimeHandle.i.i to i8**
  store i8* null, i8** %115, align 8, !tbaa !54
  %m_PushArgImpl.i.i = getelementptr inbounds i8, i8* %call2.i, i64 40
  %116 = bitcast i8* %m_PushArgImpl.i.i to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %116, align 8, !tbaa !56
  %m_PushArgPtrImpl.i.i = getelementptr inbounds i8, i8* %call2.i, i64 48
  %117 = bitcast i8* %m_PushArgPtrImpl.i.i to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %117, align 8, !tbaa !57
  %m_GetContextImpl.i.i = getelementptr inbounds i8, i8* %call2.i, i64 56
  %118 = bitcast i8* %m_GetContextImpl.i.i to i8* ()**
  store i8* ()* null, i8* ()** %118, align 8, !tbaa !58
  %119 = getelementptr inbounds i8, i8* %call2.i, i64 64
  store i8 0, i8* %119, align 8, !tbaa !59
  %call.i14.i = call i8* @dlopen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i32 4097) #45
  store i8* %call.i14.i, i8** %115, align 8, !tbaa !54
  %tobool.i.i = icmp eq i8* %call.i14.i, null
  br i1 %tobool.i.i, label %if.then.i15.i, label %if.end.i.i

if.then.i15.i:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i
  br i1 icmp eq (i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i.i166, label %if.else.i.i.i

if.then.i.i.i166:                                 ; preds = %if.then.i15.i
  %vtable.i.i.i = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i.i = getelementptr i8, i8* %vtable.i.i.i, i64 -24
  %120 = bitcast i8* %vbase.offset.ptr.i.i.i to i64*
  %vbase.offset.i.i.i = load i64, i64* %120, align 8
  %add.ptr.i8.i.i = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i.i.i
  %121 = bitcast i8 addrspace(1)* %add.ptr.i8.i.i to %"class.std::basic_ios" addrspace(1)*
  %122 = addrspacecast %"class.std::basic_ios" addrspace(1)* %121 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i.i = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i8.i.i, i64 32
  %123 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i.i to i32 addrspace(1)*
  %124 = load i32, i32 addrspace(1)* %123, align 8, !tbaa !44
  %or.i.i.i.i.i = or i32 %124, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %122, i32 %or.i.i.i.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i

if.else.i.i.i:                                    ; preds = %if.then.i15.i
  %call.i.i9.i.i = call i64 @strlen(i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0)) #45
  %call1.i.i.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i64 %call.i.i9.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i: ; preds = %if.else.i.i.i, %if.then.i.i.i166
  %call5.i.i = call i8* @dlerror() #45
  %tobool.i11.i.i = icmp eq i8* %call5.i.i, null
  br i1 %tobool.i11.i.i, label %if.then.i18.i.i, label %if.else.i21.i.i

if.then.i18.i.i:                                  ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i
  %vtable.i12.i.i = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i13.i.i = getelementptr i8, i8* %vtable.i12.i.i, i64 -24
  %125 = bitcast i8* %vbase.offset.ptr.i13.i.i to i64*
  %vbase.offset.i14.i.i = load i64, i64* %125, align 8
  %add.ptr.i15.i.i = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i14.i.i
  %126 = bitcast i8* %add.ptr.i15.i.i to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i16.i.i = getelementptr inbounds i8, i8* %add.ptr.i15.i.i, i64 32
  %127 = bitcast i8* %_M_streambuf_state.i.i.i16.i.i to i32*
  %128 = load i32, i32* %127, align 8, !tbaa !44
  %or.i.i.i17.i.i = or i32 %128, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %126, i32 %or.i.i.i17.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i

if.else.i21.i.i:                                  ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i
  %call.i.i19.i.i = call i64 @strlen(i8* nonnull %call5.i.i) #45
  %call1.i20.i.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call5.i.i, i64 %call.i.i19.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i: ; preds = %if.else.i21.i.i, %if.then.i18.i.i
  %vtable.i24.i.i = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i25.i.i = getelementptr i8, i8* %vtable.i24.i.i, i64 -24
  %129 = bitcast i8* %vbase.offset.ptr.i25.i.i to i64*
  %vbase.offset.i26.i.i = load i64, i64* %129, align 8
  %add.ptr.i27.i.i = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i26.i.i
  %_M_ctype.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i27.i.i, i64 240
  %130 = bitcast i8* %_M_ctype.i.i.i to %"class.std::ctype"**
  %131 = load %"class.std::ctype"*, %"class.std::ctype"** %130, align 8, !tbaa !50
  %tobool.i36.i.i = icmp eq %"class.std::ctype"* %131, null
  br i1 %tobool.i36.i.i, label %if.then.i37.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i37.i.i:                                  ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %131, i64 0, i32 8
  %132 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !52
  %tobool.i32.i.i = icmp eq i8 %132, 0
  br i1 %tobool.i32.i.i, label %if.end.i.i.i, label %if.then.i33.i.i

if.then.i33.i.i:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %131, i64 0, i32 9, i64 10
  %133 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %131) #43
  %134 = bitcast %"class.std::ctype"* %131 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i34.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %134, align 8, !tbaa !37
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i34.i.i, i64 6
  %135 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i35.i.i = call signext i8 %135(%"class.std::ctype"* nonnull %131, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i

_ZNKSt5ctypeIcE5widenEc.exit.i.i:                 ; preds = %if.end.i.i.i, %if.then.i33.i.i
  %storemerge.i.i.i = phi i8 [ %call.i35.i.i, %if.end.i.i.i ], [ %133, %if.then.i33.i.i ]
  %call1.i29.i.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i.i.i) #43
  %call.i30.i.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i29.i.i) #43
  br label %_ZN11RuntimeImplC2EPKc.exit.i

if.end.i.i:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i
  %call.i.i16.i = call i8* @dlsym(i8* nonnull %call.i14.i, i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.16 to [12 x i8]*), i64 0, i64 0)) #45
  %136 = bitcast i8* %m_PushArgImpl.i.i to i8**
  store i8* %call.i.i16.i, i8** %136, align 8, !tbaa !56
  %137 = load i8*, i8** %115, align 8, !tbaa !54
  %call3.i.i.i = call i8* @dlsym(i8* %137, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.17 to [15 x i8]*), i64 0, i64 0)) #45
  %138 = bitcast i8* %m_PushArgPtrImpl.i.i to i8**
  store i8* %call3.i.i.i, i8** %138, align 8, !tbaa !57
  %139 = load i8*, i8** %115, align 8, !tbaa !54
  %call5.i.i.i = call i8* @dlsym(i8* %139, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.18 to [15 x i8]*), i64 0, i64 0)) #45
  %140 = bitcast i8* %m_GetContextImpl.i.i to i8**
  store i8* %call5.i.i.i, i8** %140, align 8, !tbaa !58
  br label %_ZN11RuntimeImplC2EPKc.exit.i

_ZN11RuntimeImplC2EPKc.exit.i:                    ; preds = %if.end.i.i, %_ZNKSt5ctypeIcE5widenEc.exit.i.i
  %141 = load i8*, i8** %115, align 8, !tbaa !54
  %tobool3.i = icmp eq i8* %141, null
  br i1 %tobool3.i, label %if.then4.i, label %_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit

if.then4.i:                                       ; preds = %_ZN11RuntimeImplC2EPKc.exit.i
  br i1 icmp eq (i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0), i8* null), label %if.then.i24.i, label %if.else.i27.i

if.then.i24.i:                                    ; preds = %if.then4.i
  %vtable.i18.i = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i19.i = getelementptr i8, i8* %vtable.i18.i, i64 -24
  %142 = bitcast i8* %vbase.offset.ptr.i19.i to i64*
  %vbase.offset.i20.i = load i64, i64* %142, align 8
  %add.ptr.i21.i = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i20.i
  %143 = bitcast i8 addrspace(1)* %add.ptr.i21.i to %"class.std::basic_ios" addrspace(1)*
  %144 = addrspacecast %"class.std::basic_ios" addrspace(1)* %143 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i22.i = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i21.i, i64 32
  %145 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i22.i to i32 addrspace(1)*
  %146 = load i32, i32 addrspace(1)* %145, align 8, !tbaa !44
  %or.i.i.i23.i = or i32 %146, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %144, i32 %or.i.i.i23.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i

if.else.i27.i:                                    ; preds = %if.then4.i
  %call.i.i25.i = call i64 @strlen(i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0)) #45
  %call1.i26.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0), i64 %call.i.i25.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i: ; preds = %if.else.i27.i, %if.then.i24.i
  %vtable.i31.i = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i32.i = getelementptr i8, i8* %vtable.i31.i, i64 -24
  %147 = bitcast i8* %vbase.offset.ptr.i32.i to i64*
  %vbase.offset.i33.i = load i64, i64* %147, align 8
  %add.ptr.i34.i = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i33.i
  %_M_ctype.i863 = getelementptr inbounds i8, i8* %add.ptr.i34.i, i64 240
  %148 = bitcast i8* %_M_ctype.i863 to %"class.std::ctype"**
  %149 = load %"class.std::ctype"*, %"class.std::ctype"** %148, align 8, !tbaa !50
  %tobool.i1034 = icmp eq %"class.std::ctype"* %149, null
  br i1 %tobool.i1034, label %if.then.i1035, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1037

if.then.i1035:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1037: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i
  %_M_widen_ok.i867 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %149, i64 0, i32 8
  %150 = load i8, i8* %_M_widen_ok.i867, align 8, !tbaa !52
  %tobool.i868 = icmp eq i8 %150, 0
  br i1 %tobool.i868, label %if.end.i874, label %if.then.i870

if.then.i870:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1037
  %arrayidx.i869 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %149, i64 0, i32 9, i64 10
  %151 = load i8, i8* %arrayidx.i869, align 1, !tbaa !35
  br label %delete.notnull.i

if.end.i874:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1037
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %149) #43
  %152 = bitcast %"class.std::ctype"* %149 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i871 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %152, align 8, !tbaa !37
  %vfn.i872 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i871, i64 6
  %153 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i872, align 8
  %call.i873 = call signext i8 %153(%"class.std::ctype"* nonnull %149, i8 signext 10) #43
  br label %delete.notnull.i

delete.notnull.i:                                 ; preds = %if.end.i874, %if.then.i870
  %storemerge.i875 = phi i8 [ %call.i873, %if.end.i874 ], [ %151, %if.then.i870 ]
  %call1.i36.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i875) #43
  %call.i37.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i36.i) #43
  %154 = load i8*, i8** %115, align 8, !tbaa !54
  %tobool.i836 = icmp eq i8* %154, null
  br i1 %tobool.i836, label %if.end.i842, label %if.then.i838

if.then.i838:                                     ; preds = %delete.notnull.i
  %call.i837 = call i32 @dlclose(i8* nonnull %154) #45
  br label %if.end.i842

if.end.i842:                                      ; preds = %if.then.i838, %delete.notnull.i
  %155 = load i8*, i8** %_M_p.i.i.i.i.i.i.i1521234, align 8, !tbaa !33
  %cmp.i.i.i.i841 = icmp eq i8* %155, %103
  br i1 %cmp.i.i.i.i841, label %delete.end.i, label %if.then.i.i.i847

if.then.i.i.i847:                                 ; preds = %if.end.i842
  call void @_ZdlPv(i8* %155) #45
  br label %delete.end.i

delete.end.i:                                     ; preds = %if.then.i.i.i847, %if.end.i842
  call void @_ZdlPv(i8* nonnull %call2.i) #49
  call void @exit(i32 -1) #50
  unreachable

_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit:         ; preds = %_ZN11RuntimeImplC2EPKc.exit.i
  store i8* %call2.i, i8* addrspace(1)* bitcast (%struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl to i8* addrspace(1)*), align 8, !tbaa !27
  br label %if.end44

if.else:                                          ; preds = %if.then13
  br i1 icmp eq (i8* getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.6 to [54 x i8]*), i64 0, i64 0), i8* null), label %if.then.i168, label %if.else.i

if.then.i168:                                     ; preds = %if.else
  %vtable.i = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %156 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %156, align 8
  %add.ptr.i167 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i
  %157 = bitcast i8 addrspace(1)* %add.ptr.i167 to %"class.std::basic_ios" addrspace(1)*
  %158 = addrspacecast %"class.std::basic_ios" addrspace(1)* %157 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i167, i64 32
  %159 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i to i32 addrspace(1)*
  %160 = load i32, i32 addrspace(1)* %159, align 8, !tbaa !44
  %or.i.i.i = or i32 %160, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %158, i32 %or.i.i.i) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit184

if.else.i:                                        ; preds = %if.else
  %call.i.i169 = call i64 @strlen(i8* getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.6 to [54 x i8]*), i64 0, i64 0)) #45
  %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.6 to [54 x i8]*), i64 0, i64 0), i64 %call.i.i169) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit184

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit184: ; preds = %if.else.i, %if.then.i168
  %call.i.i180 = call i64 @strlen(i8* nonnull %call7) #45
  %call1.i181 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call7, i64 %call.i.i180) #43
  %vtable.i186 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i187 = getelementptr i8, i8* %vtable.i186, i64 -24
  %161 = bitcast i8* %vbase.offset.ptr.i187 to i64*
  %vbase.offset.i188 = load i64, i64* %161, align 8
  %add.ptr.i189 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i188
  %_M_ctype.i877 = getelementptr inbounds i8, i8* %add.ptr.i189, i64 240
  %162 = bitcast i8* %_M_ctype.i877 to %"class.std::ctype"**
  %163 = load %"class.std::ctype"*, %"class.std::ctype"** %162, align 8, !tbaa !50
  %tobool.i1038 = icmp eq %"class.std::ctype"* %163, null
  br i1 %tobool.i1038, label %if.then.i1039, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1041

if.then.i1039:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit184
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1041: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit184
  %_M_widen_ok.i881 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %163, i64 0, i32 8
  %164 = load i8, i8* %_M_widen_ok.i881, align 8, !tbaa !52
  %tobool.i882 = icmp eq i8 %164, 0
  br i1 %tobool.i882, label %if.end.i888, label %if.then.i884

if.then.i884:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1041
  %arrayidx.i883 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %163, i64 0, i32 9, i64 10
  %165 = load i8, i8* %arrayidx.i883, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit890

if.end.i888:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1041
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %163) #43
  %166 = bitcast %"class.std::ctype"* %163 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i885 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %166, align 8, !tbaa !37
  %vfn.i886 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i885, i64 6
  %167 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i886, align 8
  %call.i887 = call signext i8 %167(%"class.std::ctype"* nonnull %163, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit890

_ZNKSt5ctypeIcE5widenEc.exit890:                  ; preds = %if.end.i888, %if.then.i884
  %storemerge.i889 = phi i8 [ %call.i887, %if.end.i888 ], [ %165, %if.then.i884 ]
  %call1.i191 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i889) #43
  %call.i193 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i191) #43
  br label %if.end33

if.else21:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit118
  %168 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2
  %.cast.i.i209 = ptrtoint %union.anon* %168 to i64
  %169 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22 to i64 addrspace(5)*
  store i64 %.cast.i.i209, i64 addrspace(5)* %169, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*), i8* null), label %cond.end.i214, label %cond.true.i212

cond.true.i212:                                   ; preds = %if.else21
  %call.i.i210 = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*)) #45
  %add.ptr.i2111282 = getelementptr inbounds [4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 %call.i.i210
  %add.ptr.i211 = addrspacecast i8 addrspace(4)* %add.ptr.i2111282 to i8*
  br label %cond.end.i214

cond.end.i214:                                    ; preds = %cond.true.i212, %if.else21
  %cond.i213 = phi i8* [ %add.ptr.i211, %cond.true.i212 ], [ inttoptr (i64 -1 to i8*), %if.else21 ]
  %170 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i201 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %170)
  %171 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i201 to i64*
  %cmp.i.i.i.i215 = icmp eq i8* %cond.i213, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*)
  %or.cond1274 = or i1 %cmp.i.i.i.i215, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1274, label %if.end.i.i.i.i222, label %if.then.i.i.i.i217

if.then.i.i.i.i217:                               ; preds = %cond.end.i214
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i222:                                ; preds = %cond.end.i214
  %sub.ptr.lhs.cast.i.i.i.i.i.i219 = ptrtoint i8* %cond.i213 to i64
  %sub.ptr.sub.i.i.i.i.i.i220 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i219, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i220, i64 addrspace(5)* %__dnew.i.i.i.i201, align 8, !tbaa !31
  %cmp3.i.i.i.i221 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i220, 15
  br i1 %cmp3.i.i.i.i221, label %if.else.i.i.i.i.i.i235.thread, label %if.end6.i.i.i.i232

if.else.i.i.i.i.i.i235.thread:                    ; preds = %if.end.i.i.i.i222
  %call5.i.i.i.i223 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %3, i64* dereferenceable(8) %171, i64 0) #43
  %_M_p.i8.i.i.i.i224 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i223, i8* addrspace(5)* %_M_p.i8.i.i.i.i224, align 8, !tbaa !33
  %172 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i201, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i225 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22, i32 0, i32 2, i32 0
  store i64 %172, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i225, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i236

if.end6.i.i.i.i232:                               ; preds = %if.end.i.i.i.i222
  %_M_p.i.i.i.i.i227 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22, i32 0, i32 0, i32 0
  %173 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i227, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i220, label %if.end.i.i.i.i.i.i.i236 [
    i64 1, label %if.then.i.i.i.i.i.i233
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241
  ]

if.then.i.i.i.i.i.i233:                           ; preds = %if.end6.i.i.i.i232
  %174 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %174, i8* %173, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241

if.end.i.i.i.i.i.i.i236:                          ; preds = %if.end6.i.i.i.i232, %if.else.i.i.i.i.i.i235.thread
  %_M_p.i.i.i.i.i22712421244 = phi i8* addrspace(5)* [ %_M_p.i8.i.i.i.i224, %if.else.i.i.i.i.i.i235.thread ], [ %_M_p.i.i.i.i.i227, %if.end6.i.i.i.i232 ]
  %175 = phi i8* [ %call5.i.i.i.i223, %if.else.i.i.i.i.i.i235.thread ], [ %173, %if.end6.i.i.i.i232 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %175, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([4 x i8], [4 x i8] addrspace(4)* @.str.7, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i220, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241: ; preds = %if.end.i.i.i.i.i.i.i236, %if.then.i.i.i.i.i.i233, %if.end6.i.i.i.i232
  %_M_p.i.i.i.i.i2271241 = phi i8* addrspace(5)* [ %_M_p.i.i.i.i.i227, %if.then.i.i.i.i.i.i233 ], [ %_M_p.i.i.i.i.i22712421244, %if.end.i.i.i.i.i.i.i236 ], [ %_M_p.i.i.i.i.i227, %if.end6.i.i.i.i232 ]
  %176 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i201, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i238 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22, i32 0, i32 1
  store i64 %176, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i238, align 8, !tbaa !36
  %177 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i2271241, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i240 = getelementptr inbounds i8, i8* %177, i64 %176
  store i8 0, i8* %arrayidx.i.i.i.i.i240, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %170)
  %call.i242 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull %3, i8* nonnull %call7) #43
  %cmp.i243 = icmp eq i32 %call.i242, 0
  %178 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i2271241, align 8, !tbaa !33
  %179 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %ref.tmp22, i32 0, i32 2
  %arraydecay.i.i.i.i245 = bitcast %union.anon addrspace(5)* %179 to i8 addrspace(5)*
  %180 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i245 to i8*
  %cmp.i.i.i246 = icmp eq i8* %178, %180
  br i1 %cmp.i.i.i246, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit252, label %if.then.i.i251

if.then.i.i251:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241
  call void @_ZdlPv(i8* %178) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit252

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit252: ; preds = %if.then.i.i251, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit241
  br i1 %cmp.i243, label %if.then25, label %if.else27

if.then25:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit252
  %181 = load i8, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL14mcwamp_verboseE, align 1, !tbaa !41, !range !43
  %tobool.i273 = icmp eq i8 %181, 0
  br i1 %tobool.i273, label %if.end.i299, label %if.then.i274

if.then.i274:                                     ; preds = %if.then25
  br i1 icmp eq (i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i281, label %if.else.i.i284

if.then.i.i281:                                   ; preds = %if.then.i274
  %vtable.i.i275 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i276 = getelementptr i8, i8* %vtable.i.i275, i64 -24
  %182 = bitcast i8* %vbase.offset.ptr.i.i276 to i64*
  %vbase.offset.i.i277 = load i64, i64* %182, align 8
  %add.ptr.i.i278 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*), i64 %vbase.offset.i.i277
  %183 = bitcast i8 addrspace(1)* %add.ptr.i.i278 to %"class.std::basic_ios" addrspace(1)*
  %184 = addrspacecast %"class.std::basic_ios" addrspace(1)* %183 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i279 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i.i278, i64 32
  %185 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i279 to i32 addrspace(1)*
  %186 = load i32, i32 addrspace(1)* %185, align 8, !tbaa !44
  %or.i.i.i.i280 = or i32 %186, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %184, i32 %or.i.i.i.i280) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i292

if.else.i.i284:                                   ; preds = %if.then.i274
  %call.i.i.i282 = call i64 @strlen(i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0)) #45
  %call1.i.i283 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0), i64 %call.i.i.i282) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i292

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i292: ; preds = %if.else.i.i284, %if.then.i.i281
  %vtable.i8.i285 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i9.i286 = getelementptr i8, i8* %vtable.i8.i285, i64 -24
  %187 = bitcast i8* %vbase.offset.ptr.i9.i286 to i64*
  %vbase.offset.i10.i287 = load i64, i64* %187, align 8
  %add.ptr.i11.i288 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i10.i287
  %_M_ctype.i907 = getelementptr inbounds i8, i8* %add.ptr.i11.i288, i64 240
  %188 = bitcast i8* %_M_ctype.i907 to %"class.std::ctype"**
  %189 = load %"class.std::ctype"*, %"class.std::ctype"** %188, align 8, !tbaa !50
  %tobool.i1042 = icmp eq %"class.std::ctype"* %189, null
  br i1 %tobool.i1042, label %if.then.i1043, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1045

if.then.i1043:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i292
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1045: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i292
  %_M_widen_ok.i911 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %189, i64 0, i32 8
  %190 = load i8, i8* %_M_widen_ok.i911, align 8, !tbaa !52
  %tobool.i912 = icmp eq i8 %190, 0
  br i1 %tobool.i912, label %if.end.i918, label %if.then.i914

if.then.i914:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1045
  %arrayidx.i913 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %189, i64 0, i32 9, i64 10
  %191 = load i8, i8* %arrayidx.i913, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit920

if.end.i918:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1045
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %189) #43
  %192 = bitcast %"class.std::ctype"* %189 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i915 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %192, align 8, !tbaa !37
  %vfn.i916 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i915, i64 6
  %193 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i916, align 8
  %call.i917 = call signext i8 %193(%"class.std::ctype"* nonnull %189, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit920

_ZNKSt5ctypeIcE5widenEc.exit920:                  ; preds = %if.end.i918, %if.then.i914
  %storemerge.i919 = phi i8 [ %call.i917, %if.end.i918 ], [ %191, %if.then.i914 ]
  %call1.i13.i290 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8 signext %storemerge.i919) #43
  %call.i.i291 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i13.i290) #43
  br label %if.end.i299

if.end.i299:                                      ; preds = %_ZNKSt5ctypeIcE5widenEc.exit920, %if.then25
  %call2.i293 = call i8* @_Znwm(i64 72) #48
  %m_ImplName.i.i294 = bitcast i8* %call2.i293 to %"class.std::__cxx11::basic_string"*
  %194 = getelementptr inbounds i8, i8* %call2.i293, i64 16
  %.cast.i.i.i.i298 = ptrtoint i8* %194 to i64
  %195 = bitcast i8* %call2.i293 to i64*
  store i64 %.cast.i.i.i.i298, i64* %195, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i8* null), label %cond.end.i.i.i304, label %cond.true.i.i.i302

cond.true.i.i.i302:                               ; preds = %if.end.i299
  %call.i.i.i.i300 = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*)) #45
  %add.ptr.i.i.i3011285 = getelementptr inbounds [17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 %call.i.i.i.i300
  %add.ptr.i.i.i301 = addrspacecast i8 addrspace(4)* %add.ptr.i.i.i3011285 to i8*
  br label %cond.end.i.i.i304

cond.end.i.i.i304:                                ; preds = %cond.true.i.i.i302, %if.end.i299
  %cond.i.i.i303 = phi i8* [ %add.ptr.i.i.i301, %cond.true.i.i.i302 ], [ inttoptr (i64 -1 to i8*), %if.end.i299 ]
  %196 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i264 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %196)
  %197 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i264 to i64*
  %cmp.i.i.i.i.i.i305 = icmp eq i8* %cond.i.i.i303, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*)
  %or.cond1275 = or i1 %cmp.i.i.i.i.i.i305, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1275, label %if.end.i.i.i.i.i.i312, label %if.then.i.i.i.i.i.i307

if.then.i.i.i.i.i.i307:                           ; preds = %cond.end.i.i.i304
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i.i312:                            ; preds = %cond.end.i.i.i304
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i309 = ptrtoint i8* %cond.i.i.i303 to i64
  %sub.ptr.sub.i.i.i.i.i.i.i.i310 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i309, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i.i.i310, i64 addrspace(5)* %__dnew.i.i.i.i.i.i264, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i311 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i.i.i310, 15
  br i1 %cmp3.i.i.i.i.i.i311, label %if.else.i.i.i.i.i.i.i.i325.thread, label %if.end6.i.i.i.i.i.i322

if.else.i.i.i.i.i.i.i.i325.thread:                ; preds = %if.end.i.i.i.i.i.i312
  %198 = bitcast i8* %194 to i64*
  %_M_p.i8.i.i.i.i.i.i314 = bitcast i8* %call2.i293 to i8**
  %call5.i.i.i.i.i.i313 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %m_ImplName.i.i294, i64* dereferenceable(8) %197, i64 0) #43
  store i8* %call5.i.i.i.i.i.i313, i8** %_M_p.i8.i.i.i.i.i.i314, align 8, !tbaa !33
  %199 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i264, align 8, !tbaa !31
  store i64 %199, i64* %198, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i.i326

if.end6.i.i.i.i.i.i322:                           ; preds = %if.end.i.i.i.i.i.i312
  %_M_p.i.i.i.i.i.i.i317 = bitcast i8* %call2.i293 to i8**
  %200 = load i8*, i8** %_M_p.i.i.i.i.i.i.i317, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i.i.i310, label %if.end.i.i.i.i.i.i.i.i.i326 [
    i64 1, label %if.then.i.i.i.i.i.i.i.i323
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338
  ]

if.then.i.i.i.i.i.i.i.i323:                       ; preds = %if.end6.i.i.i.i.i.i322
  %201 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %201, i8* %200, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338

if.end.i.i.i.i.i.i.i.i.i326:                      ; preds = %if.end6.i.i.i.i.i.i322, %if.else.i.i.i.i.i.i.i.i325.thread
  %_M_p.i.i.i.i.i.i.i31712491251 = phi i8** [ %_M_p.i8.i.i.i.i.i.i314, %if.else.i.i.i.i.i.i.i.i325.thread ], [ %_M_p.i.i.i.i.i.i.i317, %if.end6.i.i.i.i.i.i322 ]
  %202 = phi i8* [ %call5.i.i.i.i.i.i313, %if.else.i.i.i.i.i.i.i.i325.thread ], [ %200, %if.end6.i.i.i.i.i.i322 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %202, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i.i.i310, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338: ; preds = %if.end.i.i.i.i.i.i.i.i.i326, %if.then.i.i.i.i.i.i.i.i323, %if.end6.i.i.i.i.i.i322
  %_M_p.i.i.i.i.i.i.i3171248 = phi i8** [ %_M_p.i.i.i.i.i.i.i317, %if.then.i.i.i.i.i.i.i.i323 ], [ %_M_p.i.i.i.i.i.i.i31712491251, %if.end.i.i.i.i.i.i.i.i.i326 ], [ %_M_p.i.i.i.i.i.i.i317, %if.end6.i.i.i.i.i.i322 ]
  %203 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i264, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i.i328 = getelementptr inbounds i8, i8* %call2.i293, i64 8
  %204 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i328 to i64*
  store i64 %203, i64* %204, align 8, !tbaa !36
  %205 = load i8*, i8** %_M_p.i.i.i.i.i.i.i3171248, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i.i330 = getelementptr inbounds i8, i8* %205, i64 %203
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i330, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %196)
  %m_RuntimeHandle.i.i331 = getelementptr inbounds i8, i8* %call2.i293, i64 32
  %206 = bitcast i8* %m_RuntimeHandle.i.i331 to i8**
  store i8* null, i8** %206, align 8, !tbaa !54
  %m_PushArgImpl.i.i332 = getelementptr inbounds i8, i8* %call2.i293, i64 40
  %207 = bitcast i8* %m_PushArgImpl.i.i332 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %207, align 8, !tbaa !56
  %m_PushArgPtrImpl.i.i333 = getelementptr inbounds i8, i8* %call2.i293, i64 48
  %208 = bitcast i8* %m_PushArgPtrImpl.i.i333 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %208, align 8, !tbaa !57
  %m_GetContextImpl.i.i334 = getelementptr inbounds i8, i8* %call2.i293, i64 56
  %209 = bitcast i8* %m_GetContextImpl.i.i334 to i8* ()**
  store i8* ()* null, i8* ()** %209, align 8, !tbaa !58
  %210 = getelementptr inbounds i8, i8* %call2.i293, i64 64
  store i8 0, i8* %210, align 8, !tbaa !59
  %call.i14.i336 = call i8* @dlopen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i32 4097) #45
  store i8* %call.i14.i336, i8** %206, align 8, !tbaa !54
  %tobool.i.i337 = icmp eq i8* %call.i14.i336, null
  br i1 %tobool.i.i337, label %if.then.i15.i339, label %if.end.i.i391

if.then.i15.i339:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338
  br i1 icmp eq (i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i.i346, label %if.else.i.i.i349

if.then.i.i.i346:                                 ; preds = %if.then.i15.i339
  %vtable.i.i.i340 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i.i341 = getelementptr i8, i8* %vtable.i.i.i340, i64 -24
  %211 = bitcast i8* %vbase.offset.ptr.i.i.i341 to i64*
  %vbase.offset.i.i.i342 = load i64, i64* %211, align 8
  %add.ptr.i8.i.i343 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i.i.i342
  %212 = bitcast i8 addrspace(1)* %add.ptr.i8.i.i343 to %"class.std::basic_ios" addrspace(1)*
  %213 = addrspacecast %"class.std::basic_ios" addrspace(1)* %212 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i.i344 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i8.i.i343, i64 32
  %214 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i.i344 to i32 addrspace(1)*
  %215 = load i32, i32 addrspace(1)* %214, align 8, !tbaa !44
  %or.i.i.i.i.i345 = or i32 %215, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %213, i32 %or.i.i.i.i.i345) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i352

if.else.i.i.i349:                                 ; preds = %if.then.i15.i339
  %call.i.i9.i.i347 = call i64 @strlen(i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0)) #45
  %call1.i.i.i348 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i64 %call.i.i9.i.i347) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i352

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i352: ; preds = %if.else.i.i.i349, %if.then.i.i.i346
  %call5.i.i350 = call i8* @dlerror() #45
  %tobool.i11.i.i351 = icmp eq i8* %call5.i.i350, null
  br i1 %tobool.i11.i.i351, label %if.then.i18.i.i359, label %if.else.i21.i.i362

if.then.i18.i.i359:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i352
  %vtable.i12.i.i353 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i13.i.i354 = getelementptr i8, i8* %vtable.i12.i.i353, i64 -24
  %216 = bitcast i8* %vbase.offset.ptr.i13.i.i354 to i64*
  %vbase.offset.i14.i.i355 = load i64, i64* %216, align 8
  %add.ptr.i15.i.i356 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i14.i.i355
  %217 = bitcast i8* %add.ptr.i15.i.i356 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i16.i.i357 = getelementptr inbounds i8, i8* %add.ptr.i15.i.i356, i64 32
  %218 = bitcast i8* %_M_streambuf_state.i.i.i16.i.i357 to i32*
  %219 = load i32, i32* %218, align 8, !tbaa !44
  %or.i.i.i17.i.i358 = or i32 %219, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %217, i32 %or.i.i.i17.i.i358) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i369

if.else.i21.i.i362:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i352
  %call.i.i19.i.i360 = call i64 @strlen(i8* nonnull %call5.i.i350) #45
  %call1.i20.i.i361 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call5.i.i350, i64 %call.i.i19.i.i360) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i369

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i369: ; preds = %if.else.i21.i.i362, %if.then.i18.i.i359
  %vtable.i24.i.i363 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i25.i.i364 = getelementptr i8, i8* %vtable.i24.i.i363, i64 -24
  %220 = bitcast i8* %vbase.offset.ptr.i25.i.i364 to i64*
  %vbase.offset.i26.i.i365 = load i64, i64* %220, align 8
  %add.ptr.i27.i.i366 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i26.i.i365
  %_M_ctype.i.i.i367 = getelementptr inbounds i8, i8* %add.ptr.i27.i.i366, i64 240
  %221 = bitcast i8* %_M_ctype.i.i.i367 to %"class.std::ctype"**
  %222 = load %"class.std::ctype"*, %"class.std::ctype"** %221, align 8, !tbaa !50
  %tobool.i36.i.i368 = icmp eq %"class.std::ctype"* %222, null
  br i1 %tobool.i36.i.i368, label %if.then.i37.i.i370, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i373

if.then.i37.i.i370:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i369
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i373: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i369
  %_M_widen_ok.i.i.i371 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %222, i64 0, i32 8
  %223 = load i8, i8* %_M_widen_ok.i.i.i371, align 8, !tbaa !52
  %tobool.i32.i.i372 = icmp eq i8 %223, 0
  br i1 %tobool.i32.i.i372, label %if.end.i.i.i379, label %if.then.i33.i.i375

if.then.i33.i.i375:                               ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i373
  %arrayidx.i.i.i374 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %222, i64 0, i32 9, i64 10
  %224 = load i8, i8* %arrayidx.i.i.i374, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i383

if.end.i.i.i379:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i373
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %222) #43
  %225 = bitcast %"class.std::ctype"* %222 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i34.i.i376 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %225, align 8, !tbaa !37
  %vfn.i.i.i377 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i34.i.i376, i64 6
  %226 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i377, align 8
  %call.i35.i.i378 = call signext i8 %226(%"class.std::ctype"* nonnull %222, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i383

_ZNKSt5ctypeIcE5widenEc.exit.i.i383:              ; preds = %if.end.i.i.i379, %if.then.i33.i.i375
  %storemerge.i.i.i380 = phi i8 [ %call.i35.i.i378, %if.end.i.i.i379 ], [ %224, %if.then.i33.i.i375 ]
  %call1.i29.i.i381 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i.i.i380) #43
  %call.i30.i.i382 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i29.i.i381) #43
  br label %_ZN11RuntimeImplC2EPKc.exit.i394

if.end.i.i391:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i338
  %call.i.i16.i385 = call i8* @dlsym(i8* nonnull %call.i14.i336, i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.16 to [12 x i8]*), i64 0, i64 0)) #45
  %227 = bitcast i8* %m_PushArgImpl.i.i332 to i8**
  store i8* %call.i.i16.i385, i8** %227, align 8, !tbaa !56
  %228 = load i8*, i8** %206, align 8, !tbaa !54
  %call3.i.i.i387 = call i8* @dlsym(i8* %228, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.17 to [15 x i8]*), i64 0, i64 0)) #45
  %229 = bitcast i8* %m_PushArgPtrImpl.i.i333 to i8**
  store i8* %call3.i.i.i387, i8** %229, align 8, !tbaa !57
  %230 = load i8*, i8** %206, align 8, !tbaa !54
  %call5.i.i.i389 = call i8* @dlsym(i8* %230, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.18 to [15 x i8]*), i64 0, i64 0)) #45
  %231 = bitcast i8* %m_GetContextImpl.i.i334 to i8**
  store i8* %call5.i.i.i389, i8** %231, align 8, !tbaa !58
  br label %_ZN11RuntimeImplC2EPKc.exit.i394

_ZN11RuntimeImplC2EPKc.exit.i394:                 ; preds = %if.end.i.i391, %_ZNKSt5ctypeIcE5widenEc.exit.i.i383
  %232 = load i8*, i8** %206, align 8, !tbaa !54
  %tobool3.i393 = icmp eq i8* %232, null
  br i1 %tobool3.i393, label %if.then4.i395, label %_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit

if.then4.i395:                                    ; preds = %_ZN11RuntimeImplC2EPKc.exit.i394
  br i1 icmp eq (i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0), i8* null), label %if.then.i24.i402, label %if.else.i27.i405

if.then.i24.i402:                                 ; preds = %if.then4.i395
  %vtable.i18.i396 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i19.i397 = getelementptr i8, i8* %vtable.i18.i396, i64 -24
  %233 = bitcast i8* %vbase.offset.ptr.i19.i397 to i64*
  %vbase.offset.i20.i398 = load i64, i64* %233, align 8
  %add.ptr.i21.i399 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i20.i398
  %234 = bitcast i8 addrspace(1)* %add.ptr.i21.i399 to %"class.std::basic_ios" addrspace(1)*
  %235 = addrspacecast %"class.std::basic_ios" addrspace(1)* %234 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i22.i400 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i21.i399, i64 32
  %236 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i22.i400 to i32 addrspace(1)*
  %237 = load i32, i32 addrspace(1)* %236, align 8, !tbaa !44
  %or.i.i.i23.i401 = or i32 %237, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %235, i32 %or.i.i.i23.i401) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i414

if.else.i27.i405:                                 ; preds = %if.then4.i395
  %call.i.i25.i403 = call i64 @strlen(i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0)) #45
  %call1.i26.i404 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0), i64 %call.i.i25.i403) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i414

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i414: ; preds = %if.else.i27.i405, %if.then.i24.i402
  %vtable.i31.i406 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i32.i407 = getelementptr i8, i8* %vtable.i31.i406, i64 -24
  %238 = bitcast i8* %vbase.offset.ptr.i32.i407 to i64*
  %vbase.offset.i33.i408 = load i64, i64* %238, align 8
  %add.ptr.i34.i409 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i33.i408
  %_M_ctype.i = getelementptr inbounds i8, i8* %add.ptr.i34.i409, i64 240
  %239 = bitcast i8* %_M_ctype.i to %"class.std::ctype"**
  %240 = load %"class.std::ctype"*, %"class.std::ctype"** %239, align 8, !tbaa !50
  %tobool.i921 = icmp eq %"class.std::ctype"* %240, null
  br i1 %tobool.i921, label %if.then.i922, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit

if.then.i922:                                     ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i414
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit:    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i414
  %_M_widen_ok.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %240, i64 0, i32 8
  %241 = load i8, i8* %_M_widen_ok.i, align 8, !tbaa !52
  %tobool.i419 = icmp eq i8 %241, 0
  br i1 %tobool.i419, label %if.end.i423, label %if.then.i420

if.then.i420:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit
  %arrayidx.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %240, i64 0, i32 9, i64 10
  %242 = load i8, i8* %arrayidx.i, align 1, !tbaa !35
  br label %delete.notnull.i415

if.end.i423:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %240) #43
  %243 = bitcast %"class.std::ctype"* %240 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i421 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %243, align 8, !tbaa !37
  %vfn.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i421, i64 6
  %244 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i, align 8
  %call.i422 = call signext i8 %244(%"class.std::ctype"* nonnull %240, i8 signext 10) #43
  br label %delete.notnull.i415

delete.notnull.i415:                              ; preds = %if.end.i423, %if.then.i420
  %storemerge.i = phi i8 [ %call.i422, %if.end.i423 ], [ %242, %if.then.i420 ]
  %call1.i36.i411 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i) #43
  %call.i37.i412 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i36.i411) #43
  %245 = load i8*, i8** %206, align 8, !tbaa !54
  %tobool.i892 = icmp eq i8* %245, null
  br i1 %tobool.i892, label %if.end.i899, label %if.then.i894

if.then.i894:                                     ; preds = %delete.notnull.i415
  %call.i893 = call i32 @dlclose(i8* nonnull %245) #45
  br label %if.end.i899

if.end.i899:                                      ; preds = %if.then.i894, %delete.notnull.i415
  %246 = load i8*, i8** %_M_p.i.i.i.i.i.i.i3171248, align 8, !tbaa !33
  %cmp.i.i.i.i898 = icmp eq i8* %246, %194
  br i1 %cmp.i.i.i.i898, label %delete.end.i416, label %if.then.i.i.i904

if.then.i.i.i904:                                 ; preds = %if.end.i899
  call void @_ZdlPv(i8* %246) #45
  br label %delete.end.i416

delete.end.i416:                                  ; preds = %if.then.i.i.i904, %if.end.i899
  call void @_ZdlPv(i8* nonnull %call2.i293) #49
  call void @exit(i32 -1) #50
  unreachable

_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit:         ; preds = %_ZN11RuntimeImplC2EPKc.exit.i394
  store i8* %call2.i293, i8* addrspace(1)* bitcast (%struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl to i8* addrspace(1)*), align 8, !tbaa !27
  store i8 1, i8* %210, align 8, !tbaa !59
  br label %if.end44

if.else27:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit252
  br i1 icmp eq (i8* getelementptr ([49 x i8], [49 x i8]* addrspacecast ([49 x i8] addrspace(4)* @.str.8 to [49 x i8]*), i64 0, i64 0), i8* null), label %if.then.i431, label %if.else.i434

if.then.i431:                                     ; preds = %if.else27
  %vtable.i425 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i426 = getelementptr i8, i8* %vtable.i425, i64 -24
  %247 = bitcast i8* %vbase.offset.ptr.i426 to i64*
  %vbase.offset.i427 = load i64, i64* %247, align 8
  %add.ptr.i428 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i427
  %248 = bitcast i8 addrspace(1)* %add.ptr.i428 to %"class.std::basic_ios" addrspace(1)*
  %249 = addrspacecast %"class.std::basic_ios" addrspace(1)* %248 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i429 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i428, i64 32
  %250 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i429 to i32 addrspace(1)*
  %251 = load i32, i32 addrspace(1)* %250, align 8, !tbaa !44
  %or.i.i.i430 = or i32 %251, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %249, i32 %or.i.i.i430) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit450

if.else.i434:                                     ; preds = %if.else27
  %call.i.i432 = call i64 @strlen(i8* getelementptr ([49 x i8], [49 x i8]* addrspacecast ([49 x i8] addrspace(4)* @.str.8 to [49 x i8]*), i64 0, i64 0)) #45
  %call1.i433 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([49 x i8], [49 x i8]* addrspacecast ([49 x i8] addrspace(4)* @.str.8 to [49 x i8]*), i64 0, i64 0), i64 %call.i.i432) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit450

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit450: ; preds = %if.else.i434, %if.then.i431
  %call.i.i446 = call i64 @strlen(i8* nonnull %call7) #45
  %call1.i447 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call7, i64 %call.i.i446) #43
  %vtable.i452 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i453 = getelementptr i8, i8* %vtable.i452, i64 -24
  %252 = bitcast i8* %vbase.offset.ptr.i453 to i64*
  %vbase.offset.i454 = load i64, i64* %252, align 8
  %add.ptr.i455 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i454
  %_M_ctype.i924 = getelementptr inbounds i8, i8* %add.ptr.i455, i64 240
  %253 = bitcast i8* %_M_ctype.i924 to %"class.std::ctype"**
  %254 = load %"class.std::ctype"*, %"class.std::ctype"** %253, align 8, !tbaa !50
  %tobool.i1046 = icmp eq %"class.std::ctype"* %254, null
  br i1 %tobool.i1046, label %if.then.i1047, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1049

if.then.i1047:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit450
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1049: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit450
  %_M_widen_ok.i928 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %254, i64 0, i32 8
  %255 = load i8, i8* %_M_widen_ok.i928, align 8, !tbaa !52
  %tobool.i929 = icmp eq i8 %255, 0
  br i1 %tobool.i929, label %if.end.i935, label %if.then.i931

if.then.i931:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1049
  %arrayidx.i930 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %254, i64 0, i32 9, i64 10
  %256 = load i8, i8* %arrayidx.i930, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit937

if.end.i935:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1049
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %254) #43
  %257 = bitcast %"class.std::ctype"* %254 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i932 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %257, align 8, !tbaa !37
  %vfn.i933 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i932, i64 6
  %258 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i933, align 8
  %call.i934 = call signext i8 %258(%"class.std::ctype"* nonnull %254, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit937

_ZNKSt5ctypeIcE5widenEc.exit937:                  ; preds = %if.end.i935, %if.then.i931
  %storemerge.i936 = phi i8 [ %call.i934, %if.end.i935 ], [ %256, %if.then.i931 ]
  %call1.i457 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i936) #43
  %call.i459 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i457) #43
  br label %if.end33

if.end33:                                         ; preds = %_ZNKSt5ctypeIcE5widenEc.exit937, %_ZNKSt5ctypeIcE5widenEc.exit890, %if.end6
  %.pr = load %struct.RuntimeImpl*, %struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl, align 8, !tbaa !27
  %cmp34 = icmp eq %struct.RuntimeImpl* %.pr, null
  br i1 %cmp34, label %if.then35, label %if.end44

if.then35:                                        ; preds = %if.end33
  %259 = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect"* %0, i64 0, i32 0
  %call36 = call zeroext i1 @_ZN6Kalmar5CLAMP14PlatformDetect6detectEv(%"class.Kalmar::CLAMP::PlatformDetect"* %259) #43
  %260 = load i8, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL14mcwamp_verboseE, align 1, !tbaa !41, !range !43
  %tobool.i480 = icmp eq i8 %260, 0
  br i1 %call36, label %if.then37, label %if.else39

if.then37:                                        ; preds = %if.then35
  br i1 %tobool.i480, label %if.end.i506, label %if.then.i481

if.then.i481:                                     ; preds = %if.then37
  br i1 icmp eq (i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i488, label %if.else.i.i491

if.then.i.i488:                                   ; preds = %if.then.i481
  %vtable.i.i482 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i483 = getelementptr i8, i8* %vtable.i.i482, i64 -24
  %261 = bitcast i8* %vbase.offset.ptr.i.i483 to i64*
  %vbase.offset.i.i484 = load i64, i64* %261, align 8
  %add.ptr.i.i485 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*), i64 %vbase.offset.i.i484
  %262 = bitcast i8 addrspace(1)* %add.ptr.i.i485 to %"class.std::basic_ios" addrspace(1)*
  %263 = addrspacecast %"class.std::basic_ios" addrspace(1)* %262 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i486 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i.i485, i64 32
  %264 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i486 to i32 addrspace(1)*
  %265 = load i32, i32 addrspace(1)* %264, align 8, !tbaa !44
  %or.i.i.i.i487 = or i32 %265, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %263, i32 %or.i.i.i.i487) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i499

if.else.i.i491:                                   ; preds = %if.then.i481
  %call.i.i.i489 = call i64 @strlen(i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0)) #45
  %call1.i.i490 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.13 to [16 x i8]*), i64 0, i64 0), i64 %call.i.i.i489) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i499

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i499: ; preds = %if.else.i.i491, %if.then.i.i488
  %vtable.i8.i492 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i9.i493 = getelementptr i8, i8* %vtable.i8.i492, i64 -24
  %266 = bitcast i8* %vbase.offset.ptr.i9.i493 to i64*
  %vbase.offset.i10.i494 = load i64, i64* %266, align 8
  %add.ptr.i11.i495 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i10.i494
  %_M_ctype.i954 = getelementptr inbounds i8, i8* %add.ptr.i11.i495, i64 240
  %267 = bitcast i8* %_M_ctype.i954 to %"class.std::ctype"**
  %268 = load %"class.std::ctype"*, %"class.std::ctype"** %267, align 8, !tbaa !50
  %tobool.i1050 = icmp eq %"class.std::ctype"* %268, null
  br i1 %tobool.i1050, label %if.then.i1051, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1053

if.then.i1051:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i499
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1053: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i499
  %_M_widen_ok.i958 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %268, i64 0, i32 8
  %269 = load i8, i8* %_M_widen_ok.i958, align 8, !tbaa !52
  %tobool.i959 = icmp eq i8 %269, 0
  br i1 %tobool.i959, label %if.end.i965, label %if.then.i961

if.then.i961:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1053
  %arrayidx.i960 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %268, i64 0, i32 9, i64 10
  %270 = load i8, i8* %arrayidx.i960, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit967

if.end.i965:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1053
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %268) #43
  %271 = bitcast %"class.std::ctype"* %268 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i962 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %271, align 8, !tbaa !37
  %vfn.i963 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i962, i64 6
  %272 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i963, align 8
  %call.i964 = call signext i8 %272(%"class.std::ctype"* nonnull %268, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit967

_ZNKSt5ctypeIcE5widenEc.exit967:                  ; preds = %if.end.i965, %if.then.i961
  %storemerge.i966 = phi i8 [ %call.i964, %if.end.i965 ], [ %270, %if.then.i961 ]
  %call1.i13.i497 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8 signext %storemerge.i966) #43
  %call.i.i498 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i13.i497) #43
  br label %if.end.i506

if.end.i506:                                      ; preds = %_ZNKSt5ctypeIcE5widenEc.exit967, %if.then37
  %call2.i500 = call i8* @_Znwm(i64 72) #48
  %m_ImplName.i.i501 = bitcast i8* %call2.i500 to %"class.std::__cxx11::basic_string"*
  %273 = getelementptr inbounds i8, i8* %call2.i500, i64 16
  %.cast.i.i.i.i505 = ptrtoint i8* %273 to i64
  %274 = bitcast i8* %call2.i500 to i64*
  store i64 %.cast.i.i.i.i505, i64* %274, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null), label %cond.end.i.i.i511, label %cond.true.i.i.i509

cond.true.i.i.i509:                               ; preds = %if.end.i506
  %call.i.i.i.i507 = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)) #45
  %add.ptr.i.i.i5081284 = getelementptr inbounds [17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 %call.i.i.i.i507
  %add.ptr.i.i.i508 = addrspacecast i8 addrspace(4)* %add.ptr.i.i.i5081284 to i8*
  br label %cond.end.i.i.i511

cond.end.i.i.i511:                                ; preds = %cond.true.i.i.i509, %if.end.i506
  %cond.i.i.i510 = phi i8* [ %add.ptr.i.i.i508, %cond.true.i.i.i509 ], [ inttoptr (i64 -1 to i8*), %if.end.i506 ]
  %275 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i471 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %275)
  %276 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i471 to i64*
  %cmp.i.i.i.i.i.i512 = icmp eq i8* %cond.i.i.i510, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*)
  %or.cond1276 = or i1 %cmp.i.i.i.i.i.i512, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1276, label %if.end.i.i.i.i.i.i519, label %if.then.i.i.i.i.i.i514

if.then.i.i.i.i.i.i514:                           ; preds = %cond.end.i.i.i511
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i.i519:                            ; preds = %cond.end.i.i.i511
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i516 = ptrtoint i8* %cond.i.i.i510 to i64
  %sub.ptr.sub.i.i.i.i.i.i.i.i517 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i516, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i.i.i517, i64 addrspace(5)* %__dnew.i.i.i.i.i.i471, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i518 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i.i.i517, 15
  br i1 %cmp3.i.i.i.i.i.i518, label %if.else.i.i.i.i.i.i.i.i532.thread, label %if.end6.i.i.i.i.i.i529

if.else.i.i.i.i.i.i.i.i532.thread:                ; preds = %if.end.i.i.i.i.i.i519
  %277 = bitcast i8* %273 to i64*
  %_M_p.i8.i.i.i.i.i.i521 = bitcast i8* %call2.i500 to i8**
  %call5.i.i.i.i.i.i520 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %m_ImplName.i.i501, i64* dereferenceable(8) %276, i64 0) #43
  store i8* %call5.i.i.i.i.i.i520, i8** %_M_p.i8.i.i.i.i.i.i521, align 8, !tbaa !33
  %278 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i471, align 8, !tbaa !31
  store i64 %278, i64* %277, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i.i533

if.end6.i.i.i.i.i.i529:                           ; preds = %if.end.i.i.i.i.i.i519
  %_M_p.i.i.i.i.i.i.i524 = bitcast i8* %call2.i500 to i8**
  %279 = load i8*, i8** %_M_p.i.i.i.i.i.i.i524, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i.i.i517, label %if.end.i.i.i.i.i.i.i.i.i533 [
    i64 1, label %if.then.i.i.i.i.i.i.i.i530
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545
  ]

if.then.i.i.i.i.i.i.i.i530:                       ; preds = %if.end6.i.i.i.i.i.i529
  %280 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %280, i8* %279, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545

if.end.i.i.i.i.i.i.i.i.i533:                      ; preds = %if.end6.i.i.i.i.i.i529, %if.else.i.i.i.i.i.i.i.i532.thread
  %_M_p.i.i.i.i.i.i.i52412571259 = phi i8** [ %_M_p.i8.i.i.i.i.i.i521, %if.else.i.i.i.i.i.i.i.i532.thread ], [ %_M_p.i.i.i.i.i.i.i524, %if.end6.i.i.i.i.i.i529 ]
  %281 = phi i8* [ %call5.i.i.i.i.i.i520, %if.else.i.i.i.i.i.i.i.i532.thread ], [ %279, %if.end6.i.i.i.i.i.i529 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %281, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i.i.i517, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545: ; preds = %if.end.i.i.i.i.i.i.i.i.i533, %if.then.i.i.i.i.i.i.i.i530, %if.end6.i.i.i.i.i.i529
  %_M_p.i.i.i.i.i.i.i5241256 = phi i8** [ %_M_p.i.i.i.i.i.i.i524, %if.then.i.i.i.i.i.i.i.i530 ], [ %_M_p.i.i.i.i.i.i.i52412571259, %if.end.i.i.i.i.i.i.i.i.i533 ], [ %_M_p.i.i.i.i.i.i.i524, %if.end6.i.i.i.i.i.i529 ]
  %282 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i471, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i.i535 = getelementptr inbounds i8, i8* %call2.i500, i64 8
  %283 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i535 to i64*
  store i64 %282, i64* %283, align 8, !tbaa !36
  %284 = load i8*, i8** %_M_p.i.i.i.i.i.i.i5241256, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i.i537 = getelementptr inbounds i8, i8* %284, i64 %282
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i537, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %275)
  %m_RuntimeHandle.i.i538 = getelementptr inbounds i8, i8* %call2.i500, i64 32
  %285 = bitcast i8* %m_RuntimeHandle.i.i538 to i8**
  store i8* null, i8** %285, align 8, !tbaa !54
  %m_PushArgImpl.i.i539 = getelementptr inbounds i8, i8* %call2.i500, i64 40
  %286 = bitcast i8* %m_PushArgImpl.i.i539 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %286, align 8, !tbaa !56
  %m_PushArgPtrImpl.i.i540 = getelementptr inbounds i8, i8* %call2.i500, i64 48
  %287 = bitcast i8* %m_PushArgPtrImpl.i.i540 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %287, align 8, !tbaa !57
  %m_GetContextImpl.i.i541 = getelementptr inbounds i8, i8* %call2.i500, i64 56
  %288 = bitcast i8* %m_GetContextImpl.i.i541 to i8* ()**
  store i8* ()* null, i8* ()** %288, align 8, !tbaa !58
  %289 = getelementptr inbounds i8, i8* %call2.i500, i64 64
  store i8 0, i8* %289, align 8, !tbaa !59
  %call.i14.i543 = call i8* @dlopen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.10, i64 0, i64 0) to i8*), i32 4097) #45
  store i8* %call.i14.i543, i8** %285, align 8, !tbaa !54
  %tobool.i.i544 = icmp eq i8* %call.i14.i543, null
  br i1 %tobool.i.i544, label %if.then.i15.i546, label %if.end.i.i598

if.then.i15.i546:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545
  br i1 icmp eq (i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i.i553, label %if.else.i.i.i556

if.then.i.i.i553:                                 ; preds = %if.then.i15.i546
  %vtable.i.i.i547 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i.i548 = getelementptr i8, i8* %vtable.i.i.i547, i64 -24
  %290 = bitcast i8* %vbase.offset.ptr.i.i.i548 to i64*
  %vbase.offset.i.i.i549 = load i64, i64* %290, align 8
  %add.ptr.i8.i.i550 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i.i.i549
  %291 = bitcast i8 addrspace(1)* %add.ptr.i8.i.i550 to %"class.std::basic_ios" addrspace(1)*
  %292 = addrspacecast %"class.std::basic_ios" addrspace(1)* %291 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i.i551 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i8.i.i550, i64 32
  %293 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i.i551 to i32 addrspace(1)*
  %294 = load i32, i32 addrspace(1)* %293, align 8, !tbaa !44
  %or.i.i.i.i.i552 = or i32 %294, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %292, i32 %or.i.i.i.i.i552) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i559

if.else.i.i.i556:                                 ; preds = %if.then.i15.i546
  %call.i.i9.i.i554 = call i64 @strlen(i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0)) #45
  %call1.i.i.i555 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i64 %call.i.i9.i.i554) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i559

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i559: ; preds = %if.else.i.i.i556, %if.then.i.i.i553
  %call5.i.i557 = call i8* @dlerror() #45
  %tobool.i11.i.i558 = icmp eq i8* %call5.i.i557, null
  br i1 %tobool.i11.i.i558, label %if.then.i18.i.i566, label %if.else.i21.i.i569

if.then.i18.i.i566:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i559
  %vtable.i12.i.i560 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i13.i.i561 = getelementptr i8, i8* %vtable.i12.i.i560, i64 -24
  %295 = bitcast i8* %vbase.offset.ptr.i13.i.i561 to i64*
  %vbase.offset.i14.i.i562 = load i64, i64* %295, align 8
  %add.ptr.i15.i.i563 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i14.i.i562
  %296 = bitcast i8* %add.ptr.i15.i.i563 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i16.i.i564 = getelementptr inbounds i8, i8* %add.ptr.i15.i.i563, i64 32
  %297 = bitcast i8* %_M_streambuf_state.i.i.i16.i.i564 to i32*
  %298 = load i32, i32* %297, align 8, !tbaa !44
  %or.i.i.i17.i.i565 = or i32 %298, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %296, i32 %or.i.i.i17.i.i565) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i576

if.else.i21.i.i569:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i559
  %call.i.i19.i.i567 = call i64 @strlen(i8* nonnull %call5.i.i557) #45
  %call1.i20.i.i568 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call5.i.i557, i64 %call.i.i19.i.i567) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i576

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i576: ; preds = %if.else.i21.i.i569, %if.then.i18.i.i566
  %vtable.i24.i.i570 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i25.i.i571 = getelementptr i8, i8* %vtable.i24.i.i570, i64 -24
  %299 = bitcast i8* %vbase.offset.ptr.i25.i.i571 to i64*
  %vbase.offset.i26.i.i572 = load i64, i64* %299, align 8
  %add.ptr.i27.i.i573 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i26.i.i572
  %_M_ctype.i.i.i574 = getelementptr inbounds i8, i8* %add.ptr.i27.i.i573, i64 240
  %300 = bitcast i8* %_M_ctype.i.i.i574 to %"class.std::ctype"**
  %301 = load %"class.std::ctype"*, %"class.std::ctype"** %300, align 8, !tbaa !50
  %tobool.i36.i.i575 = icmp eq %"class.std::ctype"* %301, null
  br i1 %tobool.i36.i.i575, label %if.then.i37.i.i577, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i580

if.then.i37.i.i577:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i576
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i580: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i576
  %_M_widen_ok.i.i.i578 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %301, i64 0, i32 8
  %302 = load i8, i8* %_M_widen_ok.i.i.i578, align 8, !tbaa !52
  %tobool.i32.i.i579 = icmp eq i8 %302, 0
  br i1 %tobool.i32.i.i579, label %if.end.i.i.i586, label %if.then.i33.i.i582

if.then.i33.i.i582:                               ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i580
  %arrayidx.i.i.i581 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %301, i64 0, i32 9, i64 10
  %303 = load i8, i8* %arrayidx.i.i.i581, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i590

if.end.i.i.i586:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i580
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %301) #43
  %304 = bitcast %"class.std::ctype"* %301 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i34.i.i583 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %304, align 8, !tbaa !37
  %vfn.i.i.i584 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i34.i.i583, i64 6
  %305 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i584, align 8
  %call.i35.i.i585 = call signext i8 %305(%"class.std::ctype"* nonnull %301, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i590

_ZNKSt5ctypeIcE5widenEc.exit.i.i590:              ; preds = %if.end.i.i.i586, %if.then.i33.i.i582
  %storemerge.i.i.i587 = phi i8 [ %call.i35.i.i585, %if.end.i.i.i586 ], [ %303, %if.then.i33.i.i582 ]
  %call1.i29.i.i588 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i.i.i587) #43
  %call.i30.i.i589 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i29.i.i588) #43
  br label %_ZN11RuntimeImplC2EPKc.exit.i601

if.end.i.i598:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i545
  %call.i.i16.i592 = call i8* @dlsym(i8* nonnull %call.i14.i543, i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.16 to [12 x i8]*), i64 0, i64 0)) #45
  %306 = bitcast i8* %m_PushArgImpl.i.i539 to i8**
  store i8* %call.i.i16.i592, i8** %306, align 8, !tbaa !56
  %307 = load i8*, i8** %285, align 8, !tbaa !54
  %call3.i.i.i594 = call i8* @dlsym(i8* %307, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.17 to [15 x i8]*), i64 0, i64 0)) #45
  %308 = bitcast i8* %m_PushArgPtrImpl.i.i540 to i8**
  store i8* %call3.i.i.i594, i8** %308, align 8, !tbaa !57
  %309 = load i8*, i8** %285, align 8, !tbaa !54
  %call5.i.i.i596 = call i8* @dlsym(i8* %309, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.18 to [15 x i8]*), i64 0, i64 0)) #45
  %310 = bitcast i8* %m_GetContextImpl.i.i541 to i8**
  store i8* %call5.i.i.i596, i8** %310, align 8, !tbaa !58
  br label %_ZN11RuntimeImplC2EPKc.exit.i601

_ZN11RuntimeImplC2EPKc.exit.i601:                 ; preds = %if.end.i.i598, %_ZNKSt5ctypeIcE5widenEc.exit.i.i590
  %311 = load i8*, i8** %285, align 8, !tbaa !54
  %tobool3.i600 = icmp eq i8* %311, null
  br i1 %tobool3.i600, label %if.then4.i602, label %_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit624

if.then4.i602:                                    ; preds = %_ZN11RuntimeImplC2EPKc.exit.i601
  br i1 icmp eq (i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0), i8* null), label %if.then.i24.i609, label %if.else.i27.i612

if.then.i24.i609:                                 ; preds = %if.then4.i602
  %vtable.i18.i603 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i19.i604 = getelementptr i8, i8* %vtable.i18.i603, i64 -24
  %312 = bitcast i8* %vbase.offset.ptr.i19.i604 to i64*
  %vbase.offset.i20.i605 = load i64, i64* %312, align 8
  %add.ptr.i21.i606 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i20.i605
  %313 = bitcast i8 addrspace(1)* %add.ptr.i21.i606 to %"class.std::basic_ios" addrspace(1)*
  %314 = addrspacecast %"class.std::basic_ios" addrspace(1)* %313 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i22.i607 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i21.i606, i64 32
  %315 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i22.i607 to i32 addrspace(1)*
  %316 = load i32, i32 addrspace(1)* %315, align 8, !tbaa !44
  %or.i.i.i23.i608 = or i32 %316, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %314, i32 %or.i.i.i23.i608) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i621

if.else.i27.i612:                                 ; preds = %if.then4.i602
  %call.i.i25.i610 = call i64 @strlen(i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0)) #45
  %call1.i26.i611 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.14 to [24 x i8]*), i64 0, i64 0), i64 %call.i.i25.i610) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i621

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i621: ; preds = %if.else.i27.i612, %if.then.i24.i609
  %vtable.i31.i613 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i32.i614 = getelementptr i8, i8* %vtable.i31.i613, i64 -24
  %317 = bitcast i8* %vbase.offset.ptr.i32.i614 to i64*
  %vbase.offset.i33.i615 = load i64, i64* %317, align 8
  %add.ptr.i34.i616 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i33.i615
  %_M_ctype.i968 = getelementptr inbounds i8, i8* %add.ptr.i34.i616, i64 240
  %318 = bitcast i8* %_M_ctype.i968 to %"class.std::ctype"**
  %319 = load %"class.std::ctype"*, %"class.std::ctype"** %318, align 8, !tbaa !50
  %tobool.i1054 = icmp eq %"class.std::ctype"* %319, null
  br i1 %tobool.i1054, label %if.then.i1055, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1057

if.then.i1055:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i621
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1057: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i621
  %_M_widen_ok.i972 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %319, i64 0, i32 8
  %320 = load i8, i8* %_M_widen_ok.i972, align 8, !tbaa !52
  %tobool.i973 = icmp eq i8 %320, 0
  br i1 %tobool.i973, label %if.end.i979, label %if.then.i975

if.then.i975:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1057
  %arrayidx.i974 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %319, i64 0, i32 9, i64 10
  %321 = load i8, i8* %arrayidx.i974, align 1, !tbaa !35
  br label %delete.notnull.i622

if.end.i979:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1057
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %319) #43
  %322 = bitcast %"class.std::ctype"* %319 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i976 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %322, align 8, !tbaa !37
  %vfn.i977 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i976, i64 6
  %323 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i977, align 8
  %call.i978 = call signext i8 %323(%"class.std::ctype"* nonnull %319, i8 signext 10) #43
  br label %delete.notnull.i622

delete.notnull.i622:                              ; preds = %if.end.i979, %if.then.i975
  %storemerge.i980 = phi i8 [ %call.i978, %if.end.i979 ], [ %321, %if.then.i975 ]
  %call1.i36.i618 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i980) #43
  %call.i37.i619 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i36.i618) #43
  %324 = load i8*, i8** %285, align 8, !tbaa !54
  %tobool.i939 = icmp eq i8* %324, null
  br i1 %tobool.i939, label %if.end.i946, label %if.then.i941

if.then.i941:                                     ; preds = %delete.notnull.i622
  %call.i940 = call i32 @dlclose(i8* nonnull %324) #45
  br label %if.end.i946

if.end.i946:                                      ; preds = %if.then.i941, %delete.notnull.i622
  %325 = load i8*, i8** %_M_p.i.i.i.i.i.i.i5241256, align 8, !tbaa !33
  %cmp.i.i.i.i945 = icmp eq i8* %325, %273
  br i1 %cmp.i.i.i.i945, label %delete.end.i623, label %if.then.i.i.i951

if.then.i.i.i951:                                 ; preds = %if.end.i946
  call void @_ZdlPv(i8* %325) #45
  br label %delete.end.i623

delete.end.i623:                                  ; preds = %if.then.i.i.i951, %if.end.i946
  call void @_ZdlPv(i8* nonnull %call2.i500) #49
  call void @exit(i32 -1) #50
  unreachable

_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit624:      ; preds = %_ZN11RuntimeImplC2EPKc.exit.i601
  store i8* %call2.i500, i8* addrspace(1)* bitcast (%struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl to i8* addrspace(1)*), align 8, !tbaa !27
  br label %if.end44

if.else39:                                        ; preds = %if.then35
  br i1 %tobool.i480, label %if.end.i671, label %if.then.i646

if.then.i646:                                     ; preds = %if.else39
  br i1 icmp eq (i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i653, label %if.else.i.i656

if.then.i.i653:                                   ; preds = %if.then.i646
  %vtable.i.i647 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i648 = getelementptr i8, i8* %vtable.i.i647, i64 -24
  %326 = bitcast i8* %vbase.offset.ptr.i.i648 to i64*
  %vbase.offset.i.i649 = load i64, i64* %326, align 8
  %add.ptr.i.i650 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*), i64 %vbase.offset.i.i649
  %327 = bitcast i8 addrspace(1)* %add.ptr.i.i650 to %"class.std::basic_ios" addrspace(1)*
  %328 = addrspacecast %"class.std::basic_ios" addrspace(1)* %327 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i651 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i.i650, i64 32
  %329 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i651 to i32 addrspace(1)*
  %330 = load i32, i32 addrspace(1)* %329, align 8, !tbaa !44
  %or.i.i.i.i652 = or i32 %330, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %328, i32 %or.i.i.i.i652) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i664

if.else.i.i656:                                   ; preds = %if.then.i646
  %call.i.i.i654 = call i64 @strlen(i8* getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0)) #45
  %call1.i.i655 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([16 x i8], [16 x i8]* addrspacecast ([16 x i8] addrspace(4)* @.str.19 to [16 x i8]*), i64 0, i64 0), i64 %call.i.i.i654) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i664

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i664: ; preds = %if.else.i.i656, %if.then.i.i653
  %vtable.i8.i657 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i9.i658 = getelementptr i8, i8* %vtable.i8.i657, i64 -24
  %331 = bitcast i8* %vbase.offset.ptr.i9.i658 to i64*
  %vbase.offset.i10.i659 = load i64, i64* %331, align 8
  %add.ptr.i11.i660 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i10.i659
  %_M_ctype.i998 = getelementptr inbounds i8, i8* %add.ptr.i11.i660, i64 240
  %332 = bitcast i8* %_M_ctype.i998 to %"class.std::ctype"**
  %333 = load %"class.std::ctype"*, %"class.std::ctype"** %332, align 8, !tbaa !50
  %tobool.i1058 = icmp eq %"class.std::ctype"* %333, null
  br i1 %tobool.i1058, label %if.then.i1059, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1061

if.then.i1059:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i664
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1061: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i664
  %_M_widen_ok.i1002 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %333, i64 0, i32 8
  %334 = load i8, i8* %_M_widen_ok.i1002, align 8, !tbaa !52
  %tobool.i1003 = icmp eq i8 %334, 0
  br i1 %tobool.i1003, label %if.end.i1009, label %if.then.i1005

if.then.i1005:                                    ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1061
  %arrayidx.i1004 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %333, i64 0, i32 9, i64 10
  %335 = load i8, i8* %arrayidx.i1004, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit1011

if.end.i1009:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1061
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %333) #43
  %336 = bitcast %"class.std::ctype"* %333 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i1006 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %336, align 8, !tbaa !37
  %vfn.i1007 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i1006, i64 6
  %337 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i1007, align 8
  %call.i1008 = call signext i8 %337(%"class.std::ctype"* nonnull %333, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit1011

_ZNKSt5ctypeIcE5widenEc.exit1011:                 ; preds = %if.end.i1009, %if.then.i1005
  %storemerge.i1010 = phi i8 [ %call.i1008, %if.end.i1009 ], [ %335, %if.then.i1005 ]
  %call1.i13.i662 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cout to %"class.std::basic_ostream"*), i8 signext %storemerge.i1010) #43
  %call.i.i663 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i13.i662) #43
  br label %if.end.i671

if.end.i671:                                      ; preds = %_ZNKSt5ctypeIcE5widenEc.exit1011, %if.else39
  %call2.i665 = call i8* @_Znwm(i64 72) #48
  %m_ImplName.i.i666 = bitcast i8* %call2.i665 to %"class.std::__cxx11::basic_string"*
  %338 = getelementptr inbounds i8, i8* %call2.i665, i64 16
  %.cast.i.i.i.i670 = ptrtoint i8* %338 to i64
  %339 = bitcast i8* %call2.i665 to i64*
  store i64 %.cast.i.i.i.i670, i64* %339, align 8, !tbaa !29
  br i1 icmp eq (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i8* null), label %cond.end.i.i.i676, label %cond.true.i.i.i674

cond.true.i.i.i674:                               ; preds = %if.end.i671
  %call.i.i.i.i672 = call i64 @strlen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*)) #45
  %add.ptr.i.i.i6731283 = getelementptr inbounds [17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 %call.i.i.i.i672
  %add.ptr.i.i.i673 = addrspacecast i8 addrspace(4)* %add.ptr.i.i.i6731283 to i8*
  br label %cond.end.i.i.i676

cond.end.i.i.i676:                                ; preds = %cond.true.i.i.i674, %if.end.i671
  %cond.i.i.i675 = phi i8* [ %add.ptr.i.i.i673, %cond.true.i.i.i674 ], [ inttoptr (i64 -1 to i8*), %if.end.i671 ]
  %340 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i636 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %340)
  %341 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i636 to i64*
  %cmp.i.i.i.i.i.i677 = icmp eq i8* %cond.i.i.i675, addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*)
  %or.cond1277 = or i1 %cmp.i.i.i.i.i.i677, icmp ne (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i8* null)
  br i1 %or.cond1277, label %if.end.i.i.i.i.i.i684, label %if.then.i.i.i.i.i.i679

if.then.i.i.i.i.i.i679:                           ; preds = %cond.end.i.i.i676
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i.i684:                            ; preds = %cond.end.i.i.i676
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i681 = ptrtoint i8* %cond.i.i.i675 to i64
  %sub.ptr.sub.i.i.i.i.i.i.i.i682 = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i.i681, ptrtoint (i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*) to i64)
  store i64 %sub.ptr.sub.i.i.i.i.i.i.i.i682, i64 addrspace(5)* %__dnew.i.i.i.i.i.i636, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i683 = icmp ugt i64 %sub.ptr.sub.i.i.i.i.i.i.i.i682, 15
  br i1 %cmp3.i.i.i.i.i.i683, label %if.else.i.i.i.i.i.i.i.i697.thread, label %if.end6.i.i.i.i.i.i694

if.else.i.i.i.i.i.i.i.i697.thread:                ; preds = %if.end.i.i.i.i.i.i684
  %342 = bitcast i8* %338 to i64*
  %_M_p.i8.i.i.i.i.i.i686 = bitcast i8* %call2.i665 to i8**
  %call5.i.i.i.i.i.i685 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %m_ImplName.i.i666, i64* dereferenceable(8) %341, i64 0) #43
  store i8* %call5.i.i.i.i.i.i685, i8** %_M_p.i8.i.i.i.i.i.i686, align 8, !tbaa !33
  %343 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i636, align 8, !tbaa !31
  store i64 %343, i64* %342, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i.i.i698

if.end6.i.i.i.i.i.i694:                           ; preds = %if.end.i.i.i.i.i.i684
  %_M_p.i.i.i.i.i.i.i689 = bitcast i8* %call2.i665 to i8**
  %344 = load i8*, i8** %_M_p.i.i.i.i.i.i.i689, align 8, !tbaa !33
  switch i64 %sub.ptr.sub.i.i.i.i.i.i.i.i682, label %if.end.i.i.i.i.i.i.i.i.i698 [
    i64 1, label %if.then.i.i.i.i.i.i.i.i695
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710
  ]

if.then.i.i.i.i.i.i.i.i695:                       ; preds = %if.end6.i.i.i.i.i.i694
  %345 = load i8, i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), align 1, !tbaa !35
  store i8 %345, i8* %344, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710

if.end.i.i.i.i.i.i.i.i.i698:                      ; preds = %if.end6.i.i.i.i.i.i694, %if.else.i.i.i.i.i.i.i.i697.thread
  %_M_p.i.i.i.i.i.i.i68912641266 = phi i8** [ %_M_p.i8.i.i.i.i.i.i686, %if.else.i.i.i.i.i.i.i.i697.thread ], [ %_M_p.i.i.i.i.i.i.i689, %if.end6.i.i.i.i.i.i694 ]
  %346 = phi i8* [ %call5.i.i.i.i.i.i685, %if.else.i.i.i.i.i.i.i.i697.thread ], [ %344, %if.end6.i.i.i.i.i.i694 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %346, i8* align 1 addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i64 %sub.ptr.sub.i.i.i.i.i.i.i.i682, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710: ; preds = %if.end.i.i.i.i.i.i.i.i.i698, %if.then.i.i.i.i.i.i.i.i695, %if.end6.i.i.i.i.i.i694
  %_M_p.i.i.i.i.i.i.i6891263 = phi i8** [ %_M_p.i.i.i.i.i.i.i689, %if.then.i.i.i.i.i.i.i.i695 ], [ %_M_p.i.i.i.i.i.i.i68912641266, %if.end.i.i.i.i.i.i.i.i.i698 ], [ %_M_p.i.i.i.i.i.i.i689, %if.end6.i.i.i.i.i.i694 ]
  %347 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i636, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i.i.i700 = getelementptr inbounds i8, i8* %call2.i665, i64 8
  %348 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i700 to i64*
  store i64 %347, i64* %348, align 8, !tbaa !36
  %349 = load i8*, i8** %_M_p.i.i.i.i.i.i.i6891263, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i.i.i702 = getelementptr inbounds i8, i8* %349, i64 %347
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i702, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %340)
  %m_RuntimeHandle.i.i703 = getelementptr inbounds i8, i8* %call2.i665, i64 32
  %350 = bitcast i8* %m_RuntimeHandle.i.i703 to i8**
  store i8* null, i8** %350, align 8, !tbaa !54
  %m_PushArgImpl.i.i704 = getelementptr inbounds i8, i8* %call2.i665, i64 40
  %351 = bitcast i8* %m_PushArgImpl.i.i704 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %351, align 8, !tbaa !56
  %m_PushArgPtrImpl.i.i705 = getelementptr inbounds i8, i8* %call2.i665, i64 48
  %352 = bitcast i8* %m_PushArgPtrImpl.i.i705 to i8* (i8*, i32, i64, i8*)**
  store i8* (i8*, i32, i64, i8*)* null, i8* (i8*, i32, i64, i8*)** %352, align 8, !tbaa !57
  %m_GetContextImpl.i.i706 = getelementptr inbounds i8, i8* %call2.i665, i64 56
  %353 = bitcast i8* %m_GetContextImpl.i.i706 to i8* ()**
  store i8* ()* null, i8* ()** %353, align 8, !tbaa !58
  %354 = getelementptr inbounds i8, i8* %call2.i665, i64 64
  store i8 0, i8* %354, align 8, !tbaa !59
  %call.i14.i708 = call i8* @dlopen(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(4)* @.str.20, i64 0, i64 0) to i8*), i32 4097) #45
  store i8* %call.i14.i708, i8** %350, align 8, !tbaa !54
  %tobool.i.i709 = icmp eq i8* %call.i14.i708, null
  br i1 %tobool.i.i709, label %if.then.i15.i711, label %if.end.i.i763

if.then.i15.i711:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710
  br i1 icmp eq (i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i8* null), label %if.then.i.i.i718, label %if.else.i.i.i721

if.then.i.i.i718:                                 ; preds = %if.then.i15.i711
  %vtable.i.i.i712 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i.i.i713 = getelementptr i8, i8* %vtable.i.i.i712, i64 -24
  %355 = bitcast i8* %vbase.offset.ptr.i.i.i713 to i64*
  %vbase.offset.i.i.i714 = load i64, i64* %355, align 8
  %add.ptr.i8.i.i715 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i.i.i714
  %356 = bitcast i8 addrspace(1)* %add.ptr.i8.i.i715 to %"class.std::basic_ios" addrspace(1)*
  %357 = addrspacecast %"class.std::basic_ios" addrspace(1)* %356 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i.i.i716 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i8.i.i715, i64 32
  %358 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i.i.i716 to i32 addrspace(1)*
  %359 = load i32, i32 addrspace(1)* %358, align 8, !tbaa !44
  %or.i.i.i.i.i717 = or i32 %359, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %357, i32 %or.i.i.i.i.i717) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i724

if.else.i.i.i721:                                 ; preds = %if.then.i15.i711
  %call.i.i9.i.i719 = call i64 @strlen(i8* getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0)) #45
  %call1.i.i.i720 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([28 x i8], [28 x i8]* addrspacecast ([28 x i8] addrspace(4)* @.str.15 to [28 x i8]*), i64 0, i64 0), i64 %call.i.i9.i.i719) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i724

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i724: ; preds = %if.else.i.i.i721, %if.then.i.i.i718
  %call5.i.i722 = call i8* @dlerror() #45
  %tobool.i11.i.i723 = icmp eq i8* %call5.i.i722, null
  br i1 %tobool.i11.i.i723, label %if.then.i18.i.i731, label %if.else.i21.i.i734

if.then.i18.i.i731:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i724
  %vtable.i12.i.i725 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i13.i.i726 = getelementptr i8, i8* %vtable.i12.i.i725, i64 -24
  %360 = bitcast i8* %vbase.offset.ptr.i13.i.i726 to i64*
  %vbase.offset.i14.i.i727 = load i64, i64* %360, align 8
  %add.ptr.i15.i.i728 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i14.i.i727
  %361 = bitcast i8* %add.ptr.i15.i.i728 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i16.i.i729 = getelementptr inbounds i8, i8* %add.ptr.i15.i.i728, i64 32
  %362 = bitcast i8* %_M_streambuf_state.i.i.i16.i.i729 to i32*
  %363 = load i32, i32* %362, align 8, !tbaa !44
  %or.i.i.i17.i.i730 = or i32 %363, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %361, i32 %or.i.i.i17.i.i730) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i741

if.else.i21.i.i734:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit.i.i724
  %call.i.i19.i.i732 = call i64 @strlen(i8* nonnull %call5.i.i722) #45
  %call1.i20.i.i733 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull %call5.i.i722, i64 %call.i.i19.i.i732) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i741

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i741: ; preds = %if.else.i21.i.i734, %if.then.i18.i.i731
  %vtable.i24.i.i735 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i25.i.i736 = getelementptr i8, i8* %vtable.i24.i.i735, i64 -24
  %364 = bitcast i8* %vbase.offset.ptr.i25.i.i736 to i64*
  %vbase.offset.i26.i.i737 = load i64, i64* %364, align 8
  %add.ptr.i27.i.i738 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i26.i.i737
  %_M_ctype.i.i.i739 = getelementptr inbounds i8, i8* %add.ptr.i27.i.i738, i64 240
  %365 = bitcast i8* %_M_ctype.i.i.i739 to %"class.std::ctype"**
  %366 = load %"class.std::ctype"*, %"class.std::ctype"** %365, align 8, !tbaa !50
  %tobool.i36.i.i740 = icmp eq %"class.std::ctype"* %366, null
  br i1 %tobool.i36.i.i740, label %if.then.i37.i.i742, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i745

if.then.i37.i.i742:                               ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i741
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i745: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit22.i.i741
  %_M_widen_ok.i.i.i743 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %366, i64 0, i32 8
  %367 = load i8, i8* %_M_widen_ok.i.i.i743, align 8, !tbaa !52
  %tobool.i32.i.i744 = icmp eq i8 %367, 0
  br i1 %tobool.i32.i.i744, label %if.end.i.i.i751, label %if.then.i33.i.i747

if.then.i33.i.i747:                               ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i745
  %arrayidx.i.i.i746 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %366, i64 0, i32 9, i64 10
  %368 = load i8, i8* %arrayidx.i.i.i746, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i755

if.end.i.i.i751:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i745
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %366) #43
  %369 = bitcast %"class.std::ctype"* %366 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i34.i.i748 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %369, align 8, !tbaa !37
  %vfn.i.i.i749 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i34.i.i748, i64 6
  %370 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i749, align 8
  %call.i35.i.i750 = call signext i8 %370(%"class.std::ctype"* nonnull %366, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit.i.i755

_ZNKSt5ctypeIcE5widenEc.exit.i.i755:              ; preds = %if.end.i.i.i751, %if.then.i33.i.i747
  %storemerge.i.i.i752 = phi i8 [ %call.i35.i.i750, %if.end.i.i.i751 ], [ %368, %if.then.i33.i.i747 ]
  %call1.i29.i.i753 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i.i.i752) #43
  %call.i30.i.i754 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i29.i.i753) #43
  br label %_ZN11RuntimeImplC2EPKc.exit.i766

if.end.i.i763:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit.i.i710
  %call.i.i16.i757 = call i8* @dlsym(i8* nonnull %call.i14.i708, i8* getelementptr ([12 x i8], [12 x i8]* addrspacecast ([12 x i8] addrspace(4)* @.str.16 to [12 x i8]*), i64 0, i64 0)) #45
  %371 = bitcast i8* %m_PushArgImpl.i.i704 to i8**
  store i8* %call.i.i16.i757, i8** %371, align 8, !tbaa !56
  %372 = load i8*, i8** %350, align 8, !tbaa !54
  %call3.i.i.i759 = call i8* @dlsym(i8* %372, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.17 to [15 x i8]*), i64 0, i64 0)) #45
  %373 = bitcast i8* %m_PushArgPtrImpl.i.i705 to i8**
  store i8* %call3.i.i.i759, i8** %373, align 8, !tbaa !57
  %374 = load i8*, i8** %350, align 8, !tbaa !54
  %call5.i.i.i761 = call i8* @dlsym(i8* %374, i8* getelementptr ([15 x i8], [15 x i8]* addrspacecast ([15 x i8] addrspace(4)* @.str.18 to [15 x i8]*), i64 0, i64 0)) #45
  %375 = bitcast i8* %m_GetContextImpl.i.i706 to i8**
  store i8* %call5.i.i.i761, i8** %375, align 8, !tbaa !58
  br label %_ZN11RuntimeImplC2EPKc.exit.i766

_ZN11RuntimeImplC2EPKc.exit.i766:                 ; preds = %if.end.i.i763, %_ZNKSt5ctypeIcE5widenEc.exit.i.i755
  %376 = load i8*, i8** %350, align 8, !tbaa !54
  %tobool3.i765 = icmp eq i8* %376, null
  br i1 %tobool3.i765, label %if.then4.i767, label %_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit789

if.then4.i767:                                    ; preds = %_ZN11RuntimeImplC2EPKc.exit.i766
  br i1 icmp eq (i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0), i8* null), label %if.then.i24.i774, label %if.else.i27.i777

if.then.i24.i774:                                 ; preds = %if.then4.i767
  %vtable.i18.i768 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i19.i769 = getelementptr i8, i8* %vtable.i18.i768, i64 -24
  %377 = bitcast i8* %vbase.offset.ptr.i19.i769 to i64*
  %vbase.offset.i20.i770 = load i64, i64* %377, align 8
  %add.ptr.i21.i771 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i20.i770
  %378 = bitcast i8 addrspace(1)* %add.ptr.i21.i771 to %"class.std::basic_ios" addrspace(1)*
  %379 = addrspacecast %"class.std::basic_ios" addrspace(1)* %378 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i22.i772 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i21.i771, i64 32
  %380 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i22.i772 to i32 addrspace(1)*
  %381 = load i32, i32 addrspace(1)* %380, align 8, !tbaa !44
  %or.i.i.i23.i773 = or i32 %381, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %379, i32 %or.i.i.i23.i773) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i786

if.else.i27.i777:                                 ; preds = %if.then4.i767
  %call.i.i25.i775 = call i64 @strlen(i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0)) #45
  %call1.i26.i776 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.21 to [24 x i8]*), i64 0, i64 0), i64 %call.i.i25.i775) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i786

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i786: ; preds = %if.else.i27.i777, %if.then.i24.i774
  %vtable.i31.i778 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i32.i779 = getelementptr i8, i8* %vtable.i31.i778, i64 -24
  %382 = bitcast i8* %vbase.offset.ptr.i32.i779 to i64*
  %vbase.offset.i33.i780 = load i64, i64* %382, align 8
  %add.ptr.i34.i781 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i33.i780
  %_M_ctype.i791 = getelementptr inbounds i8, i8* %add.ptr.i34.i781, i64 240
  %383 = bitcast i8* %_M_ctype.i791 to %"class.std::ctype"**
  %384 = load %"class.std::ctype"*, %"class.std::ctype"** %383, align 8, !tbaa !50
  %tobool.i1012 = icmp eq %"class.std::ctype"* %384, null
  br i1 %tobool.i1012, label %if.then.i1013, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1015

if.then.i1013:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i786
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1015: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit29.i786
  %_M_widen_ok.i795 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %384, i64 0, i32 8
  %385 = load i8, i8* %_M_widen_ok.i795, align 8, !tbaa !52
  %tobool.i796 = icmp eq i8 %385, 0
  br i1 %tobool.i796, label %if.end.i802, label %if.then.i798

if.then.i798:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1015
  %arrayidx.i797 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %384, i64 0, i32 9, i64 10
  %386 = load i8, i8* %arrayidx.i797, align 1, !tbaa !35
  br label %delete.notnull.i787

if.end.i802:                                      ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1015
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %384) #43
  %387 = bitcast %"class.std::ctype"* %384 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i799 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %387, align 8, !tbaa !37
  %vfn.i800 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i799, i64 6
  %388 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i800, align 8
  %call.i801 = call signext i8 %388(%"class.std::ctype"* nonnull %384, i8 signext 10) #43
  br label %delete.notnull.i787

delete.notnull.i787:                              ; preds = %if.end.i802, %if.then.i798
  %storemerge.i803 = phi i8 [ %call.i801, %if.end.i802 ], [ %386, %if.then.i798 ]
  %call1.i36.i783 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i803) #43
  %call.i37.i784 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i36.i783) #43
  %389 = load i8*, i8** %350, align 8, !tbaa !54
  %tobool.i983 = icmp eq i8* %389, null
  br i1 %tobool.i983, label %if.end.i990, label %if.then.i985

if.then.i985:                                     ; preds = %delete.notnull.i787
  %call.i984 = call i32 @dlclose(i8* nonnull %389) #45
  br label %if.end.i990

if.end.i990:                                      ; preds = %if.then.i985, %delete.notnull.i787
  %390 = load i8*, i8** %_M_p.i.i.i.i.i.i.i6891263, align 8, !tbaa !33
  %cmp.i.i.i.i989 = icmp eq i8* %390, %338
  br i1 %cmp.i.i.i.i989, label %delete.end.i788, label %if.then.i.i.i995

if.then.i.i.i995:                                 ; preds = %if.end.i990
  call void @_ZdlPv(i8* %390) #45
  br label %delete.end.i788

delete.end.i788:                                  ; preds = %if.then.i.i.i995, %if.end.i990
  call void @_ZdlPv(i8* nonnull %call2.i665) #49
  call void @exit(i32 -1) #50
  unreachable

_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit789:      ; preds = %_ZN11RuntimeImplC2EPKc.exit.i766
  store i8* %call2.i665, i8* addrspace(1)* bitcast (%struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl to i8* addrspace(1)*), align 8, !tbaa !27
  store i8 1, i8* %354, align 8, !tbaa !59
  br i1 icmp eq (i8* getelementptr ([48 x i8], [48 x i8]* addrspacecast ([48 x i8] addrspace(4)* @.str.9 to [48 x i8]*), i64 0, i64 0), i8* null), label %if.then.i812, label %if.else.i815

if.then.i812:                                     ; preds = %_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit789
  %vtable.i806 = load i8*, i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*), align 8, !tbaa !37
  %vbase.offset.ptr.i807 = getelementptr i8, i8* %vtable.i806, i64 -24
  %391 = bitcast i8* %vbase.offset.ptr.i807 to i64*
  %vbase.offset.i808 = load i64, i64* %391, align 8
  %add.ptr.i809 = getelementptr inbounds i8, i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*), i64 %vbase.offset.i808
  %392 = bitcast i8 addrspace(1)* %add.ptr.i809 to %"class.std::basic_ios" addrspace(1)*
  %393 = addrspacecast %"class.std::basic_ios" addrspace(1)* %392 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i810 = getelementptr inbounds i8, i8 addrspace(1)* %add.ptr.i809, i64 32
  %394 = bitcast i8 addrspace(1)* %_M_streambuf_state.i.i.i810 to i32 addrspace(1)*
  %395 = load i32, i32 addrspace(1)* %394, align 8, !tbaa !44
  %or.i.i.i811 = or i32 %395, 1
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %393, i32 %or.i.i.i811) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit817

if.else.i815:                                     ; preds = %_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit789
  %call.i.i813 = call i64 @strlen(i8* getelementptr ([48 x i8], [48 x i8]* addrspacecast ([48 x i8] addrspace(4)* @.str.9 to [48 x i8]*), i64 0, i64 0)) #45
  %call1.i814 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8* nonnull getelementptr ([48 x i8], [48 x i8]* addrspacecast ([48 x i8] addrspace(4)* @.str.9 to [48 x i8]*), i64 0, i64 0), i64 %call.i.i813) #43
  br label %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit817

_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit817: ; preds = %if.else.i815, %if.then.i812
  %vtable.i819 = load i8*, i8** addrspacecast (i8* addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8* addrspace(1)*) to i8**), align 8, !tbaa !37
  %vbase.offset.ptr.i820 = getelementptr i8, i8* %vtable.i819, i64 -24
  %396 = bitcast i8* %vbase.offset.ptr.i820 to i64*
  %vbase.offset.i821 = load i64, i64* %396, align 8
  %add.ptr.i822 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to i8 addrspace(1)*) to i8*), i64 %vbase.offset.i821
  %_M_ctype.i1016 = getelementptr inbounds i8, i8* %add.ptr.i822, i64 240
  %397 = bitcast i8* %_M_ctype.i1016 to %"class.std::ctype"**
  %398 = load %"class.std::ctype"*, %"class.std::ctype"** %397, align 8, !tbaa !50
  %tobool.i1062 = icmp eq %"class.std::ctype"* %398, null
  br i1 %tobool.i1062, label %if.then.i1063, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1065

if.then.i1063:                                    ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit817
  call void @_ZSt16__throw_bad_castv() #46
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1065: ; preds = %_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc.exit817
  %_M_widen_ok.i1020 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %398, i64 0, i32 8
  %399 = load i8, i8* %_M_widen_ok.i1020, align 8, !tbaa !52
  %tobool.i1021 = icmp eq i8 %399, 0
  br i1 %tobool.i1021, label %if.end.i1027, label %if.then.i1023

if.then.i1023:                                    ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1065
  %arrayidx.i1022 = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %398, i64 0, i32 9, i64 10
  %400 = load i8, i8* %arrayidx.i1022, align 1, !tbaa !35
  br label %_ZNKSt5ctypeIcE5widenEc.exit1029

if.end.i1027:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit1065
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull %398) #43
  %401 = bitcast %"class.std::ctype"* %398 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i1024 = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %401, align 8, !tbaa !37
  %vfn.i1025 = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i1024, i64 6
  %402 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i1025, align 8
  %call.i1026 = call signext i8 %402(%"class.std::ctype"* nonnull %398, i8 signext 10) #43
  br label %_ZNKSt5ctypeIcE5widenEc.exit1029

_ZNKSt5ctypeIcE5widenEc.exit1029:                 ; preds = %if.end.i1027, %if.then.i1023
  %storemerge.i1028 = phi i8 [ %call.i1026, %if.end.i1027 ], [ %400, %if.then.i1023 ]
  %call1.i824 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull addrspacecast (%"class.std::basic_ostream" addrspace(1)* @_ZSt4cerr to %"class.std::basic_ostream"*), i8 signext %storemerge.i1028) #43
  %call.i826 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"* nonnull %call1.i824) #43
  br label %if.end44

if.end44:                                         ; preds = %_ZNKSt5ctypeIcE5widenEc.exit1029, %_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit624, %if.end33, %_ZN6Kalmar5CLAMPL14LoadCPURuntimeEv.exit, %_ZN6Kalmar5CLAMPL14LoadHSARuntimeEv.exit
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN6Kalmar5CLAMP14PlatformDetectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** addrspace(5)* %29, align 8, !tbaa !37
  %403 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i36.i.i1213, align 8, !tbaa !33
  %404 = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 2, i32 2
  %arraydecay.i.i.i.i.i828 = bitcast %union.anon addrspace(5)* %404 to i8 addrspace(5)*
  %405 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i.i828 to i8*
  %cmp.i.i.i.i829 = icmp eq i8* %403, %405
  br i1 %cmp.i.i.i.i829, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i, label %if.then.i.i.i834

if.then.i.i.i834:                                 ; preds = %if.end44
  call void @_ZdlPv(i8* %403) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i: ; preds = %if.then.i.i.i834, %if.end44
  %406 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.i56.i1206, align 8, !tbaa !33
  %407 = getelementptr inbounds %"class.Kalmar::CLAMP::HSAPlatformDetect", %"class.Kalmar::CLAMP::HSAPlatformDetect" addrspace(5)* %hsa_rt, i32 0, i32 0, i32 1, i32 2
  %arraydecay.i.i.i.i3.i = bitcast %union.anon addrspace(5)* %407 to i8 addrspace(5)*
  %408 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i3.i to i8*
  %cmp.i.i.i4.i = icmp eq i8* %406, %408
  br i1 %cmp.i.i.i4.i, label %if.end45, label %if.then.i.i9.i

if.then.i.i9.i:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i
  call void @_ZdlPv(i8* %406) #45
  br label %if.end45

if.end45:                                         ; preds = %if.then.i.i9.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i, %entry
  %409 = load %struct.RuntimeImpl*, %struct.RuntimeImpl* addrspace(1)* @_ZZN6Kalmar5CLAMP16GetOrInitRuntimeEvE11runtimeImpl, align 8, !tbaa !27
  ret %struct.RuntimeImpl* %409
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p5i8(i64, i8 addrspace(5)* nocapture) #8

; Function Attrs: nounwind
declare i64 @strlen(i8*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #10

declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"*, i64* dereferenceable(8), i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p5i8(i64, i8 addrspace(5)* nocapture) #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind
declare i8* @getenv(i8*) local_unnamed_addr #9

declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"*, i8*) local_unnamed_addr #3

declare zeroext i1 @_ZN6Kalmar5CLAMP14PlatformDetect6detectEv(%"class.Kalmar::CLAMP::PlatformDetect"*) unnamed_addr #3

declare void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"*, i32) local_unnamed_addr #3

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272), i8*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZSt16__throw_bad_castv() local_unnamed_addr #10

declare void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"*) local_unnamed_addr #3

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"*, i8 signext) local_unnamed_addr #3

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo5flushEv(%"class.std::basic_ostream"*) local_unnamed_addr #3

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nounwind
declare i8* @dlopen(i8*, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare i8* @dlerror() local_unnamed_addr #9

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @dlclose(i8*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #13

define zeroext i1 @_ZN6Kalmar5CLAMP6is_cpuEv() local_unnamed_addr #7 {
entry:
  %call = tail call %struct.RuntimeImpl* @_ZN6Kalmar5CLAMP16GetOrInitRuntimeEv() #43
  %isCPU.i = getelementptr inbounds %struct.RuntimeImpl, %struct.RuntimeImpl* %call, i64 0, i32 5
  %0 = load i8, i8* %isCPU.i, align 8, !tbaa !59, !range !43
  %tobool.i = icmp ne i8 %0, 0
  ret i1 %tobool.i
}

; Function Attrs: norecurse nounwind readonly
define zeroext i1 @_ZN6Kalmar5CLAMP13in_cpu_kernelEv() local_unnamed_addr #14 {
entry:
  %0 = load i8, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL9in_kernelE, align 1, !tbaa !41, !range !43
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: norecurse nounwind writeonly
define void @_ZN6Kalmar5CLAMP12enter_kernelEv() local_unnamed_addr #15 {
entry:
  store i8 1, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL9in_kernelE, align 1, !tbaa !41
  ret void
}

; Function Attrs: norecurse nounwind writeonly
define void @_ZN6Kalmar5CLAMP12leave_kernelEv() local_unnamed_addr #15 {
entry:
  store i8 0, i8 addrspace(1)* @_ZN6Kalmar5CLAMPL9in_kernelE, align 1, !tbaa !41
  ret void
}

define void @_ZN6Kalmar5CLAMP19LoadInMemoryProgramEPNS_11KalmarQueueE(%"class.Kalmar::KalmarQueue"* %pQueue) local_unnamed_addr #7 {
entry:
  %kernel_size = alloca i64, align 8, addrspace(5)
  %0 = addrspacecast i64 addrspace(5)* %kernel_size to i64*
  %kernel_source = alloca i8*, align 8, addrspace(5)
  %1 = addrspacecast i8* addrspace(5)* %kernel_source to i8**
  store i64 0, i64 addrspace(5)* %kernel_size, align 8, !tbaa !31
  store i8* null, i8* addrspace(5)* %kernel_source, align 8, !tbaa !27
  %call = call zeroext i1 @_ZN6Kalmar5CLAMP22DetermineAndGetProgramEPNS_11KalmarQueueEPmPPv(%"class.Kalmar::KalmarQueue"* %pQueue, i64* %0, i8** %1) #43
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %pDev.i = getelementptr inbounds %"class.Kalmar::KalmarQueue", %"class.Kalmar::KalmarQueue"* %pQueue, i64 0, i32 1
  %2 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %pDev.i, align 8, !tbaa !60
  %3 = bitcast i64 addrspace(5)* %kernel_size to i8* addrspace(5)*
  %4 = load i8*, i8* addrspace(5)* %3, align 8, !tbaa !31
  %5 = load i8*, i8* addrspace(5)* %kernel_source, align 8, !tbaa !27
  %6 = bitcast %"class.Kalmar::KalmarDevice"* %2 to void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)***
  %vtable = load void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)**, void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*** %6, align 8, !tbaa !37
  %vfn = getelementptr inbounds void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*, void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)** %vtable, i64 10
  %7 = load void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*, void (%"class.Kalmar::KalmarDevice"*, i8*, i8*)** %vfn, align 8
  call void %7(%"class.Kalmar::KalmarDevice"* %2, i8* %4, i8* %5) #43
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint
define linkonce_odr zeroext i1 @_ZN6Kalmar5CLAMP22DetermineAndGetProgramEPNS_11KalmarQueueEPmPPv(%"class.Kalmar::KalmarQueue"* %pQueue, i64* %kernel_size, i8** %kernel_source) local_unnamed_addr #16 {
entry:
  %__dnew.i.i.i.i156 = alloca i64, align 8, addrspace(5)
  %__dnew.i.i.i.i = alloca i64, align 8, addrspace(5)
  %MagicStr = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %0 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr to %"class.std::__cxx11::basic_string"*
  %Triple = alloca %"class.std::__cxx11::basic_string", align 8, addrspace(5)
  %1 = addrspacecast %"class.std::__cxx11::basic_string" addrspace(5)* %Triple to %"class.std::__cxx11::basic_string"*
  br i1 icmp ult (i64 sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 24), label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %printf_alloc_fn = tail call i8 addrspace(1)* @__printf_alloc(i32 4)
  %2 = icmp eq i8 addrspace(1)* %printf_alloc_fn, null
  br i1 %2, label %4, label %3

; <label>:3:                                      ; preds = %if.then
  %PrintBuffIdCast = bitcast i8 addrspace(1)* %printf_alloc_fn to i32 addrspace(1)*
  store i32 1, i32 addrspace(1)* %PrintBuffIdCast, align 4
  br label %4

; <label>:4:                                      ; preds = %3, %if.then
  tail call void @exit(i32 1) #50
  unreachable

if.end:                                           ; preds = %entry
  %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %.cast.i.i = ptrtoint %union.anon* %5 to i64
  %6 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr to i64 addrspace(5)*
  store i64 %.cast.i.i, i64 addrspace(5)* %6, align 8, !tbaa !29
  %7 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %7)
  %8 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i to i64*
  %9 = bitcast %union.anon* %5 to i8*
  br i1 or (i1 icmp ne (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i8* null), i1 icmp eq (i8** addrspacecast (i8* addrspace(1)* getelementptr inbounds ([0 x i8*], [0 x i8*] addrspace(1)* @_binary_kernel_bundle_start, i64 0, i64 0) to i8**), i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3))), label %if.end.i.i.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.end
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i:                                   ; preds = %if.end
  store i64 sub (i64 ptrtoint (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  br i1 icmp ugt (i64 sub (i64 ptrtoint (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 15), label %if.then4.i.i.i.i, label %if.end.i.i.i.i.if.end6.i.i.i.i_crit_edge

if.end.i.i.i.i.if.end6.i.i.i.i_crit_edge:         ; preds = %if.end.i.i.i.i
  %.pre = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr, i32 0, i32 0, i32 0
  br label %if.end6.i.i.i.i

if.then4.i.i.i.i:                                 ; preds = %if.end.i.i.i.i
  %call5.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %0, i64* dereferenceable(8) %8, i64 0) #43
  %_M_p.i8.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr, i32 0, i32 0, i32 0
  store i8* %call5.i.i.i.i, i8* addrspace(5)* %_M_p.i8.i.i.i.i, align 8, !tbaa !33
  %10 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr, i32 0, i32 2, i32 0
  store i64 %10, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end6.i.i.i.i

if.end6.i.i.i.i:                                  ; preds = %if.then4.i.i.i.i, %if.end.i.i.i.i.if.end6.i.i.i.i_crit_edge
  %_M_p.i.i.i.i.i.pre-phi = phi i8* addrspace(5)* [ %.pre, %if.end.i.i.i.i.if.end6.i.i.i.i_crit_edge ], [ %_M_p.i8.i.i.i.i, %if.then4.i.i.i.i ]
  %11 = phi i8* [ %9, %if.end.i.i.i.i.if.end6.i.i.i.i_crit_edge ], [ %call5.i.i.i.i, %if.then4.i.i.i.i ]
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 1), label %if.then.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %if.end6.i.i.i.i
  %12 = load i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), align 1, !tbaa !35
  store i8 %12, i8* %11, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit

if.else.i.i.i.i.i.i:                              ; preds = %if.end6.i.i.i.i
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 0), label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit, label %if.end.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i:                             ; preds = %if.else.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 sub (i64 ptrtoint (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit: ; preds = %if.end.i.i.i.i.i.i.i, %if.else.i.i.i.i.i.i, %if.then.i.i.i.i.i.i
  %13 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i, align 8, !tbaa !31
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr, i32 0, i32 1
  store i64 %13, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !36
  %14 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.pre-phi, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %14, i64 %13
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %7)
  %call4 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* %0, i8* getelementptr ([25 x i8], [25 x i8]* addrspacecast ([25 x i8] addrspace(4)* @.str.26 to [25 x i8]*), i64 0, i64 0)) #43
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.end16, label %if.then6

if.then6:                                         ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit
  %printf_alloc_fn106 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %15 = icmp eq i8 addrspace(1)* %printf_alloc_fn106, null
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %if.then6
  %PrintBuffIdCast108 = bitcast i8 addrspace(1)* %printf_alloc_fn106 to i32 addrspace(1)*
  store i32 2, i32 addrspace(1)* %PrintBuffIdCast108, align 4
  br label %17

; <label>:17:                                     ; preds = %16, %if.then6
  call void @exit(i32 1) #50
  unreachable

if.end16:                                         ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit
  br i1 icmp ult (i64 sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64)), i64 32), label %if.then20, label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %if.end16
  %18 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 31), align 1, !tbaa !35
  %conv12.i = zext i8 %18 to i64
  %shl.i.1 = shl nuw nsw i64 %conv12.i, 8
  %19 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 30), align 1, !tbaa !35
  %conv12.i.1 = zext i8 %19 to i64
  %or.i.1 = or i64 %shl.i.1, %conv12.i.1
  %shl.i.2 = shl nuw nsw i64 %or.i.1, 8
  %20 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 29), align 1, !tbaa !35
  %conv12.i.2 = zext i8 %20 to i64
  %or.i.2 = or i64 %shl.i.2, %conv12.i.2
  %shl.i.3 = shl nuw nsw i64 %or.i.2, 8
  %21 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 28), align 1, !tbaa !35
  %conv12.i.3 = zext i8 %21 to i64
  %or.i.3 = or i64 %shl.i.3, %conv12.i.3
  %shl.i.4 = shl i64 %or.i.3, 8
  %22 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 27), align 1, !tbaa !35
  %conv12.i.4 = zext i8 %22 to i64
  %or.i.4 = or i64 %shl.i.4, %conv12.i.4
  %shl.i.5 = shl i64 %or.i.4, 8
  %23 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 26), align 1, !tbaa !35
  %conv12.i.5 = zext i8 %23 to i64
  %or.i.5 = or i64 %shl.i.5, %conv12.i.5
  %shl.i.6 = shl i64 %or.i.5, 8
  %24 = load i8, i8* getelementptr (i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 25), align 1, !tbaa !35
  %conv12.i.6 = zext i8 %24 to i64
  %or.i.6 = or i64 %shl.i.6, %conv12.i.6
  %shl.i.7 = shl i64 %or.i.6, 8
  %25 = load i8, i8* bitcast (i8** getelementptr ([0 x i8*], [0 x i8*]* addrspacecast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to [0 x i8*]*), i64 0, i64 3) to i8*), align 1, !tbaa !35
  %conv12.i.7 = zext i8 %25 to i64
  %or.i.7 = or i64 %shl.i.7, %conv12.i.7
  %cmp33317 = icmp eq i64 %or.i.7, 0
  br i1 %cmp33317, label %for.end, label %for.body.lr.ph

if.then20:                                        ; preds = %if.end16
  %printf_alloc_fn110 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %26 = icmp eq i8 addrspace(1)* %printf_alloc_fn110, null
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %if.then20
  %PrintBuffIdCast112 = bitcast i8 addrspace(1)* %printf_alloc_fn110 to i32 addrspace(1)*
  store i32 3, i32 addrspace(1)* %PrintBuffIdCast112, align 4
  br label %28

; <label>:28:                                     ; preds = %27, %if.then20
  call void @exit(i32 1) #50
  unreachable

for.body.lr.ph:                                   ; preds = %for.body.i.preheader
  %29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 2
  %.cast.i.i164 = ptrtoint %union.anon* %29 to i64
  %30 = bitcast %"class.std::__cxx11::basic_string" addrspace(5)* %Triple to i64 addrspace(5)*
  %31 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i156 to i8 addrspace(5)*
  %32 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i156 to i64*
  %_M_p.i8.i.i.i.i176 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %Triple, i32 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i177 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %Triple, i32 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i190 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %Triple, i32 0, i32 1
  %pDev.i = getelementptr inbounds %"class.Kalmar::KalmarQueue", %"class.Kalmar::KalmarQueue"* %pQueue, i64 0, i32 1
  %33 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %Triple, i32 0, i32 2
  %arraydecay.i.i.i.i132 = bitcast %union.anon addrspace(5)* %33 to i8 addrspace(5)*
  %34 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i132 to i8*
  %35 = bitcast %union.anon* %29 to i8*
  br label %for.body

for.body:                                         ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139, %for.body.lr.ph
  %storemerge319 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139 ]
  %pos.0318 = phi i64 [ 32, %for.body.lr.ph ], [ %add79, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139 ]
  %add34 = add i64 %pos.0318, 8
  %cmp35 = icmp ugt i64 %add34, sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64))
  br i1 %cmp35, label %if.then36, label %for.cond.i200.preheader

for.cond.i200.preheader:                          ; preds = %for.body
  %add.i202 = add i64 %pos.0318, 7
  %arrayidx.i205 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %add.i202
  %36 = load i8, i8* %arrayidx.i205, align 1, !tbaa !35
  %conv12.i206 = zext i8 %36 to i64
  %shl.i201.1 = shl nuw nsw i64 %conv12.i206, 8
  %sub.i204.1 = add i64 %pos.0318, 6
  %arrayidx.i205.1 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.1
  %37 = load i8, i8* %arrayidx.i205.1, align 1, !tbaa !35
  %conv12.i206.1 = zext i8 %37 to i64
  %or.i207.1 = or i64 %shl.i201.1, %conv12.i206.1
  %shl.i201.2 = shl nuw nsw i64 %or.i207.1, 8
  %sub.i204.2 = add i64 %pos.0318, 5
  %arrayidx.i205.2 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.2
  %38 = load i8, i8* %arrayidx.i205.2, align 1, !tbaa !35
  %conv12.i206.2 = zext i8 %38 to i64
  %or.i207.2 = or i64 %shl.i201.2, %conv12.i206.2
  %shl.i201.3 = shl nuw nsw i64 %or.i207.2, 8
  %sub.i204.3 = add i64 %pos.0318, 4
  %arrayidx.i205.3 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.3
  %39 = load i8, i8* %arrayidx.i205.3, align 1, !tbaa !35
  %conv12.i206.3 = zext i8 %39 to i64
  %or.i207.3 = or i64 %shl.i201.3, %conv12.i206.3
  %shl.i201.4 = shl i64 %or.i207.3, 8
  %sub.i204.4 = add i64 %pos.0318, 3
  %arrayidx.i205.4 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.4
  %40 = load i8, i8* %arrayidx.i205.4, align 1, !tbaa !35
  %conv12.i206.4 = zext i8 %40 to i64
  %or.i207.4 = or i64 %shl.i201.4, %conv12.i206.4
  %shl.i201.5 = shl i64 %or.i207.4, 8
  %sub.i204.5 = add i64 %pos.0318, 2
  %arrayidx.i205.5 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.5
  %41 = load i8, i8* %arrayidx.i205.5, align 1, !tbaa !35
  %conv12.i206.5 = zext i8 %41 to i64
  %or.i207.5 = or i64 %shl.i201.5, %conv12.i206.5
  %shl.i201.6 = shl i64 %or.i207.5, 8
  %sub.i204.6 = add i64 %pos.0318, 1
  %arrayidx.i205.6 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i204.6
  %42 = load i8, i8* %arrayidx.i205.6, align 1, !tbaa !35
  %conv12.i206.6 = zext i8 %42 to i64
  %or.i207.6 = or i64 %shl.i201.6, %conv12.i206.6
  %shl.i201.7 = shl i64 %or.i207.6, 8
  %arrayidx.i205.7 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %pos.0318
  %43 = load i8, i8* %arrayidx.i205.7, align 1, !tbaa !35
  %conv12.i206.7 = zext i8 %43 to i64
  %or.i207.7 = or i64 %shl.i201.7, %conv12.i206.7
  %add49 = add i64 %pos.0318, 16
  %cmp50 = icmp ugt i64 %add49, sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64))
  br i1 %cmp50, label %if.then51, label %for.cond.i234.preheader

if.then36:                                        ; preds = %for.body
  %printf_alloc_fn114 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %44 = icmp eq i8 addrspace(1)* %printf_alloc_fn114, null
  br i1 %44, label %46, label %45

; <label>:45:                                     ; preds = %if.then36
  %PrintBuffIdCast116 = bitcast i8 addrspace(1)* %printf_alloc_fn114 to i32 addrspace(1)*
  store i32 4, i32 addrspace(1)* %PrintBuffIdCast116, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %if.then36
  call void @exit(i32 1) #50
  unreachable

for.cond.i234.preheader:                          ; preds = %for.cond.i200.preheader
  %add.i236 = add i64 %pos.0318, 15
  %arrayidx.i239 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %add.i236
  %47 = load i8, i8* %arrayidx.i239, align 1, !tbaa !35
  %conv12.i240 = zext i8 %47 to i64
  %shl.i235.1 = shl nuw nsw i64 %conv12.i240, 8
  %sub.i238.1 = add i64 %pos.0318, 14
  %arrayidx.i239.1 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.1
  %48 = load i8, i8* %arrayidx.i239.1, align 1, !tbaa !35
  %conv12.i240.1 = zext i8 %48 to i64
  %or.i241.1 = or i64 %shl.i235.1, %conv12.i240.1
  %shl.i235.2 = shl nuw nsw i64 %or.i241.1, 8
  %sub.i238.2 = add i64 %pos.0318, 13
  %arrayidx.i239.2 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.2
  %49 = load i8, i8* %arrayidx.i239.2, align 1, !tbaa !35
  %conv12.i240.2 = zext i8 %49 to i64
  %or.i241.2 = or i64 %shl.i235.2, %conv12.i240.2
  %shl.i235.3 = shl nuw nsw i64 %or.i241.2, 8
  %sub.i238.3 = add i64 %pos.0318, 12
  %arrayidx.i239.3 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.3
  %50 = load i8, i8* %arrayidx.i239.3, align 1, !tbaa !35
  %conv12.i240.3 = zext i8 %50 to i64
  %or.i241.3 = or i64 %shl.i235.3, %conv12.i240.3
  %shl.i235.4 = shl i64 %or.i241.3, 8
  %sub.i238.4 = add i64 %pos.0318, 11
  %arrayidx.i239.4 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.4
  %51 = load i8, i8* %arrayidx.i239.4, align 1, !tbaa !35
  %conv12.i240.4 = zext i8 %51 to i64
  %or.i241.4 = or i64 %shl.i235.4, %conv12.i240.4
  %shl.i235.5 = shl i64 %or.i241.4, 8
  %sub.i238.5 = add i64 %pos.0318, 10
  %arrayidx.i239.5 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.5
  %52 = load i8, i8* %arrayidx.i239.5, align 1, !tbaa !35
  %conv12.i240.5 = zext i8 %52 to i64
  %or.i241.5 = or i64 %shl.i235.5, %conv12.i240.5
  %shl.i235.6 = shl i64 %or.i241.5, 8
  %sub.i238.6 = add i64 %pos.0318, 9
  %arrayidx.i239.6 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.6
  %53 = load i8, i8* %arrayidx.i239.6, align 1, !tbaa !35
  %conv12.i240.6 = zext i8 %53 to i64
  %or.i241.6 = or i64 %shl.i235.6, %conv12.i240.6
  %shl.i235.7 = shl i64 %or.i241.6, 8
  %sub.i238.7 = add i64 %pos.0318, 8
  %arrayidx.i239.7 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i238.7
  %54 = load i8, i8* %arrayidx.i239.7, align 1, !tbaa !35
  %conv12.i240.7 = zext i8 %54 to i64
  %or.i241.7 = or i64 %shl.i235.7, %conv12.i240.7
  %add64 = add i64 %pos.0318, 24
  %cmp65 = icmp ugt i64 %add64, sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64))
  br i1 %cmp65, label %if.then66, label %for.cond.i217.preheader

if.then51:                                        ; preds = %for.cond.i200.preheader
  %printf_alloc_fn118 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %55 = icmp eq i8 addrspace(1)* %printf_alloc_fn118, null
  br i1 %55, label %57, label %56

; <label>:56:                                     ; preds = %if.then51
  %PrintBuffIdCast120 = bitcast i8 addrspace(1)* %printf_alloc_fn118 to i32 addrspace(1)*
  store i32 5, i32 addrspace(1)* %PrintBuffIdCast120, align 4
  br label %57

; <label>:57:                                     ; preds = %56, %if.then51
  call void @exit(i32 1) #50
  unreachable

for.cond.i217.preheader:                          ; preds = %for.cond.i234.preheader
  %add.i219 = add i64 %pos.0318, 23
  %arrayidx.i222 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %add.i219
  %58 = load i8, i8* %arrayidx.i222, align 1, !tbaa !35
  %conv12.i223 = zext i8 %58 to i64
  %shl.i218.1 = shl nuw nsw i64 %conv12.i223, 8
  %sub.i221.1 = add i64 %pos.0318, 22
  %arrayidx.i222.1 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.1
  %59 = load i8, i8* %arrayidx.i222.1, align 1, !tbaa !35
  %conv12.i223.1 = zext i8 %59 to i64
  %or.i224.1 = or i64 %shl.i218.1, %conv12.i223.1
  %shl.i218.2 = shl nuw nsw i64 %or.i224.1, 8
  %sub.i221.2 = add i64 %pos.0318, 21
  %arrayidx.i222.2 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.2
  %60 = load i8, i8* %arrayidx.i222.2, align 1, !tbaa !35
  %conv12.i223.2 = zext i8 %60 to i64
  %or.i224.2 = or i64 %shl.i218.2, %conv12.i223.2
  %shl.i218.3 = shl nuw nsw i64 %or.i224.2, 8
  %sub.i221.3 = add i64 %pos.0318, 20
  %arrayidx.i222.3 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.3
  %61 = load i8, i8* %arrayidx.i222.3, align 1, !tbaa !35
  %conv12.i223.3 = zext i8 %61 to i64
  %or.i224.3 = or i64 %shl.i218.3, %conv12.i223.3
  %shl.i218.4 = shl i64 %or.i224.3, 8
  %sub.i221.4 = add i64 %pos.0318, 19
  %arrayidx.i222.4 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.4
  %62 = load i8, i8* %arrayidx.i222.4, align 1, !tbaa !35
  %conv12.i223.4 = zext i8 %62 to i64
  %or.i224.4 = or i64 %shl.i218.4, %conv12.i223.4
  %shl.i218.5 = shl i64 %or.i224.4, 8
  %sub.i221.5 = add i64 %pos.0318, 18
  %arrayidx.i222.5 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.5
  %63 = load i8, i8* %arrayidx.i222.5, align 1, !tbaa !35
  %conv12.i223.5 = zext i8 %63 to i64
  %or.i224.5 = or i64 %shl.i218.5, %conv12.i223.5
  %shl.i218.6 = shl i64 %or.i224.5, 8
  %sub.i221.6 = add i64 %pos.0318, 17
  %arrayidx.i222.6 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.6
  %64 = load i8, i8* %arrayidx.i222.6, align 1, !tbaa !35
  %conv12.i223.6 = zext i8 %64 to i64
  %or.i224.6 = or i64 %shl.i218.6, %conv12.i223.6
  %shl.i218.7 = shl i64 %or.i224.6, 8
  %sub.i221.7 = add i64 %pos.0318, 16
  %arrayidx.i222.7 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %sub.i221.7
  %65 = load i8, i8* %arrayidx.i222.7, align 1, !tbaa !35
  %conv12.i223.7 = zext i8 %65 to i64
  %or.i224.7 = or i64 %shl.i218.7, %conv12.i223.7
  %add79 = add i64 %or.i224.7, %add64
  %cmp80 = icmp ugt i64 %add79, sub (i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_end to i8 addrspace(1)*) to i8*) to i64), i64 ptrtoint (i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*) to i64))
  br i1 %cmp80, label %if.then81, label %if.end91

if.then66:                                        ; preds = %for.cond.i234.preheader
  %printf_alloc_fn122 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %66 = icmp eq i8 addrspace(1)* %printf_alloc_fn122, null
  br i1 %66, label %68, label %67

; <label>:67:                                     ; preds = %if.then66
  %PrintBuffIdCast124 = bitcast i8 addrspace(1)* %printf_alloc_fn122 to i32 addrspace(1)*
  store i32 6, i32 addrspace(1)* %PrintBuffIdCast124, align 4
  br label %68

; <label>:68:                                     ; preds = %67, %if.then66
  call void @exit(i32 1) #50
  unreachable

if.then81:                                        ; preds = %for.cond.i217.preheader
  %printf_alloc_fn126 = call i8 addrspace(1)* @__printf_alloc(i32 4)
  %69 = icmp eq i8 addrspace(1)* %printf_alloc_fn126, null
  br i1 %69, label %71, label %70

; <label>:70:                                     ; preds = %if.then81
  %PrintBuffIdCast128 = bitcast i8 addrspace(1)* %printf_alloc_fn126 to i32 addrspace(1)*
  store i32 7, i32 addrspace(1)* %PrintBuffIdCast128, align 4
  br label %71

; <label>:71:                                     ; preds = %70, %if.then81
  call void @exit(i32 1) #50
  unreachable

if.end91:                                         ; preds = %for.cond.i217.preheader
  %add.ptr92 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %add64
  store i64 %.cast.i.i164, i64 addrspace(5)* %30, align 8, !tbaa !29
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %31)
  %cmp.i.i.i.i.i166 = icmp ne i8* %add.ptr92, null
  %cmp.i.i.i.i167 = icmp eq i64 %or.i224.7, 0
  %or.cond = or i1 %cmp.i.i.i.i.i166, %cmp.i.i.i.i167
  br i1 %or.cond, label %if.end.i.i.i.i174, label %if.then.i.i.i.i169

if.then.i.i.i.i169:                               ; preds = %if.end91
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.11, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i174:                                ; preds = %if.end91
  store i64 %or.i224.7, i64 addrspace(5)* %__dnew.i.i.i.i156, align 8, !tbaa !31
  %cmp3.i.i.i.i173 = icmp ugt i64 %or.i224.7, 15
  br i1 %cmp3.i.i.i.i173, label %if.else.i.i.i.i.i.i187.thread, label %if.end6.i.i.i.i184

if.else.i.i.i.i.i.i187.thread:                    ; preds = %if.end.i.i.i.i174
  %call5.i.i.i.i175 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* %1, i64* dereferenceable(8) %32, i64 0) #43
  store i8* %call5.i.i.i.i175, i8* addrspace(5)* %_M_p.i8.i.i.i.i176, align 8, !tbaa !33
  %72 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i156, align 8, !tbaa !31
  store i64 %72, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i177, align 8, !tbaa !35
  br label %if.end.i.i.i.i.i.i.i188

if.end6.i.i.i.i184:                               ; preds = %if.end.i.i.i.i174
  switch i64 %or.i224.7, label %if.end.i.i.i.i.i.i.i188 [
    i64 1, label %if.then.i.i.i.i.i.i185
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193
  ]

if.then.i.i.i.i.i.i185:                           ; preds = %if.end6.i.i.i.i184
  %73 = load i8, i8* %add.ptr92, align 1, !tbaa !35
  store i8 %73, i8* %35, align 1, !tbaa !35
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193

if.end.i.i.i.i.i.i.i188:                          ; preds = %if.end6.i.i.i.i184, %if.else.i.i.i.i.i.i187.thread
  %74 = phi i8* [ %call5.i.i.i.i175, %if.else.i.i.i.i.i.i187.thread ], [ %35, %if.end6.i.i.i.i184 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %add.ptr92, i64 %or.i224.7, i1 false) #47
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193: ; preds = %if.end.i.i.i.i.i.i.i188, %if.then.i.i.i.i.i.i185, %if.end6.i.i.i.i184
  %75 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i156, align 8, !tbaa !31
  store i64 %75, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i190, align 8, !tbaa !36
  %76 = load i8*, i8* addrspace(5)* %_M_p.i8.i.i.i.i176, align 8, !tbaa !33
  %arrayidx.i.i.i.i.i192 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8 0, i8* %arrayidx.i.i.i.i.i192, align 1, !tbaa !35
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %31)
  %call95 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmPKc(%"class.std::__cxx11::basic_string"* %1, i64 0, i64 23, i8* getelementptr ([24 x i8], [24 x i8]* addrspacecast ([24 x i8] addrspace(4)* @.str.33 to [24 x i8]*), i64 0, i64 0)) #43
  %cmp96 = icmp eq i32 %call95, 0
  br i1 %cmp96, label %if.then97, label %cleanup

if.then97:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193
  %add.ptr98 = getelementptr inbounds i8, i8* addrspacecast (i8 addrspace(1)* bitcast ([0 x i8*] addrspace(1)* @_binary_kernel_bundle_start to i8 addrspace(1)*) to i8*), i64 %or.i207.7
  %77 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %pDev.i, align 8, !tbaa !60
  %78 = inttoptr i64 %or.i241.7 to i8*
  %79 = bitcast %"class.Kalmar::KalmarDevice"* %77 to i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)***
  %vtable = load i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)**, i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*** %79, align 8, !tbaa !37
  %vfn = getelementptr inbounds i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*, i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)** %vtable, i64 12
  %80 = load i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)*, i1 (%"class.Kalmar::KalmarDevice"*, i8*, i8*)** %vfn, align 8
  %call100 = call zeroext i1 %80(%"class.Kalmar::KalmarDevice"* %77, i8* %78, i8* %add.ptr98) #43
  br i1 %call100, label %if.then101, label %cleanup

if.then101:                                       ; preds = %if.then97
  %81 = ptrtoint i8* %add.ptr98 to i64
  store i64 %or.i241.7, i64* %kernel_size, align 8, !tbaa !31
  %82 = bitcast i8** %kernel_source to i64*
  store i64 %81, i64* %82, align 8, !tbaa !27
  %83 = load i8*, i8* addrspace(5)* %_M_p.i8.i.i.i.i176, align 8, !tbaa !33
  %84 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i132 to i8*
  %cmp.i.i.i142 = icmp eq i8* %83, %84
  br i1 %cmp.i.i.i142, label %for.end, label %if.then.i.i147

if.then.i.i147:                                   ; preds = %if.then101
  call void @_ZdlPv(i8* %83) #45
  br label %for.end

cleanup:                                          ; preds = %if.then97, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcmRKS3_.exit193
  %85 = load i8*, i8* addrspace(5)* %_M_p.i8.i.i.i.i176, align 8, !tbaa !33
  %cmp.i.i.i133 = icmp eq i8* %85, %34
  br i1 %cmp.i.i.i133, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139, label %if.then.i.i138

if.then.i.i138:                                   ; preds = %cleanup
  call void @_ZdlPv(i8* %85) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139: ; preds = %if.then.i.i138, %cleanup
  %inc = add nuw i64 %storemerge319, 1
  %cmp33 = icmp ult i64 %inc, %or.i.7
  br i1 %cmp33, label %for.body, label %for.end

for.end:                                          ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139, %if.then.i.i147, %if.then101, %for.body.i.preheader
  %FoundCompatibleKernel.0 = phi i1 [ true, %if.then101 ], [ true, %if.then.i.i147 ], [ false, %for.body.i.preheader ], [ false, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit139 ]
  %86 = load i8*, i8* addrspace(5)* %_M_p.i.i.i.i.i.pre-phi, align 8, !tbaa !33
  %87 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %MagicStr, i32 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon addrspace(5)* %87 to i8 addrspace(5)*
  %88 = addrspacecast i8 addrspace(5)* %arraydecay.i.i.i.i to i8*
  %cmp.i.i.i = icmp eq i8* %86, %88
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.end
  call void @_ZdlPv(i8* %86) #45
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %for.end
  ret i1 %FoundCompatibleKernel.0
}

declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEmmPKc(%"class.std::__cxx11::basic_string"*, i64, i64, i8*) local_unnamed_addr #3

define i8* @_ZN6Kalmar5CLAMP12CreateKernelENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPNS_11KalmarQueueE(%"class.std::__cxx11::basic_string" addrspace(5)* nocapture readonly %s, %"class.Kalmar::KalmarQueue"* %pQueue) local_unnamed_addr #7 {
entry:
  %pDev.i = getelementptr inbounds %"class.Kalmar::KalmarQueue", %"class.Kalmar::KalmarQueue"* %pQueue, i64 0, i32 1
  %0 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %pDev.i, align 8, !tbaa !60
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string" addrspace(5)* %s, i32 0, i32 0, i32 0
  %1 = load i8*, i8* addrspace(5)* %_M_p.i.i, align 8, !tbaa !33
  %2 = bitcast %"class.Kalmar::KalmarDevice"* %0 to i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)***
  %vtable = load i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)**, i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)*** %2, align 8, !tbaa !37
  %vfn = getelementptr inbounds i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)*, i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)** %vtable, i64 11
  %3 = load i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)*, i8* (%"class.Kalmar::KalmarDevice"*, i8*, %"class.Kalmar::KalmarQueue"*)** %vfn, align 8
  %call2 = tail call i8* %3(%"class.Kalmar::KalmarDevice"* %0, i8* %1, %"class.Kalmar::KalmarQueue"* %pQueue) #43
  ret i8* %call2
}

define void @_ZN6Kalmar5CLAMP7PushArgEPvimPKv(i8* %k_, i32 %idx, i64 %sz, i8* %s) local_unnamed_addr #7 {
entry:
  %call = tail call %struct.RuntimeImpl* @_ZN6Kalmar5CLAMP16GetOrInitRuntimeEv() #43
  %m_PushArgImpl = getelementptr inbounds %struct.RuntimeImpl, %struct.RuntimeImpl* %call, i64 0, i32 2
  %0 = load i8* (i8*, i32, i64, i8*)*, i8* (i8*, i32, i64, i8*)** %m_PushArgImpl, align 8, !tbaa !56
  %call1 = tail call i8* %0(i8* %k_, i32 %idx, i64 %sz, i8* %s) #43
  ret void
}

define void @_ZN6Kalmar5CLAMP10PushArgPtrEPvimPKv(i8* %k_, i32 %idx, i64 %sz, i8* %s) local_unnamed_addr #7 {
entry:
  %call = tail call %struct.RuntimeImpl* @_ZN6Kalmar5CLAMP16GetOrInitRuntimeEv() #43
  %m_PushArgPtrImpl = getelementptr inbounds %struct.RuntimeImpl, %struct.RuntimeImpl* %call, i64 0, i32 3
  %0 = load i8* (i8*, i32, i64, i8*)*, i8* (i8*, i32, i64, i8*)** %m_PushArgPtrImpl, align 8, !tbaa !57
  %call1 = tail call i8* %0(i8* %k_, i32 %idx, i64 %sz, i8* %s) #43
  ret void
}

define %"class.Kalmar::KalmarContext"* @_ZN6Kalmar10getContextEv() local_unnamed_addr #7 {
entry:
  %call = tail call %struct.RuntimeImpl* @_ZN6Kalmar5CLAMP16GetOrInitRuntimeEv() #43
  %m_GetContextImpl = getelementptr inbounds %struct.RuntimeImpl, %struct.RuntimeImpl* %call, i64 0, i32 4
  %0 = load i8* ()*, i8* ()** %m_GetContextImpl, align 8, !tbaa !58
  %call1 = tail call i8* %0() #43
  %1 = bitcast i8* %call1 to %"class.Kalmar::KalmarContext"*
  ret %"class.Kalmar::KalmarContext"* %1
}

; Function Attrs: norecurse nounwind readnone
define void @__hcc_shared_library_init() local_unnamed_addr #0 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
define float @__gnu_h2f_ieee(i16 zeroext %h) local_unnamed_addr #17 {
entry:
  %conv = zext i16 %h to i32
  %shl.i = shl nuw nsw i32 %conv, 13
  %add.i = add nuw i32 %shl.i, 1879048192
  %and.i = and i32 %add.i, -1879056384
  %.cast.i.i = bitcast i32 %and.i to float
  %mul.i = fmul float %.cast.i.i, 0x46F0000000000000
  %.cast.i7.i = bitcast float %mul.i to i32
  %add2.i = add i32 %.cast.i7.i, 939524096
  %and3.i = and i32 %conv, 32767
  %cmp.i = icmp eq i32 %and3.i, 0
  %cond.i = select i1 %cmp.i, i32 %and.i, i32 %add2.i
  %.cast.i6.i = bitcast i32 %cond.i to float
  %mul5.i = fmul float %.cast.i6.i, 0x38F0000000000000
  ret float %mul5.i
}

; Function Attrs: nounwind readnone
define zeroext i16 @__gnu_f2h_ieee(float %f) local_unnamed_addr #17 {
entry:
  %.cast.i.i = bitcast float %f to i32
  %shr.i = lshr i32 %.cast.i.i, 23
  %and.i = and i32 %shr.i, 255
  %add.i = add nsw i32 %and.i, -112
  %shr1.i = lshr i32 %.cast.i.i, 11
  %and2.i = and i32 %shr1.i, 4094
  %and3.i = and i32 %.cast.i.i, 4095
  %cmp.i = icmp ne i32 %and3.i, 0
  %conv.i = zext i1 %cmp.i to i32
  %or.i = or i32 %and2.i, %conv.i
  %cmp4.i = icmp eq i32 %or.i, 0
  %or5.i = select i1 %cmp4.i, i32 31744, i32 32256
  %shl.i = shl nsw i32 %add.i, 12
  %or6.i = or i32 %shl.i, %or.i
  %shr7.i = lshr i32 %.cast.i.i, 16
  %and8.i = and i32 %shr7.i, 32768
  %sub9.i = sub nsw i32 113, %and.i
  %0 = icmp sgt i32 %sub9.i, 0
  %.sroa.speculated15 = select i1 %0, i32 %sub9.i, i32 0
  %1 = icmp slt i32 %.sroa.speculated15, 13
  %.sroa.speculated = select i1 %1, i32 %.sroa.speculated15, i32 13
  %or11.i = or i32 %or.i, 4096
  %shr12.i = lshr i32 %or11.i, %.sroa.speculated
  %shl13.i = shl i32 %shr12.i, %.sroa.speculated
  %cmp15.i = icmp ne i32 %shl13.i, %or11.i
  %conv16.i = zext i1 %cmp15.i to i32
  %or17.i = or i32 %shr12.i, %conv16.i
  %cmp18.i = icmp slt i32 %add.i, 1
  %cond19.i = select i1 %cmp18.i, i32 %or17.i, i32 %or6.i
  %shr20.i = lshr i32 %cond19.i, 2
  %and21.i = and i32 %cond19.i, 7
  %cmp22.i = icmp eq i32 %and21.i, 3
  %cmp25.i = icmp ugt i32 %and21.i, 5
  %or2740.i = or i1 %cmp22.i, %cmp25.i
  %or27.i = zext i1 %or2740.i to i32
  %add28.i = add nuw nsw i32 %shr20.i, %or27.i
  %cmp29.i = icmp sgt i32 %add.i, 30
  %cond33.i = select i1 %cmp29.i, i32 31744, i32 %add28.i
  %cmp34.i = icmp eq i32 %add.i, 143
  %cond38.i = select i1 %cmp34.i, i32 %or5.i, i32 %cond33.i
  %or39.i = or i32 %cond38.i, %and8.i
  %conv = trunc i32 %or39.i to i16
  ret i16 %conv
}

; Function Attrs: norecurse
define i32 @main() local_unnamed_addr #18 {
entry:
  %ref.tmp.i84 = alloca %"class.std::shared_ptr.8", align 8, addrspace(5)
  %agg.tmp.i.i.i.i.i.i69 = alloca %"class.std::thread::id", align 8, addrspace(5)
  %agg.tmp4.i.i.i.i.i.i = alloca %"class.std::thread::id", align 8, addrspace(5)
  %agg.tmp.i.i17 = alloca %"class.std::shared_ptr.17", align 8, addrspace(5)
  %ref.tmp.i18 = alloca %"class.hc::accelerator_view", align 8, addrspace(5)
  %agg.tmp.i.i3 = alloca %"class.std::shared_ptr.17", align 8, addrspace(5)
  %agg.tmp.i12.i.i.i.i = alloca %"class.__gnu_cxx::__normal_iterator", align 8, addrspace(5)
  %agg.tmp1.i.i.i.i.i = alloca %"class.__gnu_cxx::__normal_iterator", align 8, addrspace(5)
  %agg.tmp2.i13.i.i.i.i = alloca %"struct.__gnu_cxx::__ops::_Iter_pred", align 8, addrspace(5)
  %agg.tmp3.i.i.i.i.i = alloca %"struct.std::less", align 1, addrspace(5)
  %__dnew.i.i.i.i.i.i = alloca i64, align 8, addrspace(5)
  %agg.tmp.i.i = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %__dnew.i.i.i.i.i = alloca i64, align 8, addrspace(5)
  %ref.tmp.i = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp = alloca %"class.hc::completion_future", align 8, addrspace(5)
  %0 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %0)
  %1 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i to %"class.std::__cxx11::basic_string.10"*
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %1, i64 0, i32 2
  %.cast.i.i.i = ptrtoint %union.anon* %2 to i64
  %3 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i to i64 addrspace(5)*
  store i64 %.cast.i.i.i, i64 addrspace(5)* %3, align 8, !tbaa !64
  %4 = bitcast %union.anon* %2 to i32*
  br i1 icmp eq (i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*), i32* null), label %cond.end.i.i, label %cond.true.i.i

cond.true.i.i:                                    ; preds = %entry
  %call.i.i.i = call i64 @wcslen(i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*)) #51
  %add.ptr.i.i202 = getelementptr inbounds [8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 %call.i.i.i
  %add.ptr.i.i = addrspacecast i32 addrspace(4)* %add.ptr.i.i202 to i32*
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.true.i.i, %entry
  %cond.i.i = phi i32* [ %add.ptr.i.i, %cond.true.i.i ], [ inttoptr (i64 -4 to i32*), %entry ]
  %5 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %5)
  %6 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i to i64*
  %cmp.i.i.i.i.i = icmp eq i32* %cond.i.i, addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*)
  %or.cond = or i1 %cmp.i.i.i.i.i, icmp ne (i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*), i32* null)
  br i1 %or.cond, label %if.end.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %cond.end.i.i
  call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr ([42 x i8], [42 x i8]* addrspacecast ([42 x i8] addrspace(4)* @.str.3.2 to [42 x i8]*), i64 0, i64 0)) #46
  unreachable

if.end.i.i.i.i.i:                                 ; preds = %cond.end.i.i
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i = ptrtoint i32* %cond.i.i to i64
  %sub.ptr.sub.i.i.i.i.i.i.i = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i, ptrtoint (i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*) to i64)
  %sub.ptr.div.i.i.i.i.i.i.i = ashr exact i64 %sub.ptr.sub.i.i.i.i.i.i.i, 2
  store i64 %sub.ptr.div.i.i.i.i.i.i.i, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i.i = icmp ugt i64 %sub.ptr.div.i.i.i.i.i.i.i, 3
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge

if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge:     ; preds = %if.end.i.i.i.i.i
  %.pre210 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i, i32 0, i32 0, i32 0
  br label %if.end6.i.i.i.i.i

if.then4.i.i.i.i.i:                               ; preds = %if.end.i.i.i.i.i
  %call5.i.i.i.i.i = call i32* @_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_createERmm(%"class.std::__cxx11::basic_string.10"* %1, i64* dereferenceable(8) %6, i64 0) #43
  %_M_p.i8.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i, i32 0, i32 0, i32 0
  store i32* %call5.i.i.i.i.i, i32* addrspace(5)* %_M_p.i8.i.i.i.i.i, align 8, !tbaa !66
  %7 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i, i32 0, i32 2, i32 0
  store i64 %7, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end6.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.then4.i.i.i.i.i, %if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge
  %_M_p.i.i.i.i.i.i.pre-phi = phi i32* addrspace(5)* [ %.pre210, %if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge ], [ %_M_p.i8.i.i.i.i.i, %if.then4.i.i.i.i.i ]
  %8 = phi i32* [ %4, %if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge ], [ %call5.i.i.i.i.i, %if.then4.i.i.i.i.i ]
  %9 = phi i64 [ %sub.ptr.div.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.if.end6.i.i.i.i.i_crit_edge ], [ %7, %if.then4.i.i.i.i.i ]
  switch i64 %sub.ptr.div.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %10 = load i32, i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*), align 4, !tbaa !68
  store i32 %10, i32* %8, align 4, !tbaa !68
  br label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i
  %call.i.i.i.i.i.i.i.i = call i32* @wmemcpy(i32* %8, i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*), i64 %sub.ptr.div.i.i.i.i.i.i.i) #45
  %.pre = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i, align 8, !tbaa !31
  %.pre204 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i.pre-phi, align 8, !tbaa !66
  br label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i

_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %11 = phi i32* [ %8, %if.end6.i.i.i.i.i ], [ %.pre204, %if.end.i.i.i.i.i.i.i.i ], [ %8, %if.then.i.i.i.i.i.i.i ]
  %12 = phi i64 [ %9, %if.end6.i.i.i.i.i ], [ %.pre, %if.end.i.i.i.i.i.i.i.i ], [ %9, %if.then.i.i.i.i.i.i.i ]
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i, i32 0, i32 1
  store i64 %12, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !70
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i32, i32* %11, i64 %12
  store i32 0, i32* %arrayidx.i.i.i.i.i.i, align 4, !tbaa !68
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %5)
  %13 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %13)
  %14 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i to %"class.std::__cxx11::basic_string.10"*
  %call.i.i = call %"class.Kalmar::KalmarContext"* @_ZN6Kalmar10getContextEv() #43
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %14, i64 0, i32 2
  %.cast.i.i.i.i = ptrtoint %union.anon* %15 to i64
  %16 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i to i64 addrspace(5)*
  store i64 %.cast.i.i.i.i, i64 addrspace(5)* %16, align 8, !tbaa !64
  %17 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i.pre-phi, align 8, !tbaa !66
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %1, i64 0, i32 1
  %18 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !70
  %19 = bitcast i64 addrspace(5)* %__dnew.i.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %19)
  %20 = addrspacecast i64 addrspace(5)* %__dnew.i.i.i.i.i.i to i64*
  %cmp.i.i.i.i.i.i6.i = icmp ne i32* %17, null
  %cmp.i.i.i.i.i.i = icmp eq i64 %18, 0
  %or.cond201 = or i1 %cmp.i.i.i.i.i.i6.i, %cmp.i.i.i.i.i.i
  %21 = bitcast %union.anon* %15 to i32*
  br i1 %or.cond201, label %if.end.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i
  call void @_ZSt19__throw_logic_errorPKc(i8* addrspacecast (i8 addrspace(4)* getelementptr inbounds ([42 x i8], [42 x i8] addrspace(4)* @.str.3.2, i64 0, i64 0) to i8*)) #46
  unreachable

if.end.i.i.i.i.i.i:                               ; preds = %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2EPKwRKS3_.exit.i
  %add.ptr.i.i.i.idx = shl nuw i64 %18, 2
  %sub.ptr.div.i.i.i.i.i.i.i.i = ashr exact i64 %add.ptr.i.i.i.idx, 2
  store i64 %sub.ptr.div.i.i.i.i.i.i.i.i, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %cmp3.i.i.i.i.i.i = icmp ugt i64 %sub.ptr.div.i.i.i.i.i.i.i.i, 3
  br i1 %cmp3.i.i.i.i.i.i, label %if.then4.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge

if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge: ; preds = %if.end.i.i.i.i.i.i
  %.pre211 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i, i32 0, i32 0, i32 0
  br label %if.end6.i.i.i.i.i.i

if.then4.i.i.i.i.i.i:                             ; preds = %if.end.i.i.i.i.i.i
  %call5.i.i.i.i.i.i = call i32* @_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_createERmm(%"class.std::__cxx11::basic_string.10"* %14, i64* dereferenceable(8) %20, i64 0) #43
  %_M_p.i8.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i, i32 0, i32 0, i32 0
  store i32* %call5.i.i.i.i.i.i, i32* addrspace(5)* %_M_p.i8.i.i.i.i.i.i, align 8, !tbaa !66
  %22 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %_M_allocated_capacity.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i, i32 0, i32 2, i32 0
  store i64 %22, i64 addrspace(5)* %_M_allocated_capacity.i.i.i.i.i.i.i, align 8, !tbaa !35
  br label %if.end6.i.i.i.i.i.i

if.end6.i.i.i.i.i.i:                              ; preds = %if.then4.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge
  %_M_p.i.i.i.i.i.i7.i.pre-phi = phi i32* addrspace(5)* [ %.pre211, %if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge ], [ %_M_p.i8.i.i.i.i.i.i, %if.then4.i.i.i.i.i.i ]
  %23 = phi i32* [ %21, %if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge ], [ %call5.i.i.i.i.i.i, %if.then4.i.i.i.i.i.i ]
  %24 = phi i64 [ %sub.ptr.div.i.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.if.end6.i.i.i.i.i.i_crit_edge ], [ %22, %if.then4.i.i.i.i.i.i ]
  switch i64 %sub.ptr.div.i.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i
  ]

if.then.i.i.i.i.i.i.i.i:                          ; preds = %if.end6.i.i.i.i.i.i
  %25 = load i32, i32* %17, align 4, !tbaa !68
  store i32 %25, i32* %23, align 4, !tbaa !68
  br label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end6.i.i.i.i.i.i
  %call.i.i.i.i.i.i.i.i.i = call i32* @wmemcpy(i32* %23, i32* %17, i64 %sub.ptr.div.i.i.i.i.i.i.i.i) #45
  %.pre205 = load i64, i64 addrspace(5)* %__dnew.i.i.i.i.i.i, align 8, !tbaa !31
  %.pre206 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i7.i.pre-phi, align 8, !tbaa !66
  br label %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i

_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i: ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i
  %26 = phi i32* [ %23, %if.end6.i.i.i.i.i.i ], [ %.pre206, %if.end.i.i.i.i.i.i.i.i.i ], [ %23, %if.then.i.i.i.i.i.i.i.i ]
  %27 = phi i64 [ %24, %if.end6.i.i.i.i.i.i ], [ %.pre205, %if.end.i.i.i.i.i.i.i.i.i ], [ %24, %if.then.i.i.i.i.i.i.i.i ]
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i, i32 0, i32 1
  store i64 %27, i64 addrspace(5)* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !70
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i32, i32* %26, i64 %27
  store i32 0, i32* %arrayidx.i.i.i.i.i.i.i, align 4, !tbaa !68
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %19)
  %call.i.i.i.i = call i32 @_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEPKw(%"class.std::__cxx11::basic_string.10"* nonnull %14, i32* addrspacecast (i32 addrspace(4)* getelementptr inbounds ([8 x i32], [8 x i32] addrspace(4)* @.str.2.1, i64 0, i64 0) to i32*)) #43
  %cmp.i.i.i12.i = icmp eq i32 %call.i.i.i.i, 0
  br i1 %cmp.i.i.i12.i, label %if.then.i.i13.i, label %lor.lhs.false.i.i.i

lor.lhs.false.i.i.i:                              ; preds = %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i
  %call.i19.i.i.i = call i32 @_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEPKw(%"class.std::__cxx11::basic_string.10"* nonnull %14, i32* getelementptr ([1 x i32], [1 x i32]* addrspacecast ([1 x i32] addrspace(4)* @.str.4.3 to [1 x i32]*), i64 0, i64 0)) #43
  %cmp.i20.i.i.i = icmp eq i32 %call.i19.i.i.i, 0
  br i1 %cmp.i20.i.i.i, label %if.then.i.i13.i, label %if.end.i.i.i

if.then.i.i13.i:                                  ; preds = %lor.lhs.false.i.i.i, %_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEC2ERKS4_.exit.i.i
  %def.i.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 1
  %28 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %def.i.i.i.i, align 8, !tbaa !71
  %tobool.i.i.i.i = icmp eq %"class.Kalmar::KalmarDevice"* %28, null
  %29 = ptrtoint %"class.Kalmar::KalmarDevice"* %28 to i64
  br i1 %tobool.i.i.i.i, label %if.then.i.i.i.i, label %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i.i13.i
  %Devices.i.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 2
  %_M_finish.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 2, i32 0, i32 0, i32 1
  %30 = bitcast %"class.Kalmar::KalmarDevice"*** %_M_finish.i.i.i.i.i to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !74
  %32 = bitcast %"class.std::vector"* %Devices.i.i.i.i to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !77
  %sub.ptr.sub.i.i.i.i.i = sub i64 %31, %33
  %sub.ptr.div.i.i.i.i.i = ashr exact i64 %sub.ptr.sub.i.i.i.i.i, 3
  %cmp.i21.i.i.i = icmp ult i64 %sub.ptr.div.i.i.i.i.i, 2
  br i1 %cmp.i21.i.i.i, label %if.then2.i.i.i.i, label %if.end.i.i.i.i

if.then2.i.i.i.i:                                 ; preds = %if.then.i.i.i.i
  %34 = load %struct._IO_FILE*, %struct._IO_FILE* addrspace(1)* @stderr, align 8, !tbaa !27
  %call3.i.i.i.i = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.5.4 to [54 x i8]*), i64 0, i64 0)) #43
  call void @exit(i32 -1) #50
  unreachable

if.end.i.i.i.i:                                   ; preds = %if.then.i.i.i.i
  %35 = inttoptr i64 %33 to %"class.Kalmar::KalmarDevice"**
  %add.ptr.i.i.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %35, i64 1
  %36 = bitcast %"class.Kalmar::KalmarDevice"** %add.ptr.i.i.i.i.i to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !27
  %38 = bitcast %"class.Kalmar::KalmarDevice"** %def.i.i.i.i to i64*
  store i64 %37, i64* %38, align 8, !tbaa !71
  br label %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i

if.end.i.i.i:                                     ; preds = %lor.lhs.false.i.i.i
  %Devices.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 2
  %39 = bitcast %"class.std::vector"* %Devices.i.i.i to i64*
  %40 = load i64, i64* %39, align 8, !tbaa !27
  %_M_finish.i.i24.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 2, i32 0, i32 0, i32 1
  %41 = bitcast %"class.Kalmar::KalmarDevice"*** %_M_finish.i.i24.i.i.i to i64*
  %42 = load i64, i64* %41, align 8, !tbaa !27
  %43 = ptrtoint %"class.std::__cxx11::basic_string.10"* %14 to i64
  %44 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %agg.tmp.i12.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %44)
  %45 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %agg.tmp1.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %45)
  %46 = bitcast %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %agg.tmp2.i13.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %46)
  %47 = getelementptr inbounds %"struct.std::less", %"struct.std::less" addrspace(5)* %agg.tmp3.i.i.i.i.i, i32 0, i32 0
  call void @llvm.lifetime.start.p5i8(i64 1, i8 addrspace(5)* %47)
  %48 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %agg.tmp.i12.i.i.i.i to i64 addrspace(5)*
  store i64 %40, i64 addrspace(5)* %48, align 8, !tbaa !27
  %49 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %agg.tmp1.i.i.i.i.i to i64 addrspace(5)*
  store i64 %42, i64 addrspace(5)* %49, align 8, !tbaa !27
  %50 = bitcast %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %agg.tmp2.i13.i.i.i.i to i64 addrspace(5)*
  store i64 %43, i64 addrspace(5)* %50, align 8, !tbaa !27
  %call.i.i.i.i.i = call %"class.Kalmar::KalmarDevice"** @_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPPN6Kalmar12KalmarDeviceESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZNS2_13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKS3_E_EEET_SN_SN_T0_St26random_access_iterator_tag(%"class.__gnu_cxx::__normal_iterator" addrspace(5)* byval align 8 %agg.tmp.i12.i.i.i.i, %"class.__gnu_cxx::__normal_iterator" addrspace(5)* byval align 8 %agg.tmp1.i.i.i.i.i, %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* byval align 8 %agg.tmp2.i13.i.i.i.i, %"struct.std::less" addrspace(5)* byval align 1 %agg.tmp3.i.i.i.i.i) #43
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %44)
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %45)
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %46)
  call void @llvm.lifetime.end.p5i8(i64 1, i8 addrspace(5)* %47)
  %51 = load i64, i64* %41, align 8, !tbaa !27
  %52 = inttoptr i64 %51 to %"class.Kalmar::KalmarDevice"**
  %cmp.i47.i.i.i = icmp eq %"class.Kalmar::KalmarDevice"** %call.i.i.i.i.i, %52
  br i1 %cmp.i47.i.i.i, label %if.else.i.i.i, label %if.end.i.i.i._ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i_crit_edge

if.end.i.i.i._ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i_crit_edge: ; preds = %if.end.i.i.i
  %retval.i.i.i.sroa.0.0.in.phi.trans.insert = bitcast %"class.Kalmar::KalmarDevice"** %call.i.i.i.i.i to i64*
  %retval.i.i.i.sroa.0.0.pre = load i64, i64* %retval.i.i.i.sroa.0.0.in.phi.trans.insert, align 8, !tbaa !27
  br label %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i

if.else.i.i.i:                                    ; preds = %if.end.i.i.i
  %def.i26.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i, i64 0, i32 1
  %53 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %def.i26.i.i.i, align 8, !tbaa !71
  %tobool.i27.i.i.i = icmp eq %"class.Kalmar::KalmarDevice"* %53, null
  %54 = ptrtoint %"class.Kalmar::KalmarDevice"* %53 to i64
  br i1 %tobool.i27.i.i.i, label %if.then.i33.i.i.i, label %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i

if.then.i33.i.i.i:                                ; preds = %if.else.i.i.i
  %55 = load i64, i64* %39, align 8, !tbaa !77
  %sub.ptr.sub.i.i30.i.i.i = sub i64 %51, %55
  %sub.ptr.div.i.i31.i.i.i = ashr exact i64 %sub.ptr.sub.i.i30.i.i.i, 3
  %cmp.i32.i.i.i = icmp ult i64 %sub.ptr.div.i.i31.i.i.i, 2
  br i1 %cmp.i32.i.i.i, label %if.then2.i35.i.i.i, label %if.end.i38.i.i.i

if.then2.i35.i.i.i:                               ; preds = %if.then.i33.i.i.i
  %56 = load %struct._IO_FILE*, %struct._IO_FILE* addrspace(1)* @stderr, align 8, !tbaa !27
  %call3.i34.i.i.i = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.5.4 to [54 x i8]*), i64 0, i64 0)) #43
  call void @exit(i32 -1) #50
  unreachable

if.end.i38.i.i.i:                                 ; preds = %if.then.i33.i.i.i
  %57 = inttoptr i64 %55 to %"class.Kalmar::KalmarDevice"**
  %add.ptr.i.i37.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %57, i64 1
  %58 = bitcast %"class.Kalmar::KalmarDevice"** %add.ptr.i.i37.i.i.i to i64*
  %59 = load i64, i64* %58, align 8, !tbaa !27
  %60 = bitcast %"class.Kalmar::KalmarDevice"** %def.i26.i.i.i to i64*
  store i64 %59, i64* %60, align 8, !tbaa !71
  br label %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i

_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i: ; preds = %if.end.i38.i.i.i, %if.else.i.i.i, %if.end.i.i.i._ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i_crit_edge, %if.end.i.i.i.i, %if.then.i.i13.i
  %retval.i.i.i.sroa.0.0 = phi i64 [ %37, %if.end.i.i.i.i ], [ %29, %if.then.i.i13.i ], [ %retval.i.i.i.sroa.0.0.pre, %if.end.i.i.i._ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i_crit_edge ], [ %59, %if.end.i38.i.i.i ], [ %54, %if.else.i.i.i ]
  %61 = inttoptr i64 %retval.i.i.i.sroa.0.0 to %"class.Kalmar::KalmarDevice"*
  %62 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i7.i.pre-phi, align 8, !tbaa !66
  %63 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %agg.tmp.i.i, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i = bitcast %union.anon addrspace(5)* %63 to i32 addrspace(5)*
  %64 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i to i32*
  %cmp.i.i.i.i15.i = icmp eq i32* %62, %64
  br i1 %cmp.i.i.i.i15.i, label %_ZN2hc11acceleratorC2ERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i, label %if.then.i.i7.i.i

if.then.i.i7.i.i:                                 ; preds = %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i
  %.cast.i.i.i.i.i.i17.i = bitcast i32* %62 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i17.i) #45
  br label %_ZN2hc11acceleratorC2ERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i

_ZN2hc11acceleratorC2ERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i: ; preds = %if.then.i.i7.i.i, %_ZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i.i
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %13)
  %65 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i.pre-phi, align 8, !tbaa !66
  %66 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i, i32 0, i32 2
  %arraydecay.i.i.i.i.i = bitcast %union.anon addrspace(5)* %66 to i32 addrspace(5)*
  %67 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i to i32*
  %cmp.i.i.i.i = icmp eq i32* %65, %67
  br i1 %cmp.i.i.i.i, label %_ZN2hc11acceleratorC2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZN2hc11acceleratorC2ERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i
  %.cast.i.i.i.i.i.i = bitcast i32* %65 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i) #45
  br label %_ZN2hc11acceleratorC2Ev.exit

_ZN2hc11acceleratorC2Ev.exit:                     ; preds = %if.then.i.i.i, %_ZN2hc11acceleratorC2ERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE.exit.i
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %0)
  %68 = bitcast %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %68)
  %69 = addrspacecast %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i3 to %"class.std::shared_ptr.17"*
  call void @_ZN6Kalmar12KalmarDevice17get_default_queueEv(%"class.std::shared_ptr.17"* sret %69, %"class.Kalmar::KalmarDevice"* %61) #43, !noalias !78
  %70 = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i3, i32 0, i32 0, i32 0
  %71 = load %"class.Kalmar::KalmarQueue"*, %"class.Kalmar::KalmarQueue"* addrspace(5)* %70, align 8, !tbaa !81, !noalias !78
  %_M_pi2.i.i.i.i.i.i = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i3, i32 0, i32 0, i32 1, i32 0
  %72 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi2.i.i.i.i.i.i, align 8, !tbaa !84, !noalias !78
  %cmp.i.i.i.i.i.i7 = icmp eq %"class.std::_Sp_counted_base"* %72, null
  br i1 %cmp.i.i.i.i.i.i7, label %_ZNK2hc11accelerator16get_default_viewEv.exit.i, label %if.then.i.i.i.i.i.i8

if.then.i.i.i.i.i.i8:                             ; preds = %_ZN2hc11acceleratorC2Ev.exit
  %_M_use_count.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %72, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i, label %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i.thread

_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i.thread: ; preds = %if.then.i.i.i.i.i.i8
  %73 = load i32, i32* %_M_use_count.i.i.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  %add.i.i.i.i.i.i.i.i.i = add nsw i32 %73, 1
  store i32 %add.i.i.i.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  br label %if.then.i.i.i.i12

_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i: ; preds = %if.then.i.i.i.i.i.i8
  %74 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i.i.i, i32 1 acq_rel, !noalias !78
  %.pr.pre = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi2.i.i.i.i.i.i, align 8, !tbaa !84, !noalias !78
  %cmp.i.i.i.i11 = icmp eq %"class.std::_Sp_counted_base"* %.pr.pre, null
  br i1 %cmp.i.i.i.i11, label %_ZNK2hc11accelerator16get_default_viewEv.exit.i, label %if.then.i.i.i.i12

if.then.i.i.i.i12:                                ; preds = %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i.thread
  %.pr213 = phi %"class.std::_Sp_counted_base"* [ %72, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i.thread ], [ %.pr.pre, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i ]
  %_M_use_count.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr213, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i2.i.i, label %if.else.i.i.i.i.i.i

if.then.i.i.i.i2.i.i:                             ; preds = %if.then.i.i.i.i12
  %75 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i, i32 -1 acq_rel, !noalias !78
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i

if.else.i.i.i.i.i.i:                              ; preds = %if.then.i.i.i.i12
  %76 = load i32, i32* %_M_use_count.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  %add.i.i.i.i.i.i.i = add nsw i32 %76, -1
  store i32 %add.i.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i, %if.then.i.i.i.i2.i.i
  %storemerge.i.i.i.i.i.i = phi i32 [ %76, %if.else.i.i.i.i.i.i ], [ %75, %if.then.i.i.i.i2.i.i ]
  %cmp.i.i.i.i.i13 = icmp eq i32 %storemerge.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i13, label %if.then.i.i.i.i.i14, label %_ZNK2hc11accelerator16get_default_viewEv.exit.i

if.then.i.i.i.i.i14:                              ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i
  %77 = bitcast %"class.std::_Sp_counted_base"* %.pr213 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %77, align 8, !tbaa !37, !noalias !78
  %vfn.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i, i64 2
  %78 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i, align 8, !noalias !78
  call void %78(%"class.std::_Sp_counted_base"* nonnull %.pr213) #45, !noalias !78
  call void asm sideeffect "", "~{memory}"() #47, !noalias !78, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !noalias !78, !srcloc !86
  %_M_weak_count.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr213, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i, label %if.else.i10.i.i.i.i.i

if.then.i8.i.i.i.i.i:                             ; preds = %if.then.i.i.i.i.i14
  %79 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i, i32 -1 acq_rel, !noalias !78
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i

if.else.i10.i.i.i.i.i:                            ; preds = %if.then.i.i.i.i.i14
  %80 = load i32, i32* %_M_weak_count.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  %add.i.i9.i.i.i.i.i = add nsw i32 %80, -1
  store i32 %add.i.i9.i.i.i.i.i, i32* %_M_weak_count.i.i.i.i.i, align 4, !tbaa !22, !noalias !78
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i: ; preds = %if.else.i10.i.i.i.i.i, %if.then.i8.i.i.i.i.i
  %storemerge.i11.i.i.i.i.i = phi i32 [ %80, %if.else.i10.i.i.i.i.i ], [ %79, %if.then.i8.i.i.i.i.i ]
  %cmp3.i.i.i.i.i15 = icmp eq i32 %storemerge.i11.i.i.i.i.i, 1
  br i1 %cmp3.i.i.i.i.i15, label %if.then4.i.i.i.i.i16, label %_ZNK2hc11accelerator16get_default_viewEv.exit.i

if.then4.i.i.i.i.i16:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i
  %vtable5.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %77, align 8, !tbaa !37, !noalias !78
  %vfn6.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i, i64 3
  %81 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i, align 8, !noalias !78
  call void %81(%"class.std::_Sp_counted_base"* nonnull %.pr213) #45, !noalias !78
  br label %_ZNK2hc11accelerator16get_default_viewEv.exit.i

_ZNK2hc11accelerator16get_default_viewEv.exit.i:  ; preds = %if.then4.i.i.i.i.i16, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i, %_ZN2hc11acceleratorC2Ev.exit
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %68)
  %82 = bitcast %"class.Kalmar::KalmarQueue"* %71 to i1 (%"class.Kalmar::KalmarQueue"*)***
  %vtable.i.i = load i1 (%"class.Kalmar::KalmarQueue"*)**, i1 (%"class.Kalmar::KalmarQueue"*)*** %82, align 8, !tbaa !37
  %vfn.i.i = getelementptr inbounds i1 (%"class.Kalmar::KalmarQueue"*)*, i1 (%"class.Kalmar::KalmarQueue"*)** %vtable.i.i, i64 23
  %83 = load i1 (%"class.Kalmar::KalmarQueue"*)*, i1 (%"class.Kalmar::KalmarQueue"*)** %vfn.i.i, align 8
  %call2.i.i = call zeroext i1 %83(%"class.Kalmar::KalmarQueue"* %71) #43
  br i1 %cmp.i.i.i.i.i.i7, label %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit, label %if.then.i.i.i6.i

if.then.i.i.i6.i:                                 ; preds = %_ZNK2hc11accelerator16get_default_viewEv.exit.i
  %_M_use_count.i.i.i.i5.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %72, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i7.i, label %if.else.i.i.i.i.i9.i

if.then.i.i.i.i.i7.i:                             ; preds = %if.then.i.i.i6.i
  %84 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i5.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i12.i

if.else.i.i.i.i.i9.i:                             ; preds = %if.then.i.i.i6.i
  %85 = load i32, i32* %_M_use_count.i.i.i.i5.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i8.i = add nsw i32 %85, -1
  store i32 %add.i.i.i.i.i.i8.i, i32* %_M_use_count.i.i.i.i5.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i12.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i12.i: ; preds = %if.else.i.i.i.i.i9.i, %if.then.i.i.i.i.i7.i
  %storemerge.i.i.i.i.i10.i = phi i32 [ %85, %if.else.i.i.i.i.i9.i ], [ %84, %if.then.i.i.i.i.i7.i ]
  %cmp.i.i.i.i11.i = icmp eq i32 %storemerge.i.i.i.i.i10.i, 1
  br i1 %cmp.i.i.i.i11.i, label %if.then.i.i.i.i16.i, label %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit

if.then.i.i.i.i16.i:                              ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i12.i
  %86 = bitcast %"class.std::_Sp_counted_base"* %72 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i13.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %86, align 8, !tbaa !37
  %vfn.i.i.i.i14.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i13.i, i64 2
  %87 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i14.i, align 8
  call void %87(%"class.std::_Sp_counted_base"* nonnull %72) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i15.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %72, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i17.i, label %if.else.i10.i.i.i.i19.i

if.then.i8.i.i.i.i17.i:                           ; preds = %if.then.i.i.i.i16.i
  %88 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i15.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i22.i

if.else.i10.i.i.i.i19.i:                          ; preds = %if.then.i.i.i.i16.i
  %89 = load i32, i32* %_M_weak_count.i.i.i.i15.i, align 4, !tbaa !22
  %add.i.i9.i.i.i.i18.i = add nsw i32 %89, -1
  store i32 %add.i.i9.i.i.i.i18.i, i32* %_M_weak_count.i.i.i.i15.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i22.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i22.i: ; preds = %if.else.i10.i.i.i.i19.i, %if.then.i8.i.i.i.i17.i
  %storemerge.i11.i.i.i.i20.i = phi i32 [ %89, %if.else.i10.i.i.i.i19.i ], [ %88, %if.then.i8.i.i.i.i17.i ]
  %cmp3.i.i.i.i21.i = icmp eq i32 %storemerge.i11.i.i.i.i20.i, 1
  br i1 %cmp3.i.i.i.i21.i, label %if.then4.i.i.i.i25.i, label %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit

if.then4.i.i.i.i25.i:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i22.i
  %vtable5.i.i.i.i23.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %86, align 8, !tbaa !37
  %vfn6.i.i.i.i24.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i23.i, i64 3
  %90 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i24.i, align 8
  call void %90(%"class.std::_Sp_counted_base"* nonnull %72) #45
  br label %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit

_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit:  ; preds = %if.then4.i.i.i.i25.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i22.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i12.i, %_ZNK2hc11accelerator16get_default_viewEv.exit.i
  br i1 %call2.i.i, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit
  %91 = inttoptr i64 %retval.i.i.i.sroa.0.0 to i32 (%"class.Kalmar::KalmarDevice"*)***
  %vtable.i = load i32 (%"class.Kalmar::KalmarDevice"*)**, i32 (%"class.Kalmar::KalmarDevice"*)*** %91, align 8, !tbaa !37
  %vfn.i = getelementptr inbounds i32 (%"class.Kalmar::KalmarDevice"*)*, i32 (%"class.Kalmar::KalmarDevice"*)** %vtable.i, i64 23
  %92 = load i32 (%"class.Kalmar::KalmarDevice"*)*, i32 (%"class.Kalmar::KalmarDevice"*)** %vfn.i, align 8
  %call.i = call i32 %92(%"class.Kalmar::KalmarDevice"* %61) #43
  %cmp = icmp eq i32 %call.i, 2
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %93 = bitcast %"class.hc::accelerator_view" addrspace(5)* %ref.tmp.i18 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %93)
  %94 = bitcast %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i17 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %94), !noalias !87
  %95 = addrspacecast %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i17 to %"class.std::shared_ptr.17"*
  %call.i.i19 = call %"class.Kalmar::KalmarContext"* @_ZN6Kalmar10getContextEv() #43, !noalias !90
  %def.i.i.i.i20 = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i19, i64 0, i32 1
  %96 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %def.i.i.i.i20, align 8, !tbaa !71, !noalias !93
  %tobool.i.i.i.i21 = icmp eq %"class.Kalmar::KalmarDevice"* %96, null
  br i1 %tobool.i.i.i.i21, label %if.then.i.i.i.i27, label %_ZN6Kalmar13KalmarContext11auto_selectEv.exit.i.i

if.then.i.i.i.i27:                                ; preds = %if.end
  %Devices.i.i.i.i22 = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i19, i64 0, i32 2
  %_M_finish.i.i.i.i.i23 = getelementptr inbounds %"class.Kalmar::KalmarContext", %"class.Kalmar::KalmarContext"* %call.i.i19, i64 0, i32 2, i32 0, i32 0, i32 1
  %97 = bitcast %"class.Kalmar::KalmarDevice"*** %_M_finish.i.i.i.i.i23 to i64*
  %98 = load i64, i64* %97, align 8, !tbaa !74, !noalias !93
  %99 = bitcast %"class.std::vector"* %Devices.i.i.i.i22 to i64*
  %100 = load i64, i64* %99, align 8, !tbaa !77, !noalias !93
  %sub.ptr.sub.i.i.i.i.i24 = sub i64 %98, %100
  %sub.ptr.div.i.i.i.i.i25 = ashr exact i64 %sub.ptr.sub.i.i.i.i.i24, 3
  %cmp.i.i.i.i26 = icmp ult i64 %sub.ptr.div.i.i.i.i.i25, 2
  br i1 %cmp.i.i.i.i26, label %if.then2.i.i.i.i29, label %if.end.i.i.i.i32

if.then2.i.i.i.i29:                               ; preds = %if.then.i.i.i.i27
  %101 = load %struct._IO_FILE*, %struct._IO_FILE* addrspace(1)* @stderr, align 8, !tbaa !27, !noalias !90
  %call3.i.i.i.i28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr ([54 x i8], [54 x i8]* addrspacecast ([54 x i8] addrspace(4)* @.str.5.4 to [54 x i8]*), i64 0, i64 0)) #43, !noalias !90
  call void @exit(i32 -1) #50, !noalias !90
  unreachable

if.end.i.i.i.i32:                                 ; preds = %if.then.i.i.i.i27
  %102 = inttoptr i64 %100 to %"class.Kalmar::KalmarDevice"**
  %add.ptr.i.i.i.i.i31 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %102, i64 1
  %103 = bitcast %"class.Kalmar::KalmarDevice"** %add.ptr.i.i.i.i.i31 to i64*
  %104 = load i64, i64* %103, align 8, !tbaa !27, !noalias !90
  %105 = bitcast %"class.Kalmar::KalmarDevice"** %def.i.i.i.i20 to i64*
  store i64 %104, i64* %105, align 8, !tbaa !71, !noalias !93
  %106 = inttoptr i64 %104 to %"class.Kalmar::KalmarDevice"*
  br label %_ZN6Kalmar13KalmarContext11auto_selectEv.exit.i.i

_ZN6Kalmar13KalmarContext11auto_selectEv.exit.i.i: ; preds = %if.end.i.i.i.i32, %if.end
  %107 = phi %"class.Kalmar::KalmarDevice"* [ %106, %if.end.i.i.i.i32 ], [ %96, %if.end ]
  call void @_ZN6Kalmar12KalmarDevice17get_default_queueEv(%"class.std::shared_ptr.17"* sret %95, %"class.Kalmar::KalmarDevice"* %107) #43, !noalias !90
  %108 = bitcast %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i17 to i64 addrspace(5)*
  %109 = load i64, i64 addrspace(5)* %108, align 8, !tbaa !81, !noalias !90
  %110 = bitcast %"class.hc::accelerator_view" addrspace(5)* %ref.tmp.i18 to i64 addrspace(5)*
  store i64 %109, i64 addrspace(5)* %110, align 8, !tbaa !81, !alias.scope !96, !noalias !87
  %_M_pi.i.i.i.i.i.i37 = getelementptr inbounds %"class.hc::accelerator_view", %"class.hc::accelerator_view" addrspace(5)* %ref.tmp.i18, i32 0, i32 0, i32 0, i32 1, i32 0
  %_M_pi2.i.i.i.i.i.i38 = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17" addrspace(5)* %agg.tmp.i.i17, i32 0, i32 0, i32 1, i32 0
  %111 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi2.i.i.i.i.i.i38, align 8, !tbaa !84, !noalias !90
  store %"class.std::_Sp_counted_base"* %111, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i.i.i.i.i37, align 8, !tbaa !84, !alias.scope !96, !noalias !87
  %cmp.i.i.i.i.i.i39 = icmp eq %"class.std::_Sp_counted_base"* %111, null
  br i1 %cmp.i.i.i.i.i.i39, label %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i.thread, label %if.then.i.i.i.i.i.i41

_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i.thread: ; preds = %_ZN6Kalmar13KalmarContext11auto_selectEv.exit.i.i
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %94), !noalias !87
  br label %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"

if.then.i.i.i.i.i.i41:                            ; preds = %_ZN6Kalmar13KalmarContext11auto_selectEv.exit.i.i
  %_M_use_count.i.i.i.i.i.i.i40 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %111, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48, label %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48.thread

_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48.thread: ; preds = %if.then.i.i.i.i.i.i41
  %112 = load i32, i32* %_M_use_count.i.i.i.i.i.i.i40, align 4, !tbaa !22, !noalias !90
  %add.i.i.i.i.i.i.i.i.i43 = add nsw i32 %112, 1
  store i32 %add.i.i.i.i.i.i.i.i.i43, i32* %_M_use_count.i.i.i.i.i.i.i40, align 4, !tbaa !22, !noalias !90
  br label %if.then.i.i2.i.i

_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48: ; preds = %if.then.i.i.i.i.i.i41
  %113 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i.i.i40, i32 1 acq_rel, !noalias !90
  %.pr199.pre = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi2.i.i.i.i.i.i38, align 8, !tbaa !84, !noalias !90
  %cmp.i.i1.i.i = icmp eq %"class.std::_Sp_counted_base"* %.pr199.pre, null
  br i1 %cmp.i.i1.i.i, label %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i, label %if.then.i.i2.i.i

if.then.i.i2.i.i:                                 ; preds = %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48.thread
  %.pr199215 = phi %"class.std::_Sp_counted_base"* [ %111, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48.thread ], [ %.pr199.pre, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48 ]
  %_M_use_count.i.i.i.i.i49 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr199215, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i3.i.i, label %if.else.i.i.i.i.i.i51

if.then.i.i.i.i3.i.i:                             ; preds = %if.then.i.i2.i.i
  %114 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i49, i32 -1 acq_rel, !noalias !90
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i54

if.else.i.i.i.i.i.i51:                            ; preds = %if.then.i.i2.i.i
  %115 = load i32, i32* %_M_use_count.i.i.i.i.i49, align 4, !tbaa !22, !noalias !90
  %add.i.i.i.i.i.i.i50 = add nsw i32 %115, -1
  store i32 %add.i.i.i.i.i.i.i50, i32* %_M_use_count.i.i.i.i.i49, align 4, !tbaa !22, !noalias !90
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i54

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i54: ; preds = %if.else.i.i.i.i.i.i51, %if.then.i.i.i.i3.i.i
  %storemerge.i.i.i.i.i.i52 = phi i32 [ %115, %if.else.i.i.i.i.i.i51 ], [ %114, %if.then.i.i.i.i3.i.i ]
  %cmp.i.i.i.i.i53 = icmp eq i32 %storemerge.i.i.i.i.i.i52, 1
  br i1 %cmp.i.i.i.i.i53, label %if.then.i.i.i.i.i58, label %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i

if.then.i.i.i.i.i58:                              ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i54
  %116 = bitcast %"class.std::_Sp_counted_base"* %.pr199215 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i55 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %116, align 8, !tbaa !37, !noalias !90
  %vfn.i.i.i.i.i56 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i55, i64 2
  %117 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i56, align 8, !noalias !90
  call void %117(%"class.std::_Sp_counted_base"* nonnull %.pr199215) #45, !noalias !90
  call void asm sideeffect "", "~{memory}"() #47, !noalias !90, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !noalias !90, !srcloc !86
  %_M_weak_count.i.i.i.i.i57 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr199215, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i59, label %if.else.i10.i.i.i.i.i61

if.then.i8.i.i.i.i.i59:                           ; preds = %if.then.i.i.i.i.i58
  %118 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i57, i32 -1 acq_rel, !noalias !90
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i64

if.else.i10.i.i.i.i.i61:                          ; preds = %if.then.i.i.i.i.i58
  %119 = load i32, i32* %_M_weak_count.i.i.i.i.i57, align 4, !tbaa !22, !noalias !90
  %add.i.i9.i.i.i.i.i60 = add nsw i32 %119, -1
  store i32 %add.i.i9.i.i.i.i.i60, i32* %_M_weak_count.i.i.i.i.i57, align 4, !tbaa !22, !noalias !90
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i64

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i64: ; preds = %if.else.i10.i.i.i.i.i61, %if.then.i8.i.i.i.i.i59
  %storemerge.i11.i.i.i.i.i62 = phi i32 [ %119, %if.else.i10.i.i.i.i.i61 ], [ %118, %if.then.i8.i.i.i.i.i59 ]
  %cmp3.i.i.i.i.i63 = icmp eq i32 %storemerge.i11.i.i.i.i.i62, 1
  br i1 %cmp3.i.i.i.i.i63, label %if.then4.i.i.i.i.i67, label %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i

if.then4.i.i.i.i.i67:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i64
  %vtable5.i.i.i.i.i65 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %116, align 8, !tbaa !37, !noalias !90
  %vfn6.i.i.i.i.i66 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i65, i64 3
  %120 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i66, align 8, !noalias !90
  call void %120(%"class.std::_Sp_counted_base"* nonnull %.pr199215) #45, !noalias !90
  br label %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i

_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i: ; preds = %if.then4.i.i.i.i.i67, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i64, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i54, %_ZN2hc16accelerator_viewC2ESt10shared_ptrIN6Kalmar11KalmarQueueEE.exit.i.i48
  %.pr = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i.i.i.i.i37, align 8, !tbaa !84, !noalias !87
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %94), !noalias !87
  %cmp.i.i.i3.i = icmp eq %"class.std::_Sp_counted_base"* %.pr, null
  br i1 %cmp.i.i.i3.i, label %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit", label %if.then.i.i.i5.i

if.then.i.i.i5.i:                                 ; preds = %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i
  %_M_use_count.i.i.i.i4.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i6.i, label %if.else.i.i.i.i.i8.i

if.then.i.i.i.i.i6.i:                             ; preds = %if.then.i.i.i5.i
  %121 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i4.i, i32 -1 acq_rel, !noalias !87
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i11.i

if.else.i.i.i.i.i8.i:                             ; preds = %if.then.i.i.i5.i
  %122 = load i32, i32* %_M_use_count.i.i.i.i4.i, align 4, !tbaa !22, !noalias !87
  %add.i.i.i.i.i.i7.i = add nsw i32 %122, -1
  store i32 %add.i.i.i.i.i.i7.i, i32* %_M_use_count.i.i.i.i4.i, align 4, !tbaa !22, !noalias !87
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i11.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i11.i: ; preds = %if.else.i.i.i.i.i8.i, %if.then.i.i.i.i.i6.i
  %storemerge.i.i.i.i.i9.i = phi i32 [ %122, %if.else.i.i.i.i.i8.i ], [ %121, %if.then.i.i.i.i.i6.i ]
  %cmp.i.i.i.i10.i = icmp eq i32 %storemerge.i.i.i.i.i9.i, 1
  br i1 %cmp.i.i.i.i10.i, label %if.then.i.i.i.i15.i, label %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"

if.then.i.i.i.i15.i:                              ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i11.i
  %123 = bitcast %"class.std::_Sp_counted_base"* %.pr to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i12.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %123, align 8, !tbaa !37, !noalias !87
  %vfn.i.i.i.i13.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i12.i, i64 2
  %124 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i13.i, align 8, !noalias !87
  call void %124(%"class.std::_Sp_counted_base"* nonnull %.pr) #45, !noalias !87
  call void asm sideeffect "", "~{memory}"() #47, !noalias !87, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !noalias !87, !srcloc !86
  %_M_weak_count.i.i.i.i14.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.pr, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i16.i, label %if.else.i10.i.i.i.i18.i

if.then.i8.i.i.i.i16.i:                           ; preds = %if.then.i.i.i.i15.i
  %125 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i14.i, i32 -1 acq_rel, !noalias !87
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i21.i

if.else.i10.i.i.i.i18.i:                          ; preds = %if.then.i.i.i.i15.i
  %126 = load i32, i32* %_M_weak_count.i.i.i.i14.i, align 4, !tbaa !22, !noalias !87
  %add.i.i9.i.i.i.i17.i = add nsw i32 %126, -1
  store i32 %add.i.i9.i.i.i.i17.i, i32* %_M_weak_count.i.i.i.i14.i, align 4, !tbaa !22, !noalias !87
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i21.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i21.i: ; preds = %if.else.i10.i.i.i.i18.i, %if.then.i8.i.i.i.i16.i
  %storemerge.i11.i.i.i.i19.i = phi i32 [ %126, %if.else.i10.i.i.i.i18.i ], [ %125, %if.then.i8.i.i.i.i16.i ]
  %cmp3.i.i.i.i20.i = icmp eq i32 %storemerge.i11.i.i.i.i19.i, 1
  br i1 %cmp3.i.i.i.i20.i, label %if.then4.i.i.i.i24.i, label %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"

if.then4.i.i.i.i24.i:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i21.i
  %vtable5.i.i.i.i22.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %123, align 8, !tbaa !37, !noalias !87
  %vfn6.i.i.i.i23.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i22.i, i64 3
  %127 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i23.i, align 8, !noalias !87
  call void %127(%"class.std::_Sp_counted_base"* nonnull %.pr) #45, !noalias !87
  br label %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"

"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit": ; preds = %if.then4.i.i.i.i24.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i21.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i11.i, %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i, %_ZN2hc11accelerator23get_auto_selection_viewEv.exit.i.thread
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %93)
  %_M_ptr.i.i.i.i = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %128 = load %"class.std::__future_base::_State_baseV2"*, %"class.std::__future_base::_State_baseV2"* addrspace(5)* %_M_ptr.i.i.i.i, align 8, !tbaa !97
  %cmp.i.i.i.i73 = icmp eq %"class.std::__future_base::_State_baseV2"* %128, null
  br i1 %cmp.i.i.i.i73, label %_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit, label %if.then.i

if.then.i:                                        ; preds = %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"
  %_M_ptr.i.i.i74 = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 2, i32 0, i32 0
  %129 = load %"class.Kalmar::KalmarAsyncOp"*, %"class.Kalmar::KalmarAsyncOp"* addrspace(5)* %_M_ptr.i.i.i74, align 8, !tbaa !99
  %cmp.i.i.i = icmp eq %"class.Kalmar::KalmarAsyncOp"* %129, null
  br i1 %cmp.i.i.i, label %_ZNSt13__future_base13_State_baseV28_S_checkIS0_EEvRKSt10shared_ptrIT_E.exit.i.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i
  %130 = bitcast %"class.Kalmar::KalmarAsyncOp"* %129 to void (%"class.Kalmar::KalmarAsyncOp"*, i32)***
  %vtable.i75 = load void (%"class.Kalmar::KalmarAsyncOp"*, i32)**, void (%"class.Kalmar::KalmarAsyncOp"*, i32)*** %130, align 8, !tbaa !37
  %vfn.i76 = getelementptr inbounds void (%"class.Kalmar::KalmarAsyncOp"*, i32)*, void (%"class.Kalmar::KalmarAsyncOp"*, i32)** %vtable.i75, i64 8
  %131 = load void (%"class.Kalmar::KalmarAsyncOp"*, i32)*, void (%"class.Kalmar::KalmarAsyncOp"*, i32)** %vfn.i76, align 8
  call void %131(%"class.Kalmar::KalmarAsyncOp"* nonnull %129, i32 0) #43
  br label %_ZNSt13__future_base13_State_baseV28_S_checkIS0_EEvRKSt10shared_ptrIT_E.exit.i.i

_ZNSt13__future_base13_State_baseV28_S_checkIS0_EEvRKSt10shared_ptrIT_E.exit.i.i: ; preds = %if.then3.i, %if.then.i
  %132 = bitcast %"class.std::__future_base::_State_baseV2"* %128 to void (%"class.std::__future_base::_State_baseV2"*)***
  %vtable.i.i.i = load void (%"class.std::__future_base::_State_baseV2"*)**, void (%"class.std::__future_base::_State_baseV2"*)*** %132, align 8, !tbaa !37
  %vfn.i.i.i = getelementptr inbounds void (%"class.std::__future_base::_State_baseV2"*)*, void (%"class.std::__future_base::_State_baseV2"*)** %vtable.i.i.i, i64 2
  %133 = load void (%"class.std::__future_base::_State_baseV2"*)*, void (%"class.std::__future_base::_State_baseV2"*)** %vfn.i.i.i, align 8
  call void %133(%"class.std::__future_base::_State_baseV2"* nonnull %128) #43
  %_M_status.i.i.i = getelementptr inbounds %"class.std::__future_base::_State_baseV2", %"class.std::__future_base::_State_baseV2"* %128, i64 0, i32 2
  %_M_i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__atomic_futex_unsigned", %"class.std::__atomic_futex_unsigned"* %_M_status.i.i.i, i64 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %_M_i.i.i.i.i.i.i acquire, align 4
  %and.i.i.i.i.i = and i32 %134, 2147483647
  %cmp.i.i4.i.i = icmp eq i32 %and.i.i.i.i.i, 1
  br i1 %cmp.i.i4.i.i, label %_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit, label %if.end.i.i.i.i78

if.end.i.i.i.i78:                                 ; preds = %_ZNSt13__future_base13_State_baseV28_S_checkIS0_EEvRKSt10shared_ptrIT_E.exit.i.i
  %135 = bitcast %"class.std::thread::id" addrspace(5)* %agg.tmp.i.i.i.i.i.i69 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %135)
  %136 = bitcast %"class.std::thread::id" addrspace(5)* %agg.tmp4.i.i.i.i.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %136)
  %137 = bitcast %"class.std::__atomic_futex_unsigned"* %_M_status.i.i.i to %"struct.std::less"*
  %138 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id" addrspace(5)* %agg.tmp.i.i.i.i.i.i69, i32 0, i32 0
  %139 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id" addrspace(5)* %agg.tmp4.i.i.i.i.i.i, i32 0, i32 0
  br label %_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i

_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i: ; preds = %_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i, %if.end.i.i.i.i78
  %__assumed.addr.i.i.i.i.i.i.0 = phi i32 [ %and.i.i.i.i.i, %if.end.i.i.i.i78 ], [ %and.i.i.i3.i.i.i.i, %_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i ]
  %140 = atomicrmw or i32* %_M_i.i.i.i.i.i.i, i32 -2147483648 monotonic
  %or.i.i.i.i.i.i = or i32 %__assumed.addr.i.i.i.i.i.i.0, -2147483648
  store i64 0, i64 addrspace(5)* %138, align 8, !tbaa !31
  store i64 0, i64 addrspace(5)* %139, align 8, !tbaa !31
  %call5.i.i.i.i.i.i79 = call zeroext i1 @_ZNSt28__atomic_futex_unsigned_base19_M_futex_wait_untilEPjjbNSt6chrono8durationIlSt5ratioILl1ELl1EEEENS2_IlS3_ILl1ELl1000000000EEEE(%"struct.std::less"* nonnull %137, i32* nonnull %_M_i.i.i.i.i.i.i, i32 %or.i.i.i.i.i.i, i1 zeroext false, %"class.std::thread::id" addrspace(5)* byval align 8 %agg.tmp.i.i.i.i.i.i69, %"class.std::thread::id" addrspace(5)* byval align 8 %agg.tmp4.i.i.i.i.i.i) #43
  %141 = load atomic i32, i32* %_M_i.i.i.i.i.i.i acquire, align 4
  %and.i.i.i3.i.i.i.i = and i32 %141, 2147483647
  %call5.i.i.i.i.i.i79.not = xor i1 %call5.i.i.i.i.i.i79, true
  %cmp.i.i.i.i.i.i80 = icmp eq i32 %and.i.i.i3.i.i.i.i, 1
  %or.cond203 = or i1 %cmp.i.i.i.i.i.i80, %call5.i.i.i.i.i.i79.not
  br i1 %or.cond203, label %_ZNSt23__atomic_futex_unsignedILj2147483648EE16_M_load_and_testEjjbSt12memory_order.exit.i.i.i.i, label %_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i

_ZNSt23__atomic_futex_unsignedILj2147483648EE16_M_load_and_testEjjbSt12memory_order.exit.i.i.i.i: ; preds = %_ZNSt23__atomic_futex_unsignedILj2147483648EE7_M_loadESt12memory_order.exit.i.i.i.i.i.i
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %135)
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %136)
  br label %_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit

_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit: ; preds = %_ZNSt23__atomic_futex_unsignedILj2147483648EE16_M_load_and_testEjjbSt12memory_order.exit.i.i.i.i, %_ZNSt13__future_base13_State_baseV28_S_checkIS0_EEvRKSt10shared_ptrIT_E.exit.i.i, %"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_.exit"
  %call7.i = call %"class.Kalmar::KalmarContext"* @_ZN6Kalmar10getContextEv() #43
  %142 = bitcast %"class.Kalmar::KalmarContext"* %call7.i to void (%"class.Kalmar::KalmarContext"*)***
  %vtable8.i = load void (%"class.Kalmar::KalmarContext"*)**, void (%"class.Kalmar::KalmarContext"*)*** %142, align 8, !tbaa !37
  %vfn9.i = getelementptr inbounds void (%"class.Kalmar::KalmarContext"*)*, void (%"class.Kalmar::KalmarContext"*)** %vtable8.i, i64 5
  %143 = load void (%"class.Kalmar::KalmarContext"*)*, void (%"class.Kalmar::KalmarContext"*)** %vfn9.i, align 8
  call void %143(%"class.Kalmar::KalmarContext"* %call7.i) #43
  %144 = bitcast %"class.std::shared_ptr.8" addrspace(5)* %ref.tmp.i84 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 16, i8 addrspace(5)* %144)
  %__thread_then.i = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 1
  %145 = load %"class.std::thread"*, %"class.std::thread"* addrspace(5)* %__thread_then.i, align 8, !tbaa !101
  %cmp.i = icmp eq %"class.std::thread"* %145, null
  br i1 %cmp.i, label %delete.end.i, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit
  call void @_ZNSt6thread4joinEv(%"class.std::thread"* nonnull %145) #45
  %146 = getelementptr inbounds %"class.std::thread", %"class.std::thread"* %145, i64 0, i32 0, i32 0
  %147 = load i64, i64* %146, align 8, !tbaa !31
  %cmp.i.i.i.i.i.i87 = icmp eq i64 %147, 0
  br i1 %cmp.i.i.i.i.i.i87, label %_ZNSt6threadD2Ev.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %delete.notnull.i
  call void @_ZSt9terminatev() #50
  unreachable

_ZNSt6threadD2Ev.exit.i:                          ; preds = %delete.notnull.i
  %148 = bitcast %"class.std::thread"* %145 to i8*
  call void @_ZdlPv(i8* %148) #49
  br label %delete.end.i

delete.end.i:                                     ; preds = %_ZNSt6threadD2Ev.exit.i, %_ZNK2hc17completion_future4waitEN6Kalmar5enums10hcWaitModeE.exit
  store %"class.std::thread"* null, %"class.std::thread"* addrspace(5)* %__thread_then.i, align 8, !tbaa !101
  %.cast.i.i90 = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 2, i32 0
  %_M_ptr.i.i.i91 = getelementptr inbounds %"class.std::__shared_ptr.9", %"class.std::__shared_ptr.9" addrspace(5)* %.cast.i.i90, i32 0, i32 0
  %149 = load %"class.Kalmar::KalmarAsyncOp"*, %"class.Kalmar::KalmarAsyncOp"* addrspace(5)* %_M_ptr.i.i.i91, align 8, !tbaa !99
  %cmp.i.i.i92 = icmp eq %"class.Kalmar::KalmarAsyncOp"* %149, null
  br i1 %cmp.i.i.i92, label %if.end8.i, label %if.then5.i

if.then5.i:                                       ; preds = %delete.end.i
  %150 = getelementptr inbounds %"class.std::shared_ptr.8", %"class.std::shared_ptr.8" addrspace(5)* %ref.tmp.i84, i32 0, i32 0
  %_M_pi.i.i.i.i.i = getelementptr inbounds %"class.std::shared_ptr.8", %"class.std::shared_ptr.8" addrspace(5)* %ref.tmp.i84, i32 0, i32 0, i32 1, i32 0
  %151 = addrspacecast %"class.std::__shared_ptr.9" addrspace(5)* %150 to %"class.std::__shared_ptr.9"*
  %_M_refcount4.i.i.i.i = getelementptr inbounds %"class.std::__shared_ptr.9", %"class.std::__shared_ptr.9"* %151, i64 0, i32 1
  %152 = bitcast %"class.std::__shared_count"* %_M_refcount4.i.i.i.i to i64*
  store i64 0, i64* %152, align 8, !tbaa !84
  %_M_ptr5.i.i.i.i = getelementptr inbounds %"class.std::__shared_ptr.9", %"class.std::__shared_ptr.9"* %151, i64 0, i32 0
  store %"class.Kalmar::KalmarAsyncOp"* null, %"class.Kalmar::KalmarAsyncOp"** %_M_ptr5.i.i.i.i, align 8, !tbaa !99
  %153 = bitcast %"class.std::__shared_ptr.9" addrspace(5)* %.cast.i.i90 to i64 addrspace(5)*
  %154 = addrspacecast i64 addrspace(5)* %153 to i64*
  store i64 0, i64* %154, align 8, !tbaa !27
  %_M_refcount3.i.i.i.i = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 2, i32 0, i32 1
  %155 = bitcast %"class.std::__shared_count" addrspace(5)* %_M_refcount3.i.i.i.i to i64 addrspace(5)*
  %156 = load i64, i64 addrspace(5)* %155, align 8, !tbaa !84
  %157 = addrspacecast i64 addrspace(5)* %155 to i64*
  store i64 0, i64* %157, align 8, !tbaa !84
  %.cast = inttoptr i64 %156 to %"class.std::_Sp_counted_base"*
  %cmp.i.i.i.i14.i = icmp eq i64 %156, 0
  br i1 %cmp.i.i.i.i14.i, label %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i, label %if.then.i.i.i.i15.i94

if.then.i.i.i.i15.i94:                            ; preds = %if.then5.i
  %_M_use_count.i.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.cast, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i.i.i95, label %if.else.i.i.i.i.i.i.i96

if.then.i.i.i.i.i.i.i95:                          ; preds = %if.then.i.i.i.i15.i94
  %158 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i

if.else.i.i.i.i.i.i.i96:                          ; preds = %if.then.i.i.i.i15.i94
  %159 = load i32, i32* %_M_use_count.i.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i.i.i = add nsw i32 %159, -1
  store i32 %add.i.i.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i96, %if.then.i.i.i.i.i.i.i95
  %storemerge.i.i.i.i.i.i.i = phi i32 [ %159, %if.else.i.i.i.i.i.i.i96 ], [ %158, %if.then.i.i.i.i.i.i.i95 ]
  %cmp.i.i.i.i.i16.i = icmp eq i32 %storemerge.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i16.i, label %if.then.i.i.i.i.i17.i, label %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i

if.then.i.i.i.i.i17.i:                            ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i
  %160 = inttoptr i64 %156 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %160, align 8, !tbaa !37
  %vfn.i.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i.i, i64 2
  %161 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i.i, align 8
  call void %161(%"class.std::_Sp_counted_base"* nonnull %.cast) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.cast, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i.i, label %if.else.i10.i.i.i.i.i.i

if.then.i8.i.i.i.i.i.i:                           ; preds = %if.then.i.i.i.i.i17.i
  %162 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i

if.else.i10.i.i.i.i.i.i:                          ; preds = %if.then.i.i.i.i.i17.i
  %163 = load i32, i32* %_M_weak_count.i.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i9.i.i.i.i.i.i = add nsw i32 %163, -1
  store i32 %add.i.i9.i.i.i.i.i.i, i32* %_M_weak_count.i.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i: ; preds = %if.else.i10.i.i.i.i.i.i, %if.then.i8.i.i.i.i.i.i
  %storemerge.i11.i.i.i.i.i.i = phi i32 [ %163, %if.else.i10.i.i.i.i.i.i ], [ %162, %if.then.i8.i.i.i.i.i.i ]
  %cmp3.i.i.i.i.i.i97 = icmp eq i32 %storemerge.i11.i.i.i.i.i.i, 1
  br i1 %cmp3.i.i.i.i.i.i97, label %if.then4.i.i.i.i.i.i98, label %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i

if.then4.i.i.i.i.i.i98:                           ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i
  %vtable5.i.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %160, align 8, !tbaa !37
  %vfn6.i.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i.i, i64 3
  %164 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i.i, align 8
  call void %164(%"class.std::_Sp_counted_base"* nonnull %.cast) #45
  br label %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i

_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i: ; preds = %if.then4.i.i.i.i.i.i98, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i, %if.then5.i
  %165 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i.i.i.i, align 8, !tbaa !84
  %cmp.i.i18.i = icmp eq %"class.std::_Sp_counted_base"* %165, null
  br i1 %cmp.i.i18.i, label %if.end8.i, label %if.then.i.i.i99

if.then.i.i.i99:                                  ; preds = %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i
  %_M_use_count.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %165, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i19.i, label %if.else.i.i.i.i.i

if.then.i.i.i.i19.i:                              ; preds = %if.then.i.i.i99
  %166 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i

if.else.i.i.i.i.i:                                ; preds = %if.then.i.i.i99
  %167 = load i32, i32* %_M_use_count.i.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i = add nsw i32 %167, -1
  store i32 %add.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i, %if.then.i.i.i.i19.i
  %storemerge.i.i.i.i.i = phi i32 [ %167, %if.else.i.i.i.i.i ], [ %166, %if.then.i.i.i.i19.i ]
  %cmp.i.i.i20.i = icmp eq i32 %storemerge.i.i.i.i.i, 1
  br i1 %cmp.i.i.i20.i, label %if.then.i.i.i21.i, label %if.end8.i

if.then.i.i.i21.i:                                ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i
  %168 = bitcast %"class.std::_Sp_counted_base"* %165 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %168, align 8, !tbaa !37
  %vfn.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i, i64 2
  %169 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i, align 8
  call void %169(%"class.std::_Sp_counted_base"* nonnull %165) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %165, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i, label %if.else.i10.i.i.i.i

if.then.i8.i.i.i.i:                               ; preds = %if.then.i.i.i21.i
  %170 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i

if.else.i10.i.i.i.i:                              ; preds = %if.then.i.i.i21.i
  %171 = load i32, i32* %_M_weak_count.i.i.i.i, align 4, !tbaa !22
  %add.i.i9.i.i.i.i = add nsw i32 %171, -1
  store i32 %add.i.i9.i.i.i.i, i32* %_M_weak_count.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i: ; preds = %if.else.i10.i.i.i.i, %if.then.i8.i.i.i.i
  %storemerge.i11.i.i.i.i = phi i32 [ %171, %if.else.i10.i.i.i.i ], [ %170, %if.then.i8.i.i.i.i ]
  %cmp3.i.i.i.i = icmp eq i32 %storemerge.i11.i.i.i.i, 1
  br i1 %cmp3.i.i.i.i, label %if.then4.i.i.i.i, label %if.end8.i

if.then4.i.i.i.i:                                 ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i
  %vtable5.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %168, align 8, !tbaa !37
  %vfn6.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i, i64 3
  %172 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i, align 8
  call void %172(%"class.std::_Sp_counted_base"* nonnull %165) #45
  br label %if.end8.i

if.end8.i:                                        ; preds = %if.then4.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i, %_ZNSt10shared_ptrIN6Kalmar13KalmarAsyncOpEEaSEOS2_.exit.i, %delete.end.i
  %_M_pi.i.i23.i = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 2, i32 0, i32 1, i32 0
  %173 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i23.i, align 8, !tbaa !84
  %cmp.i.i24.i = icmp eq %"class.std::_Sp_counted_base"* %173, null
  br i1 %cmp.i.i24.i, label %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i, label %if.then.i.i26.i

if.then.i.i26.i:                                  ; preds = %if.end8.i
  %_M_use_count.i.i.i25.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %173, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i27.i, label %if.else.i.i.i.i29.i

if.then.i.i.i.i27.i:                              ; preds = %if.then.i.i26.i
  %174 = atomicrmw volatile add i32* %_M_use_count.i.i.i25.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i32.i

if.else.i.i.i.i29.i:                              ; preds = %if.then.i.i26.i
  %175 = load i32, i32* %_M_use_count.i.i.i25.i, align 4, !tbaa !22
  %add.i.i.i.i.i28.i = add nsw i32 %175, -1
  store i32 %add.i.i.i.i.i28.i, i32* %_M_use_count.i.i.i25.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i32.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i32.i: ; preds = %if.else.i.i.i.i29.i, %if.then.i.i.i.i27.i
  %storemerge.i.i.i.i30.i = phi i32 [ %175, %if.else.i.i.i.i29.i ], [ %174, %if.then.i.i.i.i27.i ]
  %cmp.i.i.i31.i = icmp eq i32 %storemerge.i.i.i.i30.i, 1
  br i1 %cmp.i.i.i31.i, label %if.then.i.i.i36.i, label %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i

if.then.i.i.i36.i:                                ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i32.i
  %176 = bitcast %"class.std::_Sp_counted_base"* %173 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i33.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %176, align 8, !tbaa !37
  %vfn.i.i.i34.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i33.i, i64 2
  %177 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i34.i, align 8
  call void %177(%"class.std::_Sp_counted_base"* nonnull %173) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i35.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %173, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i37.i, label %if.else.i10.i.i.i39.i

if.then.i8.i.i.i37.i:                             ; preds = %if.then.i.i.i36.i
  %178 = atomicrmw volatile add i32* %_M_weak_count.i.i.i35.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i42.i

if.else.i10.i.i.i39.i:                            ; preds = %if.then.i.i.i36.i
  %179 = load i32, i32* %_M_weak_count.i.i.i35.i, align 4, !tbaa !22
  %add.i.i9.i.i.i38.i = add nsw i32 %179, -1
  store i32 %add.i.i9.i.i.i38.i, i32* %_M_weak_count.i.i.i35.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i42.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i42.i: ; preds = %if.else.i10.i.i.i39.i, %if.then.i8.i.i.i37.i
  %storemerge.i11.i.i.i40.i = phi i32 [ %179, %if.else.i10.i.i.i39.i ], [ %178, %if.then.i8.i.i.i37.i ]
  %cmp3.i.i.i41.i = icmp eq i32 %storemerge.i11.i.i.i40.i, 1
  br i1 %cmp3.i.i.i41.i, label %if.then4.i.i.i45.i, label %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i

if.then4.i.i.i45.i:                               ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i42.i
  %vtable5.i.i.i43.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %176, align 8, !tbaa !37
  %vfn6.i.i.i44.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i43.i, i64 3
  %180 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i44.i, align 8
  call void %180(%"class.std::_Sp_counted_base"* nonnull %173) #45
  br label %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i

_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i: ; preds = %if.then4.i.i.i45.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i42.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i32.i, %if.end8.i
  %_M_pi.i.i.i.i101 = getelementptr inbounds %"class.hc::completion_future", %"class.hc::completion_future" addrspace(5)* %ref.tmp, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %181 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i.i.i101, align 8, !tbaa !84
  %cmp.i.i.i.i102 = icmp eq %"class.std::_Sp_counted_base"* %181, null
  br i1 %cmp.i.i.i.i102, label %_ZN2hc17completion_futureD2Ev.exit, label %if.then.i.i.i.i104

if.then.i.i.i.i104:                               ; preds = %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i
  %_M_use_count.i.i.i.i.i103 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %181, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i.i105, label %if.else.i.i.i.i.i.i107

if.then.i.i.i.i.i.i105:                           ; preds = %if.then.i.i.i.i104
  %182 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i103, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i110

if.else.i.i.i.i.i.i107:                           ; preds = %if.then.i.i.i.i104
  %183 = load i32, i32* %_M_use_count.i.i.i.i.i103, align 4, !tbaa !22
  %add.i.i.i.i.i.i.i106 = add nsw i32 %183, -1
  store i32 %add.i.i.i.i.i.i.i106, i32* %_M_use_count.i.i.i.i.i103, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i110

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i110: ; preds = %if.else.i.i.i.i.i.i107, %if.then.i.i.i.i.i.i105
  %storemerge.i.i.i.i.i.i108 = phi i32 [ %183, %if.else.i.i.i.i.i.i107 ], [ %182, %if.then.i.i.i.i.i.i105 ]
  %cmp.i.i.i.i.i109 = icmp eq i32 %storemerge.i.i.i.i.i.i108, 1
  br i1 %cmp.i.i.i.i.i109, label %if.then.i.i.i.i.i114, label %_ZN2hc17completion_futureD2Ev.exit

if.then.i.i.i.i.i114:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i110
  %184 = bitcast %"class.std::_Sp_counted_base"* %181 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i111 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %184, align 8, !tbaa !37
  %vfn.i.i.i.i.i112 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i111, i64 2
  %185 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i112, align 8
  call void %185(%"class.std::_Sp_counted_base"* nonnull %181) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i.i113 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %181, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i115, label %if.else.i10.i.i.i.i.i117

if.then.i8.i.i.i.i.i115:                          ; preds = %if.then.i.i.i.i.i114
  %186 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i113, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i120

if.else.i10.i.i.i.i.i117:                         ; preds = %if.then.i.i.i.i.i114
  %187 = load i32, i32* %_M_weak_count.i.i.i.i.i113, align 4, !tbaa !22
  %add.i.i9.i.i.i.i.i116 = add nsw i32 %187, -1
  store i32 %add.i.i9.i.i.i.i.i116, i32* %_M_weak_count.i.i.i.i.i113, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i120

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i120: ; preds = %if.else.i10.i.i.i.i.i117, %if.then.i8.i.i.i.i.i115
  %storemerge.i11.i.i.i.i.i118 = phi i32 [ %187, %if.else.i10.i.i.i.i.i117 ], [ %186, %if.then.i8.i.i.i.i.i115 ]
  %cmp3.i.i.i.i.i119 = icmp eq i32 %storemerge.i11.i.i.i.i.i118, 1
  br i1 %cmp3.i.i.i.i.i119, label %if.then4.i.i.i.i.i123, label %_ZN2hc17completion_futureD2Ev.exit

if.then4.i.i.i.i.i123:                            ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i120
  %vtable5.i.i.i.i.i121 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %184, align 8, !tbaa !37
  %vfn6.i.i.i.i.i122 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i121, i64 3
  %188 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i122, align 8
  call void %188(%"class.std::_Sp_counted_base"* nonnull %181) #45
  br label %_ZN2hc17completion_futureD2Ev.exit

_ZN2hc17completion_futureD2Ev.exit:               ; preds = %if.then4.i.i.i.i.i123, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i120, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i110, %_ZNSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EED2Ev.exit47.i
  call void @llvm.lifetime.end.p5i8(i64 16, i8 addrspace(5)* %144)
  br label %return

return:                                           ; preds = %_ZN2hc17completion_futureD2Ev.exit, %lor.lhs.false, %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit
  %storemerge = phi i32 [ 0, %_ZN2hc17completion_futureD2Ev.exit ], [ 1, %lor.lhs.false ], [ 1, %_ZNK2hc11accelerator18is_hsa_acceleratorEv.exit ]
  ret i32 %storemerge
}

; Function Attrs: nounwind readonly
declare i64 @wcslen(i32*) local_unnamed_addr #19

declare i32* @_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE9_M_createERmm(%"class.std::__cxx11::basic_string.10"*, i64* dereferenceable(8), i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32* @wmemcpy(i32*, i32*, i64) local_unnamed_addr #9

declare i32 @_ZNKSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE7compareEPKw(%"class.std::__cxx11::basic_string.10"*, i32*) local_unnamed_addr #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #3

define linkonce_odr %"class.Kalmar::KalmarDevice"** @_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPPN6Kalmar12KalmarDeviceESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZNS2_13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKS3_E_EEET_SN_SN_T0_St26random_access_iterator_tag(%"class.__gnu_cxx::__normal_iterator" addrspace(5)* byval align 8 %__first, %"class.__gnu_cxx::__normal_iterator" addrspace(5)* byval align 8 %__last, %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* byval align 8 %__pred, %"struct.std::less" addrspace(5)* byval align 1) local_unnamed_addr #7 {
entry:
  %ref.tmp.i.i223 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i188 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i149 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i114 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i79 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i44 = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %ref.tmp.i.i = alloca %"class.std::__cxx11::basic_string.10", align 8, addrspace(5)
  %1 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %__last to i64 addrspace(5)*
  %2 = load i64, i64 addrspace(5)* %1, align 8, !tbaa !27
  %_M_current.i2.i = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %__first, i32 0, i32 0
  %3 = bitcast %"class.__gnu_cxx::__normal_iterator" addrspace(5)* %__first to i64 addrspace(5)*
  %4 = load i64, i64 addrspace(5)* %3, align 8, !tbaa !27
  %sub.ptr.sub.i = sub i64 %2, %4
  %cmp291 = icmp sgt i64 %sub.ptr.sub.i, 31
  %5 = inttoptr i64 %4 to %"class.Kalmar::KalmarDevice"**
  %6 = inttoptr i64 %2 to %"class.Kalmar::KalmarDevice"**
  br i1 %cmp291, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %shr307 = lshr i64 %sub.ptr.sub.i, 5
  %7 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i44 to i8 addrspace(5)*
  %8 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i44 to %"class.std::__cxx11::basic_string.10"*
  %9 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_pred", %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %__pred, i32 0, i32 0, i32 0
  %10 = load %"class.std::__cxx11::basic_string.10"*, %"class.std::__cxx11::basic_string.10"* addrspace(5)* %9, align 8
  %_M_string_length.i.i.i.i48 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i44, i32 0, i32 1
  %_M_string_length.i6.i.i.i49 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %10, i64 0, i32 1
  %_M_p.i.i.i.i.i.i61 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i44, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i44, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i62 = bitcast %union.anon addrspace(5)* %11 to i32 addrspace(5)*
  %12 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i62 to i32*
  %_M_p.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %10, i64 0, i32 0, i32 0
  %_M_p.i.i8.i.i.i51 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %8, i64 0, i32 0, i32 0
  %13 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i79 to i8 addrspace(5)*
  %14 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i79 to %"class.std::__cxx11::basic_string.10"*
  %_M_string_length.i.i.i.i83 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i79, i32 0, i32 1
  %_M_p.i.i.i.i.i.i96 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i79, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i79, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i97 = bitcast %union.anon addrspace(5)* %15 to i32 addrspace(5)*
  %16 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i97 to i32*
  %_M_p.i.i8.i.i.i86 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %14, i64 0, i32 0, i32 0
  %17 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i114 to i8 addrspace(5)*
  %18 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i114 to %"class.std::__cxx11::basic_string.10"*
  %_M_string_length.i.i.i.i118 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i114, i32 0, i32 1
  %_M_p.i.i.i.i.i.i131 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i114, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i114, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i132 = bitcast %union.anon addrspace(5)* %19 to i32 addrspace(5)*
  %20 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i132 to i32*
  %_M_p.i.i8.i.i.i121 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %18, i64 0, i32 0, i32 0
  %21 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i149 to i8 addrspace(5)*
  %22 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i149 to %"class.std::__cxx11::basic_string.10"*
  %_M_string_length.i.i.i.i153 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i149, i32 0, i32 1
  %_M_p.i.i.i.i.i.i166 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i149, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i149, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i167 = bitcast %union.anon addrspace(5)* %23 to i32 addrspace(5)*
  %24 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i167 to i32*
  %_M_p.i.i8.i.i.i156 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %22, i64 0, i32 0, i32 0
  br label %for.body

for.body:                                         ; preds = %if.end16, %for.body.lr.ph
  %retval.sroa.0.0288301 = phi %"class.Kalmar::KalmarDevice"** [ %5, %for.body.lr.ph ], [ %incdec.ptr.i178, %if.end16 ]
  %storemerge292 = phi i64 [ %shr307, %for.body.lr.ph ], [ %dec, %if.end16 ]
  %25 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288301, align 8, !tbaa !27
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %7)
  %26 = bitcast %"class.Kalmar::KalmarDevice"* %25 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i47 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %26, align 8, !tbaa !37
  %27 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i47, align 8
  call void %27(%"class.std::__cxx11::basic_string.10"* sret %8, %"class.Kalmar::KalmarDevice"* %25) #43
  %28 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i48, align 8, !tbaa !70
  %29 = load i64, i64* %_M_string_length.i6.i.i.i49, align 8, !tbaa !70
  %cmp.i.i.i50 = icmp eq i64 %28, %29
  br i1 %cmp.i.i.i50, label %land.rhs.i.i.i55, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i64

land.rhs.i.i.i55:                                 ; preds = %for.body
  %cmp.i.i.i.i54 = icmp eq i64 %28, 0
  br i1 %cmp.i.i.i.i54, label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i60, label %if.end.i.i.i.i57

if.end.i.i.i.i57:                                 ; preds = %land.rhs.i.i.i55
  %30 = load i32*, i32** %_M_p.i.i.i.i.i52, align 8, !tbaa !66
  %31 = load i32*, i32** %_M_p.i.i8.i.i.i51, align 8, !tbaa !66
  %call.i.i.i.i56 = call i32 @wmemcmp(i32* %31, i32* %30, i64 %28) #51
  br label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i60

_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i60: ; preds = %if.end.i.i.i.i57, %land.rhs.i.i.i55
  %storemerge.i.i.i.i58 = phi i32 [ %call.i.i.i.i56, %if.end.i.i.i.i57 ], [ 0, %land.rhs.i.i.i55 ]
  %tobool.i.i.i59 = icmp eq i32 %storemerge.i.i.i.i58, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i64

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i64: ; preds = %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i60, %for.body
  %32 = phi i1 [ false, %for.body ], [ %tobool.i.i.i59, %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i60 ]
  %33 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i61, align 8, !tbaa !66
  %cmp.i.i.i.i.i63 = icmp eq i32* %33, %12
  br i1 %cmp.i.i.i.i.i63, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71, label %if.then.i.i.i.i70

if.then.i.i.i.i70:                                ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i64
  %.cast.i.i.i.i.i.i.i69 = bitcast i32* %33 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i69) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71: ; preds = %if.then.i.i.i.i70, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i64
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %7)
  br i1 %32, label %return, label %if.end

if.end:                                           ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71
  %incdec.ptr.i73 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288301, i64 1
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i73, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  %34 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %incdec.ptr.i73, align 8, !tbaa !27
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %13)
  %35 = bitcast %"class.Kalmar::KalmarDevice"* %34 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i82 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %35, align 8, !tbaa !37
  %36 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i82, align 8
  call void %36(%"class.std::__cxx11::basic_string.10"* sret %14, %"class.Kalmar::KalmarDevice"* %34) #43
  %37 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i83, align 8, !tbaa !70
  %38 = load i64, i64* %_M_string_length.i6.i.i.i49, align 8, !tbaa !70
  %cmp.i.i.i85 = icmp eq i64 %37, %38
  br i1 %cmp.i.i.i85, label %land.rhs.i.i.i90, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i99

land.rhs.i.i.i90:                                 ; preds = %if.end
  %cmp.i.i.i.i89 = icmp eq i64 %37, 0
  br i1 %cmp.i.i.i.i89, label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i95, label %if.end.i.i.i.i92

if.end.i.i.i.i92:                                 ; preds = %land.rhs.i.i.i90
  %39 = load i32*, i32** %_M_p.i.i.i.i.i52, align 8, !tbaa !66
  %40 = load i32*, i32** %_M_p.i.i8.i.i.i86, align 8, !tbaa !66
  %call.i.i.i.i91 = call i32 @wmemcmp(i32* %40, i32* %39, i64 %37) #51
  br label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i95

_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i95: ; preds = %if.end.i.i.i.i92, %land.rhs.i.i.i90
  %storemerge.i.i.i.i93 = phi i32 [ %call.i.i.i.i91, %if.end.i.i.i.i92 ], [ 0, %land.rhs.i.i.i90 ]
  %tobool.i.i.i94 = icmp eq i32 %storemerge.i.i.i.i93, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i99

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i99: ; preds = %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i95, %if.end
  %41 = phi i1 [ false, %if.end ], [ %tobool.i.i.i94, %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i95 ]
  %42 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i96, align 8, !tbaa !66
  %cmp.i.i.i.i.i98 = icmp eq i32* %42, %16
  br i1 %cmp.i.i.i.i.i98, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106, label %if.then.i.i.i.i105

if.then.i.i.i.i105:                               ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i99
  %.cast.i.i.i.i.i.i.i104 = bitcast i32* %42 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i104) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106: ; preds = %if.then.i.i.i.i105, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i99
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %13)
  br i1 %41, label %return, label %if.end6

if.end6:                                          ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106
  %incdec.ptr.i108 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288301, i64 2
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i108, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  %43 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %incdec.ptr.i108, align 8, !tbaa !27
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %17)
  %44 = bitcast %"class.Kalmar::KalmarDevice"* %43 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i117 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %44, align 8, !tbaa !37
  %45 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i117, align 8
  call void %45(%"class.std::__cxx11::basic_string.10"* sret %18, %"class.Kalmar::KalmarDevice"* %43) #43
  %46 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i118, align 8, !tbaa !70
  %47 = load i64, i64* %_M_string_length.i6.i.i.i49, align 8, !tbaa !70
  %cmp.i.i.i120 = icmp eq i64 %46, %47
  br i1 %cmp.i.i.i120, label %land.rhs.i.i.i125, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i134

land.rhs.i.i.i125:                                ; preds = %if.end6
  %cmp.i.i.i.i124 = icmp eq i64 %46, 0
  br i1 %cmp.i.i.i.i124, label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i130, label %if.end.i.i.i.i127

if.end.i.i.i.i127:                                ; preds = %land.rhs.i.i.i125
  %48 = load i32*, i32** %_M_p.i.i.i.i.i52, align 8, !tbaa !66
  %49 = load i32*, i32** %_M_p.i.i8.i.i.i121, align 8, !tbaa !66
  %call.i.i.i.i126 = call i32 @wmemcmp(i32* %49, i32* %48, i64 %46) #51
  br label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i130

_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i130: ; preds = %if.end.i.i.i.i127, %land.rhs.i.i.i125
  %storemerge.i.i.i.i128 = phi i32 [ %call.i.i.i.i126, %if.end.i.i.i.i127 ], [ 0, %land.rhs.i.i.i125 ]
  %tobool.i.i.i129 = icmp eq i32 %storemerge.i.i.i.i128, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i134

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i134: ; preds = %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i130, %if.end6
  %50 = phi i1 [ false, %if.end6 ], [ %tobool.i.i.i129, %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i130 ]
  %51 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i131, align 8, !tbaa !66
  %cmp.i.i.i.i.i133 = icmp eq i32* %51, %20
  br i1 %cmp.i.i.i.i.i133, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141, label %if.then.i.i.i.i140

if.then.i.i.i.i140:                               ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i134
  %.cast.i.i.i.i.i.i.i139 = bitcast i32* %51 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i139) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141: ; preds = %if.then.i.i.i.i140, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i134
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %17)
  br i1 %50, label %return, label %if.end11

if.end11:                                         ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141
  %incdec.ptr.i143 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288301, i64 3
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i143, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  %52 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %incdec.ptr.i143, align 8, !tbaa !27
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %21)
  %53 = bitcast %"class.Kalmar::KalmarDevice"* %52 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i152 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %53, align 8, !tbaa !37
  %54 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i152, align 8
  call void %54(%"class.std::__cxx11::basic_string.10"* sret %22, %"class.Kalmar::KalmarDevice"* %52) #43
  %55 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i153, align 8, !tbaa !70
  %56 = load i64, i64* %_M_string_length.i6.i.i.i49, align 8, !tbaa !70
  %cmp.i.i.i155 = icmp eq i64 %55, %56
  br i1 %cmp.i.i.i155, label %land.rhs.i.i.i160, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i169

land.rhs.i.i.i160:                                ; preds = %if.end11
  %cmp.i.i.i.i159 = icmp eq i64 %55, 0
  br i1 %cmp.i.i.i.i159, label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i165, label %if.end.i.i.i.i162

if.end.i.i.i.i162:                                ; preds = %land.rhs.i.i.i160
  %57 = load i32*, i32** %_M_p.i.i.i.i.i52, align 8, !tbaa !66
  %58 = load i32*, i32** %_M_p.i.i8.i.i.i156, align 8, !tbaa !66
  %call.i.i.i.i161 = call i32 @wmemcmp(i32* %58, i32* %57, i64 %55) #51
  br label %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i165

_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i165: ; preds = %if.end.i.i.i.i162, %land.rhs.i.i.i160
  %storemerge.i.i.i.i163 = phi i32 [ %call.i.i.i.i161, %if.end.i.i.i.i162 ], [ 0, %land.rhs.i.i.i160 ]
  %tobool.i.i.i164 = icmp eq i32 %storemerge.i.i.i.i163, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i169

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i169: ; preds = %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i165, %if.end11
  %59 = phi i1 [ false, %if.end11 ], [ %tobool.i.i.i164, %_ZNSt11char_traitsIwE7compareEPKwS2_m.exit.i.i.i165 ]
  %60 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i166, align 8, !tbaa !66
  %cmp.i.i.i.i.i168 = icmp eq i32* %60, %24
  br i1 %cmp.i.i.i.i.i168, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176, label %if.then.i.i.i.i175

if.then.i.i.i.i175:                               ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i169
  %.cast.i.i.i.i.i.i.i174 = bitcast i32* %60 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i174) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176: ; preds = %if.then.i.i.i.i175, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i169
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %21)
  br i1 %59, label %return, label %if.end16

if.end16:                                         ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176
  %incdec.ptr.i178 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288301, i64 4
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i178, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  %dec = add nsw i64 %storemerge292, -1
  %cmp = icmp sgt i64 %dec, 0
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %if.end16
  %61 = ptrtoint %"class.Kalmar::KalmarDevice"** %incdec.ptr.i178 to i64
  %.pre302 = sub i64 %2, %61
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %sub.ptr.sub.i181.pre-phi = phi i64 [ %.pre302, %for.end.loopexit ], [ %sub.ptr.sub.i, %entry ]
  %retval.sroa.0.0288300 = phi %"class.Kalmar::KalmarDevice"** [ %incdec.ptr.i178, %for.end.loopexit ], [ %5, %entry ]
  %sub.ptr.div.i182 = ashr exact i64 %sub.ptr.sub.i181.pre-phi, 3
  switch i64 %sub.ptr.div.i182, label %return [
    i64 3, label %sw.bb
    i64 2, label %for.end.sw.bb24_crit_edge
    i64 1, label %for.end.sw.bb30_crit_edge
  ]

for.end.sw.bb30_crit_edge:                        ; preds = %for.end
  %.phi.trans.insert293 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_pred", %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %__pred, i32 0, i32 0, i32 0
  %.pre294 = load %"class.std::__cxx11::basic_string.10"*, %"class.std::__cxx11::basic_string.10"* addrspace(5)* %.phi.trans.insert293, align 8, !tbaa !107
  %.pre306 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %.pre294, i64 0, i32 1
  br label %sw.bb30

for.end.sw.bb24_crit_edge:                        ; preds = %for.end
  %.phi.trans.insert = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_pred", %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %__pred, i32 0, i32 0, i32 0
  %.pre = load %"class.std::__cxx11::basic_string.10"*, %"class.std::__cxx11::basic_string.10"* addrspace(5)* %.phi.trans.insert, align 8, !tbaa !107
  %.pre304 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %.pre, i64 0, i32 1
  br label %sw.bb24

sw.bb:                                            ; preds = %for.end
  %62 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288300, align 8, !tbaa !27
  %63 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i188 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %63)
  %64 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i188 to %"class.std::__cxx11::basic_string.10"*
  %65 = bitcast %"class.Kalmar::KalmarDevice"* %62 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i191 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %65, align 8, !tbaa !37
  %66 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i191, align 8
  call void %66(%"class.std::__cxx11::basic_string.10"* sret %64, %"class.Kalmar::KalmarDevice"* %62) #43
  %67 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_pred", %"struct.__gnu_cxx::__ops::_Iter_pred" addrspace(5)* %__pred, i32 0, i32 0, i32 0
  %68 = load %"class.std::__cxx11::basic_string.10"*, %"class.std::__cxx11::basic_string.10"* addrspace(5)* %67, align 8, !tbaa !107
  %_M_string_length.i.i.i.i192 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i188, i32 0, i32 1
  %69 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i192, align 8, !tbaa !70
  %_M_string_length.i6.i.i.i193 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %68, i64 0, i32 1
  %70 = load i64, i64* %_M_string_length.i6.i.i.i193, align 8, !tbaa !70
  %cmp.i.i.i194 = icmp eq i64 %69, %70
  br i1 %cmp.i.i.i194, label %land.rhs.i.i.i199, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208

land.rhs.i.i.i199:                                ; preds = %sw.bb
  %cmp.i.i.i.i198 = icmp eq i64 %69, 0
  br i1 %cmp.i.i.i.i198, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208, label %if.end.i.i.i.i201

if.end.i.i.i.i201:                                ; preds = %land.rhs.i.i.i199
  %_M_p.i.i.i.i.i196 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %68, i64 0, i32 0, i32 0
  %71 = load i32*, i32** %_M_p.i.i.i.i.i196, align 8, !tbaa !66
  %_M_p.i.i8.i.i.i195 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %64, i64 0, i32 0, i32 0
  %72 = load i32*, i32** %_M_p.i.i8.i.i.i195, align 8, !tbaa !66
  %call.i.i.i.i200 = call i32 @wmemcmp(i32* %72, i32* %71, i64 %69) #51
  %phitmp290 = icmp eq i32 %call.i.i.i.i200, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208: ; preds = %if.end.i.i.i.i201, %land.rhs.i.i.i199, %sw.bb
  %73 = phi i1 [ false, %sw.bb ], [ %phitmp290, %if.end.i.i.i.i201 ], [ true, %land.rhs.i.i.i199 ]
  %_M_p.i.i.i.i.i.i205 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i188, i32 0, i32 0, i32 0
  %74 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i205, align 8, !tbaa !66
  %75 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i188, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i206 = bitcast %union.anon addrspace(5)* %75 to i32 addrspace(5)*
  %76 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i206 to i32*
  %cmp.i.i.i.i.i207 = icmp eq i32* %74, %76
  br i1 %cmp.i.i.i.i.i207, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215, label %if.then.i.i.i.i214

if.then.i.i.i.i214:                               ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208
  %.cast.i.i.i.i.i.i.i213 = bitcast i32* %74 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i213) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215: ; preds = %if.then.i.i.i.i214, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i208
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %63)
  br i1 %73, label %return, label %if.end22

if.end22:                                         ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215
  %incdec.ptr.i217 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288300, i64 1
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i217, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  br label %sw.bb24

sw.bb24:                                          ; preds = %if.end22, %for.end.sw.bb24_crit_edge
  %_M_string_length.i6.i.i.i228.pre-phi = phi i64* [ %.pre304, %for.end.sw.bb24_crit_edge ], [ %_M_string_length.i6.i.i.i193, %if.end22 ]
  %retval.sroa.0.0288299 = phi %"class.Kalmar::KalmarDevice"** [ %retval.sroa.0.0288300, %for.end.sw.bb24_crit_edge ], [ %incdec.ptr.i217, %if.end22 ]
  %77 = phi %"class.std::__cxx11::basic_string.10"* [ %.pre, %for.end.sw.bb24_crit_edge ], [ %68, %if.end22 ]
  %78 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288299, align 8, !tbaa !27
  %79 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i223 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %79)
  %80 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i223 to %"class.std::__cxx11::basic_string.10"*
  %81 = bitcast %"class.Kalmar::KalmarDevice"* %78 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i226 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %81, align 8, !tbaa !37
  %82 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i226, align 8
  call void %82(%"class.std::__cxx11::basic_string.10"* sret %80, %"class.Kalmar::KalmarDevice"* %78) #43
  %_M_string_length.i.i.i.i227 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i223, i32 0, i32 1
  %83 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i227, align 8, !tbaa !70
  %84 = load i64, i64* %_M_string_length.i6.i.i.i228.pre-phi, align 8, !tbaa !70
  %cmp.i.i.i229 = icmp eq i64 %83, %84
  br i1 %cmp.i.i.i229, label %land.rhs.i.i.i234, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243

land.rhs.i.i.i234:                                ; preds = %sw.bb24
  %cmp.i.i.i.i233 = icmp eq i64 %83, 0
  br i1 %cmp.i.i.i.i233, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243, label %if.end.i.i.i.i236

if.end.i.i.i.i236:                                ; preds = %land.rhs.i.i.i234
  %_M_p.i.i.i.i.i231 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %77, i64 0, i32 0, i32 0
  %85 = load i32*, i32** %_M_p.i.i.i.i.i231, align 8, !tbaa !66
  %_M_p.i.i8.i.i.i230 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %80, i64 0, i32 0, i32 0
  %86 = load i32*, i32** %_M_p.i.i8.i.i.i230, align 8, !tbaa !66
  %call.i.i.i.i235 = call i32 @wmemcmp(i32* %86, i32* %85, i64 %83) #51
  %phitmp289 = icmp eq i32 %call.i.i.i.i235, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243: ; preds = %if.end.i.i.i.i236, %land.rhs.i.i.i234, %sw.bb24
  %87 = phi i1 [ false, %sw.bb24 ], [ %phitmp289, %if.end.i.i.i.i236 ], [ true, %land.rhs.i.i.i234 ]
  %_M_p.i.i.i.i.i.i240 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i223, i32 0, i32 0, i32 0
  %88 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i240, align 8, !tbaa !66
  %89 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i223, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i241 = bitcast %union.anon addrspace(5)* %89 to i32 addrspace(5)*
  %90 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i241 to i32*
  %cmp.i.i.i.i.i242 = icmp eq i32* %88, %90
  br i1 %cmp.i.i.i.i.i242, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250, label %if.then.i.i.i.i249

if.then.i.i.i.i249:                               ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243
  %.cast.i.i.i.i.i.i.i248 = bitcast i32* %88 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i248) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250: ; preds = %if.then.i.i.i.i249, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i243
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %79)
  br i1 %87, label %return, label %if.end28

if.end28:                                         ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250
  %incdec.ptr.i252 = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288299, i64 1
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i252, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  br label %sw.bb30

sw.bb30:                                          ; preds = %if.end28, %for.end.sw.bb30_crit_edge
  %_M_string_length.i6.i.i.i.pre-phi = phi i64* [ %.pre306, %for.end.sw.bb30_crit_edge ], [ %_M_string_length.i6.i.i.i228.pre-phi, %if.end28 ]
  %retval.sroa.0.0288298 = phi %"class.Kalmar::KalmarDevice"** [ %retval.sroa.0.0288300, %for.end.sw.bb30_crit_edge ], [ %incdec.ptr.i252, %if.end28 ]
  %91 = phi %"class.std::__cxx11::basic_string.10"* [ %.pre294, %for.end.sw.bb30_crit_edge ], [ %77, %if.end28 ]
  %92 = load %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288298, align 8, !tbaa !27
  %93 = bitcast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 32, i8 addrspace(5)* %93)
  %94 = addrspacecast %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i to %"class.std::__cxx11::basic_string.10"*
  %95 = bitcast %"class.Kalmar::KalmarDevice"* %92 to void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)***
  %vtable.i.i = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)**, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*** %95, align 8, !tbaa !37
  %96 = load void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)*, void (%"class.std::__cxx11::basic_string.10"*, %"class.Kalmar::KalmarDevice"*)** %vtable.i.i, align 8
  call void %96(%"class.std::__cxx11::basic_string.10"* sret %94, %"class.Kalmar::KalmarDevice"* %92) #43
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i, i32 0, i32 1
  %97 = load i64, i64 addrspace(5)* %_M_string_length.i.i.i.i, align 8, !tbaa !70
  %98 = load i64, i64* %_M_string_length.i6.i.i.i.pre-phi, align 8, !tbaa !70
  %cmp.i.i.i = icmp eq i64 %97, %98
  br i1 %cmp.i.i.i, label %land.rhs.i.i.i, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i

land.rhs.i.i.i:                                   ; preds = %sw.bb30
  %cmp.i.i.i.i = icmp eq i64 %97, 0
  br i1 %cmp.i.i.i.i, label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i, label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %land.rhs.i.i.i
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %91, i64 0, i32 0, i32 0
  %99 = load i32*, i32** %_M_p.i.i.i.i.i, align 8, !tbaa !66
  %_M_p.i.i8.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10"* %94, i64 0, i32 0, i32 0
  %100 = load i32*, i32** %_M_p.i.i8.i.i.i, align 8, !tbaa !66
  %call.i.i.i.i = call i32 @wmemcmp(i32* %100, i32* %99, i64 %97) #51
  %phitmp = icmp eq i32 %call.i.i.i.i, 0
  br label %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i

_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i: ; preds = %if.end.i.i.i.i, %land.rhs.i.i.i, %sw.bb30
  %101 = phi i1 [ false, %sw.bb30 ], [ %phitmp, %if.end.i.i.i.i ], [ true, %land.rhs.i.i.i ]
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i, i32 0, i32 0, i32 0
  %102 = load i32*, i32* addrspace(5)* %_M_p.i.i.i.i.i.i, align 8, !tbaa !66
  %103 = getelementptr inbounds %"class.std::__cxx11::basic_string.10", %"class.std::__cxx11::basic_string.10" addrspace(5)* %ref.tmp.i.i, i32 0, i32 2
  %arraydecay.i.i.i.i.i.i = bitcast %union.anon addrspace(5)* %103 to i32 addrspace(5)*
  %104 = addrspacecast i32 addrspace(5)* %arraydecay.i.i.i.i.i.i to i32*
  %cmp.i.i.i.i.i = icmp eq i32* %102, %104
  br i1 %cmp.i.i.i.i.i, label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i
  %.cast.i.i.i.i.i.i.i = bitcast i32* %102 to i8*
  call void @_ZdlPv(i8* %.cast.i.i.i.i.i.i.i) #45
  br label %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit

_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit: ; preds = %if.then.i.i.i.i, %_ZSteqIwEN9__gnu_cxx11__enable_ifIXsr9__is_charIT_EE7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS2_St11char_traitsIS2_ESaIS2_EEESC_.exit.i.i
  call void @llvm.lifetime.end.p5i8(i64 32, i8 addrspace(5)* %93)
  br i1 %101, label %return, label %if.end34

if.end34:                                         ; preds = %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit
  %incdec.ptr.i = getelementptr inbounds %"class.Kalmar::KalmarDevice"*, %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288298, i64 1
  store %"class.Kalmar::KalmarDevice"** %incdec.ptr.i, %"class.Kalmar::KalmarDevice"** addrspace(5)* %_M_current.i2.i, align 8, !tbaa !105
  br label %return

return:                                           ; preds = %if.end34, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215, %for.end, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71
  %retval.sroa.0.0288 = phi %"class.Kalmar::KalmarDevice"** [ %retval.sroa.0.0288300, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit215 ], [ %retval.sroa.0.0288299, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit250 ], [ %retval.sroa.0.0288298, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit ], [ %6, %if.end34 ], [ %6, %for.end ], [ %incdec.ptr.i143, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit176 ], [ %incdec.ptr.i108, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit141 ], [ %incdec.ptr.i73, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit106 ], [ %retval.sroa.0.0288301, %_ZN9__gnu_cxx5__ops10_Iter_predIZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS2_12KalmarDeviceEE_EclINS_17__normal_iteratorIPPSA_St6vectorISH_SaISH_EEEEEEbT_.exit71 ]
  ret %"class.Kalmar::KalmarDevice"** %retval.sroa.0.0288
}

define linkonce_odr void @_ZN6Kalmar12KalmarDevice17get_default_queueEv(%"class.std::shared_ptr.17"* noalias sret %agg.result, %"class.Kalmar::KalmarDevice"* %this) local_unnamed_addr #7 align 2 {
entry:
  %agg.tmp.i.i84 = alloca %"struct.std::_Rb_tree_const_iterator", align 8, addrspace(5)
  %agg.tmp.i.i = alloca %"struct.std::_Rb_tree_const_iterator", align 8, addrspace(5)
  %tid = alloca %"class.std::thread::id", align 8, addrspace(5)
  %0 = addrspacecast %"class.std::thread::id" addrspace(5)* %tid to %"class.std::thread::id"*
  %ref.tmp9 = alloca %"class.std::shared_ptr.17", align 8, addrspace(5)
  %1 = addrspacecast %"class.std::shared_ptr.17" addrspace(5)* %ref.tmp9 to %"class.std::shared_ptr.17"*
  %call.i.i = tail call i64 @pthread_self() #45
  %coerce.dive = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id" addrspace(5)* %tid, i32 0, i32 0
  store i64 %call.i.i, i64 addrspace(5)* %coerce.dive, align 8
  %_M_mutex.i = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 4, i32 0, i32 0
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %_ZL20__gthread_mutex_lockP15pthread_mutex_t.exit.i, label %_ZNSt5mutex4lockEv.exit

_ZL20__gthread_mutex_lockP15pthread_mutex_t.exit.i: ; preds = %entry
  %call1.i.i = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* nonnull %_M_mutex.i) #45
  %tobool.i = icmp eq i32 %call1.i.i, 0
  br i1 %tobool.i, label %_ZNSt5mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZL20__gthread_mutex_lockP15pthread_mutex_t.exit.i
  tail call void @_ZSt20__throw_system_errori(i32 %call1.i.i) #46
  unreachable

_ZNSt5mutex4lockEv.exit:                          ; preds = %_ZL20__gthread_mutex_lockP15pthread_mutex_t.exit.i, %entry
  %_M_t.i = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 3, i32 0
  %_M_parent.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 3, i32 0, i32 0, i32 1, i32 1
  %2 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_parent.i.i.i to %"struct.std::_Rb_tree_node"**
  %_M_header.i21.i.i = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 3, i32 0, i32 0, i32 1
  %3 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_header.i21.i.i to %"struct.std::_Rb_tree_node"*
  %__x.addr.i.i.i.0375 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8, !tbaa !27
  %cmp.i18.i.i376 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0375, null
  br i1 %cmp.i18.i.i376, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_ESH_RS3_.exit.i.i, label %while.body.i.i.i

while.body.i.i.i:                                 ; preds = %while.body.i.i.i, %_ZNSt5mutex4lockEv.exit
  %__x.addr.i.i.i.0378 = phi %"struct.std::_Rb_tree_node"* [ %__x.addr.i.i.i.0, %while.body.i.i.i ], [ %__x.addr.i.i.i.0375, %_ZNSt5mutex4lockEv.exit ]
  %__y.addr.i17.i.i.0377 = phi %"struct.std::_Rb_tree_node"* [ %__y.addr.i17.i.i.1, %while.body.i.i.i ], [ %3, %_ZNSt5mutex4lockEv.exit ]
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0378, i64 0, i32 1, i32 0, i64 0
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !31
  %cmp.i.i.i.i.i = icmp ult i64 %6, %call.i.i
  %_M_right.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0378, i64 0, i32 0, i32 3
  %_M_left.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0378, i64 0, i32 0, i32 2
  %__y.addr.i17.i.i.1 = select i1 %cmp.i.i.i.i.i, %"struct.std::_Rb_tree_node"* %__y.addr.i17.i.i.0377, %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0378
  %storemerge.i.i.i.in.in = select i1 %cmp.i.i.i.i.i, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i.i.i, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i.i.i
  %storemerge.i.i.i.in = bitcast %"struct.std::_Rb_tree_node_base"** %storemerge.i.i.i.in.in to %"struct.std::_Rb_tree_node"**
  %__x.addr.i.i.i.0 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %storemerge.i.i.i.in, align 8, !tbaa !27
  %cmp.i18.i.i = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.0, null
  br i1 %cmp.i18.i.i, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_ESH_RS3_.exit.i.i, label %while.body.i.i.i

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_ESH_RS3_.exit.i.i: ; preds = %while.body.i.i.i, %_ZNSt5mutex4lockEv.exit
  %__y.addr.i17.i.i.0.lcssa = phi %"struct.std::_Rb_tree_node"* [ %3, %_ZNSt5mutex4lockEv.exit ], [ %__y.addr.i17.i.i.1, %while.body.i.i.i ]
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i17.i.i.0.lcssa, i64 0, i32 0
  %cmp.i.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %7, %_M_header.i21.i.i
  br i1 %cmp.i.i.i, label %cond.true.i.i, label %lor.lhs.false.i.i

lor.lhs.false.i.i:                                ; preds = %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_ESH_RS3_.exit.i.i
  %8 = ptrtoint %"struct.std::_Rb_tree_node"* %__y.addr.i17.i.i.0.lcssa to i64
  %9 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i17.i.i.0.lcssa, i64 0, i32 1, i32 0, i64 0
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !31
  %cmp.i.i.i.i = icmp ult i64 %call.i.i, %11
  br i1 %cmp.i.i.i.i, label %cond.true.i.i, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE4findERS9_.exit

cond.true.i.i:                                    ; preds = %lor.lhs.false.i.i, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_ESH_RS3_.exit.i.i
  %12 = ptrtoint %"struct.std::_Rb_tree_node_base"* %_M_header.i21.i.i to i64
  br label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE4findERS9_.exit

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE4findERS9_.exit: ; preds = %cond.true.i.i, %lor.lhs.false.i.i
  %retval.i.i.sroa.0.0 = phi i64 [ %12, %cond.true.i.i ], [ %8, %lor.lhs.false.i.i ]
  %13 = inttoptr i64 %retval.i.i.sroa.0.0 to %"struct.std::_Rb_tree_node_base"*
  %cmp.i = icmp eq %"struct.std::_Rb_tree_node_base"* %_M_header.i21.i.i, %13
  br i1 %cmp.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE4findERS9_.exit
  %14 = bitcast %"class.Kalmar::KalmarDevice"* %this to void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)***
  %vtable = load void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)**, void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)*** %14, align 8, !tbaa !37
  %vfn = getelementptr inbounds void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)*, void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)** %vtable, i64 14
  %15 = load void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)*, void (%"class.std::shared_ptr.17"*, %"class.Kalmar::KalmarDevice"*, i32)** %vfn, align 8
  call void %15(%"class.std::shared_ptr.17"* sret %1, %"class.Kalmar::KalmarDevice"* %this, i32 0) #43
  %__x.addr.i.i.i.i93.0370 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8, !tbaa !27
  %cmp.i.i.i.i106371 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0370, null
  br i1 %cmp.i.i.i.i106371, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i132, label %while.body.i.i.i.i114

while.body.i.i.i.i114:                            ; preds = %while.body.i.i.i.i114, %if.then
  %__x.addr.i.i.i.i93.0373 = phi %"struct.std::_Rb_tree_node"* [ %__x.addr.i.i.i.i93.0, %while.body.i.i.i.i114 ], [ %__x.addr.i.i.i.i93.0370, %if.then ]
  %__y.addr.i.i.i.i94.0372 = phi %"struct.std::_Rb_tree_node"* [ %__y.addr.i.i.i.i94.1, %while.body.i.i.i.i114 ], [ %3, %if.then ]
  %16 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0373, i64 0, i32 1, i32 0, i64 0
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !31
  %cmp.i.i.i.i.i.i113 = icmp ult i64 %18, %call.i.i
  %_M_right.i.i.i.i.i117 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0373, i64 0, i32 0, i32 3
  %_M_left.i.i.i.i.i115 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0373, i64 0, i32 0, i32 2
  %__y.addr.i.i.i.i94.1 = select i1 %cmp.i.i.i.i.i.i113, %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i94.0372, %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0373
  %storemerge.i.i.i.i119.in.in = select i1 %cmp.i.i.i.i.i.i113, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i.i.i.i117, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i.i.i.i115
  %storemerge.i.i.i.i119.in = bitcast %"struct.std::_Rb_tree_node_base"** %storemerge.i.i.i.i119.in.in to %"struct.std::_Rb_tree_node"**
  %__x.addr.i.i.i.i93.0 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %storemerge.i.i.i.i119.in, align 8, !tbaa !27
  %cmp.i.i.i.i106 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i93.0, null
  br i1 %cmp.i.i.i.i106, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i132, label %while.body.i.i.i.i114

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i132: ; preds = %while.body.i.i.i.i114, %if.then
  %__y.addr.i.i.i.i94.0.lcssa = phi %"struct.std::_Rb_tree_node"* [ %3, %if.then ], [ %__y.addr.i.i.i.i94.1, %while.body.i.i.i.i114 ]
  %19 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i94.0.lcssa, i64 0, i32 0
  %20 = ptrtoint %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i94.0.lcssa to i64
  %cmp.i.i131 = icmp eq %"struct.std::_Rb_tree_node_base"* %19, %_M_header.i21.i.i
  br i1 %cmp.i.i131, label %if.then.i162, label %lor.rhs.i139

lor.rhs.i139:                                     ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i132
  %21 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i94.0.lcssa, i64 0, i32 1, i32 0, i64 0
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8, !tbaa !31
  %cmp.i.i25.i138 = icmp ult i64 %call.i.i, %23
  br i1 %cmp.i.i25.i138, label %if.then.i162, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit221

if.then.i162:                                     ; preds = %lor.rhs.i139, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i132
  %24 = bitcast %"struct.std::_Rb_tree_const_iterator" addrspace(5)* %agg.tmp.i.i84 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %24)
  %call2.i.i.i.i.i.i146 = call i8* @_Znwm(i64 56) #43
  %_M_storage.i.i.i16.i.i147 = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i146, i64 32
  %25 = bitcast i8* %_M_storage.i.i.i16.i.i147 to i64*
  store i64 %call.i.i, i64* %25, align 8, !tbaa !31
  %second.i.i.i.i.i.i.i.i154 = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i146, i64 40
  %_M_ptr.i.i.i.i.i.i.i.i.i.i155 = bitcast i8* %second.i.i.i.i.i.i.i.i154 to %"class.Kalmar::KalmarQueue"**
  store %"class.Kalmar::KalmarQueue"* null, %"class.Kalmar::KalmarQueue"** %_M_ptr.i.i.i.i.i.i.i.i.i.i155, align 8, !tbaa !81
  %_M_refcount.i.i.i.i.i.i.i.i.i.i156 = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i146, i64 48
  %_M_pi.i.i.i.i.i.i.i.i.i.i.i157 = bitcast i8* %_M_refcount.i.i.i.i.i.i.i.i.i.i156 to %"class.std::_Sp_counted_base"**
  store %"class.std::_Sp_counted_base"* null, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i.i.i.i.i.i.i.i157, align 8, !tbaa !84
  %26 = bitcast %"struct.std::_Rb_tree_const_iterator" addrspace(5)* %agg.tmp.i.i84 to i64 addrspace(5)*
  store i64 %20, i64 addrspace(5)* %26, align 8, !tbaa !27
  %first.i.i.i.i159 = bitcast i8* %_M_storage.i.i.i16.i.i147 to %"class.std::thread::id"*
  %call10.i.i160 = call %"struct.std::pair.23" @_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS3_(%"class.std::_Rb_tree"* nonnull %_M_t.i, %"struct.std::_Rb_tree_const_iterator" addrspace(5)* byval align 8 %agg.tmp.i.i84, %"class.std::thread::id"* nonnull dereferenceable(8) %first.i.i.i.i159) #43
  %27 = extractvalue %"struct.std::pair.23" %call10.i.i160, 0
  %28 = extractvalue %"struct.std::pair.23" %call10.i.i160, 1
  %tobool.i.i161 = icmp eq %"struct.std::_Rb_tree_node_base"* %28, null
  br i1 %tobool.i.i161, label %if.end.i.i189, label %if.then.i.i164

if.then.i.i164:                                   ; preds = %if.then.i162
  %cmp.i.i.i163 = icmp ne %"struct.std::_Rb_tree_node_base"* %27, null
  %cmp2.i.i.i166 = icmp eq %"struct.std::_Rb_tree_node_base"* %28, %_M_header.i21.i.i
  %or.cond = or i1 %cmp.i.i.i163, %cmp2.i.i.i166
  br i1 %or.cond, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i183, label %lor.rhs.i.i.i176

lor.rhs.i.i.i176:                                 ; preds = %if.then.i.i164
  %_M_storage.i.i.i.i.i.i171 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %28, i64 1
  %29 = load i64, i64* %25, align 8, !tbaa !31
  %30 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i.i.i171 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !31
  %cmp.i.i.i.i.i175 = icmp ult i64 %29, %31
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i183

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i183: ; preds = %lor.rhs.i.i.i176, %if.then.i.i164
  %32 = phi i1 [ true, %if.then.i.i164 ], [ %cmp.i.i.i.i.i175, %lor.rhs.i.i.i176 ]
  %33 = bitcast i8* %call2.i.i.i.i.i.i146 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %32, %"struct.std::_Rb_tree_node_base"* %33, %"struct.std::_Rb_tree_node_base"* nonnull %28, %"struct.std::_Rb_tree_node_base"* nonnull dereferenceable(32) %_M_header.i21.i.i) #45
  %_M_node_count.i.i.i178 = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 3, i32 0, i32 0, i32 2
  %34 = load i64, i64* %_M_node_count.i.i.i178, align 8, !tbaa !109
  %inc.i.i.i179 = add i64 %34, 1
  store i64 %inc.i.i.i179, i64* %_M_node_count.i.i.i178, align 8, !tbaa !109
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i218

if.end.i.i189:                                    ; preds = %if.then.i162
  %35 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i.i.i.i.i.i.i.i157, align 8, !tbaa !84
  %cmp.i.i.i.i.i.i.i.i.i188 = icmp eq %"class.std::_Sp_counted_base"* %35, null
  br i1 %cmp.i.i.i.i.i.i.i.i.i188, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215, label %if.then.i.i.i.i.i.i.i.i.i191

if.then.i.i.i.i.i.i.i.i.i191:                     ; preds = %if.end.i.i189
  %_M_use_count.i.i.i.i.i.i.i.i.i.i190 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %35, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i.i.i.i.i.i.i192, label %if.else.i.i.i.i.i.i.i.i.i.i.i194

if.then.i.i.i.i.i.i.i.i.i.i.i192:                 ; preds = %if.then.i.i.i.i.i.i.i.i.i191
  %36 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i190, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i197

if.else.i.i.i.i.i.i.i.i.i.i.i194:                 ; preds = %if.then.i.i.i.i.i.i.i.i.i191
  %37 = load i32, i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i190, align 4, !tbaa !22
  %add.i.i.i.i.i.i.i.i.i.i.i.i193 = add nsw i32 %37, -1
  store i32 %add.i.i.i.i.i.i.i.i.i.i.i.i193, i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i190, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i197

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i197: ; preds = %if.else.i.i.i.i.i.i.i.i.i.i.i194, %if.then.i.i.i.i.i.i.i.i.i.i.i192
  %storemerge.i.i.i.i.i.i.i.i.i.i.i195 = phi i32 [ %37, %if.else.i.i.i.i.i.i.i.i.i.i.i194 ], [ %36, %if.then.i.i.i.i.i.i.i.i.i.i.i192 ]
  %cmp.i.i.i.i.i.i.i.i.i.i196 = icmp eq i32 %storemerge.i.i.i.i.i.i.i.i.i.i.i195, 1
  br i1 %cmp.i.i.i.i.i.i.i.i.i.i196, label %if.then.i.i.i.i.i.i.i.i.i.i201, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215

if.then.i.i.i.i.i.i.i.i.i.i201:                   ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i197
  %38 = bitcast %"class.std::_Sp_counted_base"* %35 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i.i.i.i.i.i198 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %38, align 8, !tbaa !37
  %vfn.i.i.i.i.i.i.i.i.i.i199 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i.i.i.i.i.i198, i64 2
  %39 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i.i.i.i.i.i199, align 8
  call void %39(%"class.std::_Sp_counted_base"* nonnull %35) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i.i.i.i.i.i.i200 = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %35, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i.i.i.i.i.i202, label %if.else.i10.i.i.i.i.i.i.i.i.i.i204

if.then.i8.i.i.i.i.i.i.i.i.i.i202:                ; preds = %if.then.i.i.i.i.i.i.i.i.i.i201
  %40 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i200, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i207

if.else.i10.i.i.i.i.i.i.i.i.i.i204:               ; preds = %if.then.i.i.i.i.i.i.i.i.i.i201
  %41 = load i32, i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i200, align 4, !tbaa !22
  %add.i.i9.i.i.i.i.i.i.i.i.i.i203 = add nsw i32 %41, -1
  store i32 %add.i.i9.i.i.i.i.i.i.i.i.i.i203, i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i200, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i207

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i207: ; preds = %if.else.i10.i.i.i.i.i.i.i.i.i.i204, %if.then.i8.i.i.i.i.i.i.i.i.i.i202
  %storemerge.i11.i.i.i.i.i.i.i.i.i.i205 = phi i32 [ %41, %if.else.i10.i.i.i.i.i.i.i.i.i.i204 ], [ %40, %if.then.i8.i.i.i.i.i.i.i.i.i.i202 ]
  %cmp3.i.i.i.i.i.i.i.i.i.i206 = icmp eq i32 %storemerge.i11.i.i.i.i.i.i.i.i.i.i205, 1
  br i1 %cmp3.i.i.i.i.i.i.i.i.i.i206, label %if.then4.i.i.i.i.i.i.i.i.i.i210, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215

if.then4.i.i.i.i.i.i.i.i.i.i210:                  ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i207
  %vtable5.i.i.i.i.i.i.i.i.i.i208 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %38, align 8, !tbaa !37
  %vfn6.i.i.i.i.i.i.i.i.i.i209 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i.i.i.i.i.i208, i64 3
  %42 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i.i.i.i.i.i209, align 8
  call void %42(%"class.std::_Sp_counted_base"* nonnull %35) #45
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215: ; preds = %if.then4.i.i.i.i.i.i.i.i.i.i210, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i207, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i197, %if.end.i.i189
  call void @_ZdlPv(i8* nonnull %call2.i.i.i.i.i.i146) #45
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i218

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i218: ; preds = %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i183
  %retval.i.i81.sroa.0.0 = phi %"struct.std::_Rb_tree_node_base"* [ %27, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i215 ], [ %33, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i183 ]
  %retval.i.i81.sroa.0.0.ptr = bitcast %"struct.std::_Rb_tree_node_base"* %retval.i.i81.sroa.0.0 to %"struct.std::_Rb_tree_node"*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %24)
  br label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit221

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit221: ; preds = %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i218, %lor.rhs.i139
  %__i.i97.sroa.0.0.ptr = phi %"struct.std::_Rb_tree_node"* [ %retval.i.i81.sroa.0.0.ptr, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i218 ], [ %__y.addr.i.i.i.i94.0.lcssa, %lor.rhs.i139 ]
  %second.i220 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__i.i97.sroa.0.0.ptr, i64 0, i32 1, i32 0, i64 8
  %43 = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17" addrspace(5)* %ref.tmp9, i32 0, i32 0
  %44 = addrspacecast %"class.std::__shared_ptr.18" addrspace(5)* %43 to %"class.std::__shared_ptr.18"*
  %45 = bitcast %"class.std::shared_ptr.17" addrspace(5)* %ref.tmp9 to i64 addrspace(5)*
  %46 = load i64, i64 addrspace(5)* %45, align 8, !tbaa !27
  %_M_refcount4.i.i.i = getelementptr inbounds %"class.std::__shared_ptr.18", %"class.std::__shared_ptr.18"* %44, i64 0, i32 1
  %47 = bitcast %"class.std::__shared_count"* %_M_refcount4.i.i.i to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !84
  store i64 0, i64* %47, align 8, !tbaa !84
  %_M_ptr5.i.i.i = getelementptr inbounds %"class.std::__shared_ptr.18", %"class.std::__shared_ptr.18"* %44, i64 0, i32 0
  store %"class.Kalmar::KalmarQueue"* null, %"class.Kalmar::KalmarQueue"** %_M_ptr5.i.i.i, align 8, !tbaa !81
  %49 = bitcast i8* %second.i220 to i64*
  store i64 %46, i64* %49, align 8, !tbaa !27
  %_M_refcount3.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__i.i97.sroa.0.0.ptr, i64 0, i32 1, i32 0, i64 16
  %50 = bitcast i8* %_M_refcount3.i.i.i to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !84
  store i64 %48, i64* %50, align 8, !tbaa !84
  %.cast = inttoptr i64 %51 to %"class.std::_Sp_counted_base"*
  %cmp.i.i.i.i223 = icmp eq i64 %51, 0
  br i1 %cmp.i.i.i.i223, label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit, label %if.then.i.i.i.i224

if.then.i.i.i.i224:                               ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit221
  %_M_use_count.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.cast, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %if.then.i.i.i.i224
  %52 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i

if.else.i.i.i.i.i.i:                              ; preds = %if.then.i.i.i.i224
  %53 = load i32, i32* %_M_use_count.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i.i = add nsw i32 %53, -1
  store i32 %add.i.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i, %if.then.i.i.i.i.i.i
  %storemerge.i.i.i.i.i.i = phi i32 [ %53, %if.else.i.i.i.i.i.i ], [ %52, %if.then.i.i.i.i.i.i ]
  %cmp.i.i.i.i.i225 = icmp eq i32 %storemerge.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i225, label %if.then.i.i.i.i.i226, label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit

if.then.i.i.i.i.i226:                             ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i
  %54 = inttoptr i64 %51 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %54, align 8, !tbaa !37
  %vfn.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i, i64 2
  %55 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i, align 8
  call void %55(%"class.std::_Sp_counted_base"* nonnull %.cast) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %.cast, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i, label %if.else.i10.i.i.i.i.i

if.then.i8.i.i.i.i.i:                             ; preds = %if.then.i.i.i.i.i226
  %56 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i

if.else.i10.i.i.i.i.i:                            ; preds = %if.then.i.i.i.i.i226
  %57 = load i32, i32* %_M_weak_count.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i9.i.i.i.i.i = add nsw i32 %57, -1
  store i32 %add.i.i9.i.i.i.i.i, i32* %_M_weak_count.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i: ; preds = %if.else.i10.i.i.i.i.i, %if.then.i8.i.i.i.i.i
  %storemerge.i11.i.i.i.i.i = phi i32 [ %57, %if.else.i10.i.i.i.i.i ], [ %56, %if.then.i8.i.i.i.i.i ]
  %cmp3.i.i.i.i.i = icmp eq i32 %storemerge.i11.i.i.i.i.i, 1
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit

if.then4.i.i.i.i.i:                               ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i
  %vtable5.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %54, align 8, !tbaa !37
  %vfn6.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i, i64 3
  %58 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i, align 8
  call void %58(%"class.std::_Sp_counted_base"* nonnull %.cast) #45
  br label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit

_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit: ; preds = %if.then4.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit221
  %_M_pi.i.i = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17" addrspace(5)* %ref.tmp9, i32 0, i32 0, i32 1, i32 0
  %59 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"* addrspace(5)* %_M_pi.i.i, align 8, !tbaa !84
  %cmp.i.i227 = icmp eq %"class.std::_Sp_counted_base"* %59, null
  br i1 %cmp.i.i227, label %if.end, label %if.then.i.i228

if.then.i.i228:                                   ; preds = %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit
  %_M_use_count.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %59, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i229, label %if.else.i.i.i.i230

if.then.i.i.i.i229:                               ; preds = %if.then.i.i228
  %60 = atomicrmw volatile add i32* %_M_use_count.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i

if.else.i.i.i.i230:                               ; preds = %if.then.i.i228
  %61 = load i32, i32* %_M_use_count.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i = add nsw i32 %61, -1
  store i32 %add.i.i.i.i.i, i32* %_M_use_count.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i: ; preds = %if.else.i.i.i.i230, %if.then.i.i.i.i229
  %storemerge.i.i.i.i231 = phi i32 [ %61, %if.else.i.i.i.i230 ], [ %60, %if.then.i.i.i.i229 ]
  %cmp.i.i.i232 = icmp eq i32 %storemerge.i.i.i.i231, 1
  br i1 %cmp.i.i.i232, label %if.then.i.i.i233, label %if.end

if.then.i.i.i233:                                 ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i
  %62 = bitcast %"class.std::_Sp_counted_base"* %59 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %62, align 8, !tbaa !37
  %vfn.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i, i64 2
  %63 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i, align 8
  call void %63(%"class.std::_Sp_counted_base"* nonnull %59) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %59, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i, label %if.else.i10.i.i.i

if.then.i8.i.i.i:                                 ; preds = %if.then.i.i.i233
  %64 = atomicrmw volatile add i32* %_M_weak_count.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i

if.else.i10.i.i.i:                                ; preds = %if.then.i.i.i233
  %65 = load i32, i32* %_M_weak_count.i.i.i, align 4, !tbaa !22
  %add.i.i9.i.i.i = add nsw i32 %65, -1
  store i32 %add.i.i9.i.i.i, i32* %_M_weak_count.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i: ; preds = %if.else.i10.i.i.i, %if.then.i8.i.i.i
  %storemerge.i11.i.i.i = phi i32 [ %65, %if.else.i10.i.i.i ], [ %64, %if.then.i8.i.i.i ]
  %cmp3.i.i.i = icmp eq i32 %storemerge.i11.i.i.i, 1
  br i1 %cmp3.i.i.i, label %if.then4.i.i.i, label %if.end

if.then4.i.i.i:                                   ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i
  %vtable5.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %62, align 8, !tbaa !37
  %vfn6.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i, i64 3
  %66 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i, align 8
  call void %66(%"class.std::_Sp_counted_base"* nonnull %59) #45
  br label %if.end

if.end:                                           ; preds = %if.then4.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i, %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEaSEOS2_.exit, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE4findERS9_.exit
  %__x.addr.i.i.i.i.0366 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8, !tbaa !27
  %cmp.i.i.i.i35367 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0366, null
  br i1 %cmp.i.i.i.i35367, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i, label %while.body.i.i.i.i.lr.ph

while.body.i.i.i.i.lr.ph:                         ; preds = %if.end
  %67 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %0, i64 0, i32 0
  %68 = load i64, i64* %67, align 8, !tbaa !31
  br label %while.body.i.i.i.i

while.body.i.i.i.i:                               ; preds = %while.body.i.i.i.i, %while.body.i.i.i.i.lr.ph
  %__x.addr.i.i.i.i.0369 = phi %"struct.std::_Rb_tree_node"* [ %__x.addr.i.i.i.i.0366, %while.body.i.i.i.i.lr.ph ], [ %__x.addr.i.i.i.i.0, %while.body.i.i.i.i ]
  %__y.addr.i.i.i.i34.0368 = phi %"struct.std::_Rb_tree_node"* [ %3, %while.body.i.i.i.i.lr.ph ], [ %__y.addr.i.i.i.i34.1, %while.body.i.i.i.i ]
  %69 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0369, i64 0, i32 1, i32 0, i64 0
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !31
  %cmp.i.i.i.i.i.i = icmp ult i64 %71, %68
  %_M_right.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0369, i64 0, i32 0, i32 3
  %_M_left.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0369, i64 0, i32 0, i32 2
  %__y.addr.i.i.i.i34.1 = select i1 %cmp.i.i.i.i.i.i, %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i34.0368, %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0369
  %storemerge.i.i.i.i.in.in = select i1 %cmp.i.i.i.i.i.i, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i.i.i.i, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i.i.i.i
  %storemerge.i.i.i.i.in = bitcast %"struct.std::_Rb_tree_node_base"** %storemerge.i.i.i.i.in.in to %"struct.std::_Rb_tree_node"**
  %__x.addr.i.i.i.i.0 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %storemerge.i.i.i.i.in, align 8, !tbaa !27
  %cmp.i.i.i.i35 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.i.i.i.i.0, null
  br i1 %cmp.i.i.i.i35, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i, label %while.body.i.i.i.i

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i: ; preds = %while.body.i.i.i.i, %if.end
  %__y.addr.i.i.i.i34.0.lcssa = phi %"struct.std::_Rb_tree_node"* [ %3, %if.end ], [ %__y.addr.i.i.i.i34.1, %while.body.i.i.i.i ]
  %72 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i34.0.lcssa, i64 0, i32 0
  %73 = ptrtoint %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i34.0.lcssa to i64
  %cmp.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %72, %_M_header.i21.i.i
  br i1 %cmp.i.i, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i.if.then.i39_crit_edge, label %lor.rhs.i

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i.if.then.i39_crit_edge: ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i
  %.phi.trans.insert = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %0, i64 0, i32 0
  %.pre = load i64, i64* %.phi.trans.insert, align 8, !tbaa !31
  br label %if.then.i39

lor.rhs.i:                                        ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i
  %74 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__y.addr.i.i.i.i34.0.lcssa, i64 0, i32 1, i32 0, i64 0
  %75 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %0, i64 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !31
  %77 = bitcast i8* %74 to i64*
  %78 = load i64, i64* %77, align 8, !tbaa !31
  %cmp.i.i25.i = icmp ult i64 %76, %78
  br i1 %cmp.i.i25.i, label %if.then.i39, label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit

if.then.i39:                                      ; preds = %lor.rhs.i, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i.if.then.i39_crit_edge
  %79 = phi i64 [ %.pre, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEE11lower_boundERS9_.exit.i.if.then.i39_crit_edge ], [ %76, %lor.rhs.i ]
  %80 = bitcast %"struct.std::_Rb_tree_const_iterator" addrspace(5)* %agg.tmp.i.i to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %80)
  %call2.i.i.i.i.i.i = call i8* @_Znwm(i64 56) #43
  %_M_storage.i.i.i16.i.i = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i, i64 32
  %81 = bitcast i8* %_M_storage.i.i.i16.i.i to i64*
  store i64 %79, i64* %81, align 8, !tbaa !31
  %second.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i, i64 40
  %_M_ptr.i.i.i.i.i.i.i.i.i.i = bitcast i8* %second.i.i.i.i.i.i.i.i to %"class.Kalmar::KalmarQueue"**
  store %"class.Kalmar::KalmarQueue"* null, %"class.Kalmar::KalmarQueue"** %_M_ptr.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !81
  %_M_refcount.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call2.i.i.i.i.i.i, i64 48
  %_M_pi.i.i.i.i.i.i.i.i.i.i.i = bitcast i8* %_M_refcount.i.i.i.i.i.i.i.i.i.i to %"class.std::_Sp_counted_base"**
  store %"class.std::_Sp_counted_base"* null, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !84
  %82 = bitcast %"struct.std::_Rb_tree_const_iterator" addrspace(5)* %agg.tmp.i.i to i64 addrspace(5)*
  store i64 %73, i64 addrspace(5)* %82, align 8, !tbaa !27
  %first.i.i.i.i38 = bitcast i8* %_M_storage.i.i.i16.i.i to %"class.std::thread::id"*
  %call10.i.i = call %"struct.std::pair.23" @_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS3_(%"class.std::_Rb_tree"* nonnull %_M_t.i, %"struct.std::_Rb_tree_const_iterator" addrspace(5)* byval align 8 %agg.tmp.i.i, %"class.std::thread::id"* nonnull dereferenceable(8) %first.i.i.i.i38) #43
  %83 = extractvalue %"struct.std::pair.23" %call10.i.i, 0
  %84 = extractvalue %"struct.std::pair.23" %call10.i.i, 1
  %tobool.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %84, null
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i41

if.then.i.i41:                                    ; preds = %if.then.i39
  %cmp.i.i.i40 = icmp ne %"struct.std::_Rb_tree_node_base"* %83, null
  %cmp2.i.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %84, %_M_header.i21.i.i
  %or.cond365 = or i1 %cmp.i.i.i40, %cmp2.i.i.i
  br i1 %or.cond365, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i, label %lor.rhs.i.i.i

lor.rhs.i.i.i:                                    ; preds = %if.then.i.i41
  %_M_storage.i.i.i.i.i.i43 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %84, i64 1
  %85 = load i64, i64* %81, align 8, !tbaa !31
  %86 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i.i.i43 to i64*
  %87 = load i64, i64* %86, align 8, !tbaa !31
  %cmp.i.i.i.i.i47 = icmp ult i64 %85, %87
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i: ; preds = %lor.rhs.i.i.i, %if.then.i.i41
  %88 = phi i1 [ true, %if.then.i.i41 ], [ %cmp.i.i.i.i.i47, %lor.rhs.i.i.i ]
  %89 = bitcast i8* %call2.i.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"*
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %88, %"struct.std::_Rb_tree_node_base"* %89, %"struct.std::_Rb_tree_node_base"* nonnull %84, %"struct.std::_Rb_tree_node_base"* nonnull dereferenceable(32) %_M_header.i21.i.i) #45
  %_M_node_count.i.i.i = getelementptr inbounds %"class.Kalmar::KalmarDevice", %"class.Kalmar::KalmarDevice"* %this, i64 0, i32 3, i32 0, i32 0, i32 2
  %90 = load i64, i64* %_M_node_count.i.i.i, align 8, !tbaa !109
  %inc.i.i.i = add i64 %90, 1
  store i64 %inc.i.i.i, i64* %_M_node_count.i.i.i, align 8, !tbaa !109
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i

if.end.i.i:                                       ; preds = %if.then.i39
  %91 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !84
  %cmp.i.i.i.i.i.i.i.i.i = icmp eq %"class.std::_Sp_counted_base"* %91, null
  br i1 %cmp.i.i.i.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i, label %if.then.i.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i.i:                        ; preds = %if.end.i.i
  %_M_use_count.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %91, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i.i.i.i:                    ; preds = %if.then.i.i.i.i.i.i.i.i.i
  %92 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i

if.else.i.i.i.i.i.i.i.i.i.i.i:                    ; preds = %if.then.i.i.i.i.i.i.i.i.i
  %93 = load i32, i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i.i.i.i.i.i.i = add nsw i32 %93, -1
  store i32 %add.i.i.i.i.i.i.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i.i.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i.i.i.i
  %storemerge.i.i.i.i.i.i.i.i.i.i.i = phi i32 [ %93, %if.else.i.i.i.i.i.i.i.i.i.i.i ], [ %92, %if.then.i.i.i.i.i.i.i.i.i.i.i ]
  %cmp.i.i.i.i.i.i.i.i.i.i = icmp eq i32 %storemerge.i.i.i.i.i.i.i.i.i.i.i, 1
  br i1 %cmp.i.i.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i

if.then.i.i.i.i.i.i.i.i.i.i:                      ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i
  %94 = bitcast %"class.std::_Sp_counted_base"* %91 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i.i.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %94, align 8, !tbaa !37
  %vfn.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i.i.i.i.i.i.i, i64 2
  %95 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i.i.i.i.i.i.i, align 8
  call void %95(%"class.std::_Sp_counted_base"* nonnull %91) #45
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !85
  call void asm sideeffect "", "~{memory}"() #47, !srcloc !86
  %_M_weak_count.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %91, i64 0, i32 3
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i8.i.i.i.i.i.i.i.i.i.i, label %if.else.i10.i.i.i.i.i.i.i.i.i.i

if.then.i8.i.i.i.i.i.i.i.i.i.i:                   ; preds = %if.then.i.i.i.i.i.i.i.i.i.i
  %96 = atomicrmw volatile add i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i

if.else.i10.i.i.i.i.i.i.i.i.i.i:                  ; preds = %if.then.i.i.i.i.i.i.i.i.i.i
  %97 = load i32, i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i, align 4, !tbaa !22
  %add.i.i9.i.i.i.i.i.i.i.i.i.i = add nsw i32 %97, -1
  store i32 %add.i.i9.i.i.i.i.i.i.i.i.i.i, i32* %_M_weak_count.i.i.i.i.i.i.i.i.i.i, align 4, !tbaa !22
  br label %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i

_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i: ; preds = %if.else.i10.i.i.i.i.i.i.i.i.i.i, %if.then.i8.i.i.i.i.i.i.i.i.i.i
  %storemerge.i11.i.i.i.i.i.i.i.i.i.i = phi i32 [ %97, %if.else.i10.i.i.i.i.i.i.i.i.i.i ], [ %96, %if.then.i8.i.i.i.i.i.i.i.i.i.i ]
  %cmp3.i.i.i.i.i.i.i.i.i.i = icmp eq i32 %storemerge.i11.i.i.i.i.i.i.i.i.i.i, 1
  br i1 %cmp3.i.i.i.i.i.i.i.i.i.i, label %if.then4.i.i.i.i.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i

if.then4.i.i.i.i.i.i.i.i.i.i:                     ; preds = %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i
  %vtable5.i.i.i.i.i.i.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %94, align 8, !tbaa !37
  %vfn6.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable5.i.i.i.i.i.i.i.i.i.i, i64 3
  %98 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn6.i.i.i.i.i.i.i.i.i.i, align 8
  call void %98(%"class.std::_Sp_counted_base"* nonnull %91) #45
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i: ; preds = %if.then4.i.i.i.i.i.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit12.i.i.i.i.i.i.i.i.i.i, %_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii.exit.i.i.i.i.i.i.i.i.i.i, %if.end.i.i
  call void @_ZdlPv(i8* nonnull %call2.i.i.i.i.i.i) #45
  br label %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i

_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i: ; preds = %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i
  %retval.i.i33.sroa.0.0 = phi %"struct.std::_Rb_tree_node_base"* [ %83, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E.exit.i.i ], [ %89, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E.exit.i.i ]
  %retval.i.i33.sroa.0.0.ptr = bitcast %"struct.std::_Rb_tree_node_base"* %retval.i.i33.sroa.0.0 to %"struct.std::_Rb_tree_node"*
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %80)
  br label %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit

_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit: ; preds = %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i, %lor.rhs.i
  %__i.i.sroa.0.0.ptr = phi %"struct.std::_Rb_tree_node"* [ %retval.i.i33.sroa.0.0.ptr, %_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_.exit.i ], [ %__y.addr.i.i.i.i34.0.lcssa, %lor.rhs.i ]
  %second.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__i.i.sroa.0.0.ptr, i64 0, i32 1, i32 0, i64 8
  %99 = bitcast i8* %second.i to i64*
  %100 = load i64, i64* %99, align 8, !tbaa !81
  %101 = bitcast %"class.std::shared_ptr.17"* %agg.result to i64*
  store i64 %100, i64* %101, align 8, !tbaa !81
  %_M_refcount3.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__i.i.sroa.0.0.ptr, i64 0, i32 1, i32 0, i64 16
  %_M_pi.i.i.i = getelementptr inbounds %"class.std::shared_ptr.17", %"class.std::shared_ptr.17"* %agg.result, i64 0, i32 0, i32 1, i32 0
  %_M_pi2.i.i.i = bitcast i8* %_M_refcount3.i.i to %"class.std::_Sp_counted_base"**
  %102 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"** %_M_pi2.i.i.i, align 8, !tbaa !84
  store %"class.std::_Sp_counted_base"* %102, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i, align 8, !tbaa !84
  %cmp.i.i.i24 = icmp eq %"class.std::_Sp_counted_base"* %102, null
  br i1 %cmp.i.i.i24, label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit, label %if.then.i.i.i25

if.then.i.i.i25:                                  ; preds = %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit
  %_M_use_count.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %102, i64 0, i32 2
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i.i.i.i, label %if.else.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %if.then.i.i.i25
  %103 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i, i32 1 acq_rel
  br label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit

if.else.i.i.i.i.i:                                ; preds = %if.then.i.i.i25
  %104 = load i32, i32* %_M_use_count.i.i.i.i, align 4, !tbaa !22
  %add.i.i.i.i.i.i = add nsw i32 %104, 1
  store i32 %add.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i, align 4, !tbaa !22
  br label %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit

_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit: ; preds = %if.else.i.i.i.i.i, %if.then.i.i.i.i.i, %_ZNSt3mapINSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEESt4lessIS1_ESaISt4pairIKS1_S5_EEEixERS9_.exit
  br i1 icmp ne (i8* bitcast (i32 (i32*, void (i8*)*)* @__pthread_key_create to i8*), i8* null), label %if.then.i.i23, label %_ZNSt5mutex6unlockEv.exit

if.then.i.i23:                                    ; preds = %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit
  %call1.i.i22 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* nonnull %_M_mutex.i) #45
  br label %_ZNSt5mutex6unlockEv.exit

_ZNSt5mutex6unlockEv.exit:                        ; preds = %if.then.i.i23, %_ZNSt10shared_ptrIN6Kalmar11KalmarQueueEEC2ERKS2_.exit
  ret void
}

; Function Attrs: nounwind
declare extern_weak i32 @__pthread_key_create(i32*, void (i8*)*) #9

declare zeroext i1 @_ZNSt28__atomic_futex_unsigned_base19_M_futex_wait_untilEPjjbNSt6chrono8durationIlSt5ratioILl1ELl1EEEENS2_IlS3_ILl1ELl1000000000EEEE(%"struct.std::less"*, i32*, i32, i1 zeroext, %"class.std::thread::id" addrspace(5)* byval align 8, %"class.std::thread::id" addrspace(5)* byval align 8) local_unnamed_addr #3

declare void @_ZNSt6thread4joinEv(%"class.std::thread"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @_ZSt9terminatev() local_unnamed_addr #13

; Function Attrs: nounwind
declare extern_weak i64 @pthread_self() local_unnamed_addr #9

; Function Attrs: nounwind
declare extern_weak i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZSt20__throw_system_errori(i32) local_unnamed_addr #10

define linkonce_odr %"struct.std::pair.23" @_ZNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS3_(%"class.std::_Rb_tree"* %this, %"struct.std::_Rb_tree_const_iterator" addrspace(5)* byval align 8 %__position, %"class.std::thread::id"* dereferenceable(8) %__k) local_unnamed_addr #7 align 2 {
entry:
  %_M_node.i = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator" addrspace(5)* %__position, i32 0, i32 0
  %0 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* addrspace(5)* %_M_node.i, align 8, !tbaa !115
  %_M_header.i = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1
  %cmp = icmp eq %"struct.std::_Rb_tree_node_base"* %0, %_M_header.i
  %1 = ptrtoint %"struct.std::_Rb_tree_node_base"* %0 to i64
  br i1 %cmp, label %if.then, label %if.else11

if.then:                                          ; preds = %entry
  %_M_node_count.i = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 2
  %2 = load i64, i64* %_M_node_count.i, align 8, !tbaa !109
  %cmp4 = icmp eq i64 %2, 0
  br i1 %cmp4, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %_M_right.i181 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 3
  %3 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_right.i181 to %"struct.std::_Rb_tree_node"**
  %4 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %3, align 8, !tbaa !27
  %5 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %4, i64 0, i32 1, i32 0, i64 0
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !31
  %8 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %__k, i64 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !31
  %cmp.i.i299 = icmp ult i64 %7, %9
  br i1 %cmp.i.i299, label %if.then8, label %if.else

if.then8:                                         ; preds = %land.lhs.true
  %10 = ptrtoint %"struct.std::_Rb_tree_node"* %4 to i64
  br label %return

if.else:                                          ; preds = %land.lhs.true, %if.then
  %_M_parent.i.i241 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 1
  %11 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_parent.i.i241 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !117
  %cmp.i243422 = icmp eq i64 %12, 0
  br i1 %cmp.i243422, label %if.then.i269, label %while.body.i252.lr.ph

while.body.i252.lr.ph:                            ; preds = %if.else
  %13 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %__k, i64 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !31
  br label %while.body.i252

while.body.i252:                                  ; preds = %while.body.i252, %while.body.i252.lr.ph
  %.in435 = phi i64 [ %12, %while.body.i252.lr.ph ], [ %cond.i257421, %while.body.i252 ]
  %15 = inttoptr i64 %.in435 to %"struct.std::_Rb_tree_node"*
  %16 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %15, i64 0, i32 1, i32 0, i64 0
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8, !tbaa !31
  %cmp.i.i38.i250 = icmp ult i64 %14, %18
  %19 = inttoptr i64 %.in435 to %"struct.std::_Rb_tree_node_base"*
  %_M_left.i30.i253 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %19, i64 0, i32 2
  %_M_right.i.i255 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %19, i64 0, i32 3
  %cond.i257.in.in = select i1 %cmp.i.i38.i250, %"struct.std::_Rb_tree_node_base"** %_M_left.i30.i253, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i255
  %20 = bitcast %"struct.std::_Rb_tree_node_base"** %cond.i257.in.in to i64*
  %cond.i257421 = load i64, i64* %20, align 8, !tbaa !27
  %cmp.i243 = icmp eq i64 %cond.i257421, 0
  br i1 %cmp.i243, label %while.end.i261, label %while.body.i252

while.end.i261:                                   ; preds = %while.body.i252
  %21 = inttoptr i64 %.in435 to %"struct.std::_Rb_tree_node"*
  %22 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %21, i64 0, i32 0
  br i1 %cmp.i.i38.i250, label %if.then.i269, label %if.end12.i282

if.then.i269:                                     ; preds = %while.end.i261, %if.else
  %23 = phi %"struct.std::_Rb_tree_node_base"* [ %22, %while.end.i261 ], [ %0, %if.else ]
  %24 = phi i64 [ %.in435, %while.end.i261 ], [ %1, %if.else ]
  %_M_left.i.i262 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 2
  %25 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i262, align 8, !tbaa !118
  %cmp.i.i268 = icmp eq %"struct.std::_Rb_tree_node_base"* %23, %25
  br i1 %cmp.i.i268, label %return, label %if.else.i274

if.else.i274:                                     ; preds = %if.then.i269
  %call.i.i273 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %23) #51
  br label %if.end12.i282

if.end12.i282:                                    ; preds = %if.else.i274, %while.end.i261
  %26 = phi i64 [ %.in435, %while.end.i261 ], [ %24, %if.else.i274 ]
  %__j.i238.sroa.0.0.in = phi %"struct.std::_Rb_tree_node_base"* [ %22, %while.end.i261 ], [ %call.i.i273, %if.else.i274 ]
  %_M_storage.i.i.i.i277 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__j.i238.sroa.0.0.in, i64 1
  %27 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i277 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !31
  %29 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %__k, i64 0, i32 0
  %30 = load i64, i64* %29, align 8, !tbaa !31
  %cmp.i.i.i281 = icmp ult i64 %28, %30
  %__j.i238.sroa.0.0 = ptrtoint %"struct.std::_Rb_tree_node_base"* %__j.i238.sroa.0.0.in to i64
  %spec.select = select i1 %cmp.i.i.i281, i64 %26, i64 0
  %spec.select444 = select i1 %cmp.i.i.i281, i64 0, i64 %__j.i238.sroa.0.0
  br label %return

if.else11:                                        ; preds = %entry
  %_M_storage.i.i.i215 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %0, i64 1
  %31 = getelementptr inbounds %"class.std::thread::id", %"class.std::thread::id"* %__k, i64 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !31
  %33 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i215 to i64*
  %34 = load i64, i64* %33, align 8, !tbaa !31
  %cmp.i.i213 = icmp ult i64 %32, %34
  br i1 %cmp.i.i213, label %if.then17, label %if.else43

if.then17:                                        ; preds = %if.else11
  %_M_left.i205 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 2
  %35 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_left.i205, align 8, !tbaa !27
  %cmp20 = icmp eq %"struct.std::_Rb_tree_node_base"* %35, %0
  %36 = ptrtoint %"struct.std::_Rb_tree_node_base"* %35 to i64
  br i1 %cmp20, label %return, label %if.else24

if.else24:                                        ; preds = %if.then17
  %call.i198 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* nonnull %0) #51
  %_M_storage.i.i.i195 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %call.i198, i64 1
  %37 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i195 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !31
  %cmp.i.i193 = icmp ult i64 %38, %32
  br i1 %cmp.i.i193, label %if.then31, label %if.else41

if.then31:                                        ; preds = %if.else24
  %39 = ptrtoint %"struct.std::_Rb_tree_node_base"* %call.i198 to i64
  %_M_right.i185 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %call.i198, i64 0, i32 3
  %40 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_right.i185 to %"struct.std::_Rb_tree_node"**
  %41 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %40, align 8, !tbaa !119
  %cmp34 = icmp eq %"struct.std::_Rb_tree_node"* %41, null
  %spec.select445 = select i1 %cmp34, i64 %39, i64 %1
  %spec.select446 = select i1 %cmp34, i64 0, i64 %1
  br label %return

if.else41:                                        ; preds = %if.else24
  %_M_parent.i.i130 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 1
  %42 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_parent.i.i130 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !117
  %cmp.i132425 = icmp eq i64 %43, 0
  %44 = ptrtoint %"struct.std::_Rb_tree_node_base"* %_M_header.i to i64
  br i1 %cmp.i132425, label %if.then.i158, label %while.body.i141

while.body.i141:                                  ; preds = %while.body.i141, %if.else41
  %.in433 = phi i64 [ %cond.i146420, %while.body.i141 ], [ %43, %if.else41 ]
  %45 = inttoptr i64 %.in433 to %"struct.std::_Rb_tree_node"*
  %46 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %45, i64 0, i32 1, i32 0, i64 0
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8, !tbaa !31
  %cmp.i.i38.i139 = icmp ult i64 %32, %48
  %49 = inttoptr i64 %.in433 to %"struct.std::_Rb_tree_node_base"*
  %_M_left.i30.i142 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %49, i64 0, i32 2
  %_M_right.i.i144 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %49, i64 0, i32 3
  %cond.i146.in.in = select i1 %cmp.i.i38.i139, %"struct.std::_Rb_tree_node_base"** %_M_left.i30.i142, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i144
  %50 = bitcast %"struct.std::_Rb_tree_node_base"** %cond.i146.in.in to i64*
  %cond.i146420 = load i64, i64* %50, align 8, !tbaa !27
  %cmp.i132 = icmp eq i64 %cond.i146420, 0
  br i1 %cmp.i132, label %while.end.i150, label %while.body.i141

while.end.i150:                                   ; preds = %while.body.i141
  %51 = inttoptr i64 %.in433 to %"struct.std::_Rb_tree_node"*
  %52 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %51, i64 0, i32 0
  br i1 %cmp.i.i38.i139, label %if.then.i158, label %if.end12.i171

if.then.i158:                                     ; preds = %while.end.i150, %if.else41
  %53 = phi %"struct.std::_Rb_tree_node_base"* [ %52, %while.end.i150 ], [ %_M_header.i, %if.else41 ]
  %54 = phi i64 [ %.in433, %while.end.i150 ], [ %44, %if.else41 ]
  %cmp.i.i157 = icmp eq %"struct.std::_Rb_tree_node_base"* %53, %35
  br i1 %cmp.i.i157, label %return, label %if.else.i163

if.else.i163:                                     ; preds = %if.then.i158
  %call.i.i162 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %53) #51
  br label %if.end12.i171

if.end12.i171:                                    ; preds = %if.else.i163, %while.end.i150
  %55 = phi i64 [ %.in433, %while.end.i150 ], [ %54, %if.else.i163 ]
  %__j.i127.sroa.0.0.in = phi %"struct.std::_Rb_tree_node_base"* [ %52, %while.end.i150 ], [ %call.i.i162, %if.else.i163 ]
  %_M_storage.i.i.i.i166 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__j.i127.sroa.0.0.in, i64 1
  %56 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i166 to i64*
  %57 = load i64, i64* %56, align 8, !tbaa !31
  %cmp.i.i.i170 = icmp ult i64 %57, %32
  %__j.i127.sroa.0.0 = ptrtoint %"struct.std::_Rb_tree_node_base"* %__j.i127.sroa.0.0.in to i64
  %spec.select447 = select i1 %cmp.i.i.i170, i64 %55, i64 0
  %spec.select448 = select i1 %cmp.i.i.i170, i64 0, i64 %__j.i127.sroa.0.0
  br label %return

if.else43:                                        ; preds = %if.else11
  %cmp.i.i102 = icmp ult i64 %34, %32
  br i1 %cmp.i.i102, label %if.then49, label %return

if.then49:                                        ; preds = %if.else43
  %_M_right.i94 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 3
  %58 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_right.i94, align 8, !tbaa !27
  %cmp52 = icmp eq %"struct.std::_Rb_tree_node_base"* %58, %0
  br i1 %cmp52, label %if.then53, label %if.else56

if.then53:                                        ; preds = %if.then49
  %59 = ptrtoint %"struct.std::_Rb_tree_node_base"* %58 to i64
  br label %return

if.else56:                                        ; preds = %if.then49
  %call.i = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* nonnull %0) #51
  %_M_storage.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %call.i, i64 1
  %60 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i to i64*
  %61 = load i64, i64* %60, align 8, !tbaa !31
  %cmp.i.i89 = icmp ult i64 %32, %61
  %62 = ptrtoint %"struct.std::_Rb_tree_node_base"* %call.i to i64
  br i1 %cmp.i.i89, label %if.then63, label %if.else73

if.then63:                                        ; preds = %if.else56
  %_M_right.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %0, i64 0, i32 3
  %63 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_right.i to %"struct.std::_Rb_tree_node"**
  %64 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %63, align 8, !tbaa !119
  %cmp66 = icmp eq %"struct.std::_Rb_tree_node"* %64, null
  %spec.select449 = select i1 %cmp66, i64 %1, i64 %62
  %spec.select450 = select i1 %cmp66, i64 0, i64 %62
  br label %return

if.else73:                                        ; preds = %if.else56
  %_M_parent.i.i = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 1
  %65 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_parent.i.i to i64*
  %66 = load i64, i64* %65, align 8, !tbaa !117
  %cmp.i429 = icmp eq i64 %66, 0
  %67 = ptrtoint %"struct.std::_Rb_tree_node_base"* %_M_header.i to i64
  br i1 %cmp.i429, label %if.then.i, label %while.body.i

while.body.i:                                     ; preds = %while.body.i, %if.else73
  %.in = phi i64 [ %cond.i419, %while.body.i ], [ %66, %if.else73 ]
  %68 = inttoptr i64 %.in to %"struct.std::_Rb_tree_node"*
  %69 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %68, i64 0, i32 1, i32 0, i64 0
  %70 = bitcast i8* %69 to i64*
  %71 = load i64, i64* %70, align 8, !tbaa !31
  %cmp.i.i38.i = icmp ult i64 %32, %71
  %72 = inttoptr i64 %.in to %"struct.std::_Rb_tree_node_base"*
  %_M_left.i30.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %72, i64 0, i32 2
  %_M_right.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %72, i64 0, i32 3
  %cond.i.in.in = select i1 %cmp.i.i38.i, %"struct.std::_Rb_tree_node_base"** %_M_left.i30.i, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i
  %73 = bitcast %"struct.std::_Rb_tree_node_base"** %cond.i.in.in to i64*
  %cond.i419 = load i64, i64* %73, align 8, !tbaa !27
  %cmp.i = icmp eq i64 %cond.i419, 0
  br i1 %cmp.i, label %while.end.i, label %while.body.i

while.end.i:                                      ; preds = %while.body.i
  %74 = inttoptr i64 %.in to %"struct.std::_Rb_tree_node"*
  %75 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %74, i64 0, i32 0
  br i1 %cmp.i.i38.i, label %if.then.i, label %if.end12.i

if.then.i:                                        ; preds = %while.end.i, %if.else73
  %76 = phi %"struct.std::_Rb_tree_node_base"* [ %75, %while.end.i ], [ %_M_header.i, %if.else73 ]
  %77 = phi i64 [ %.in, %while.end.i ], [ %67, %if.else73 ]
  %_M_left.i.i = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 1, i32 2
  %78 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i, align 8, !tbaa !118
  %cmp.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %76, %78
  br i1 %cmp.i.i, label %return, label %if.else.i

if.else.i:                                        ; preds = %if.then.i
  %call.i.i = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %76) #51
  br label %if.end12.i

if.end12.i:                                       ; preds = %if.else.i, %while.end.i
  %79 = phi i64 [ %.in, %while.end.i ], [ %77, %if.else.i ]
  %__j.i.sroa.0.0.in = phi %"struct.std::_Rb_tree_node_base"* [ %75, %while.end.i ], [ %call.i.i, %if.else.i ]
  %_M_storage.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__j.i.sroa.0.0.in, i64 1
  %80 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i to i64*
  %81 = load i64, i64* %80, align 8, !tbaa !31
  %cmp.i.i.i = icmp ult i64 %81, %32
  %__j.i.sroa.0.0 = ptrtoint %"struct.std::_Rb_tree_node_base"* %__j.i.sroa.0.0.in to i64
  %spec.select451 = select i1 %cmp.i.i.i, i64 %79, i64 0
  %spec.select452 = select i1 %cmp.i.i.i, i64 0, i64 %__j.i.sroa.0.0
  br label %return

return:                                           ; preds = %if.end12.i, %if.then.i, %if.then63, %if.then53, %if.else43, %if.end12.i171, %if.then.i158, %if.then31, %if.then17, %if.end12.i282, %if.then.i269, %if.then8
  %retval.sroa.12.0 = phi i64 [ %10, %if.then8 ], [ %59, %if.then53 ], [ %24, %if.then.i269 ], [ %36, %if.then17 ], [ %54, %if.then.i158 ], [ %77, %if.then.i ], [ 0, %if.else43 ], [ %spec.select, %if.end12.i282 ], [ %spec.select445, %if.then31 ], [ %spec.select447, %if.end12.i171 ], [ %spec.select449, %if.then63 ], [ %spec.select451, %if.end12.i ]
  %retval.sroa.0.0 = phi i64 [ 0, %if.then8 ], [ 0, %if.then53 ], [ 0, %if.then.i269 ], [ %36, %if.then17 ], [ 0, %if.then.i158 ], [ 0, %if.then.i ], [ %1, %if.else43 ], [ %spec.select444, %if.end12.i282 ], [ %spec.select446, %if.then31 ], [ %spec.select448, %if.end12.i171 ], [ %spec.select450, %if.then63 ], [ %spec.select452, %if.end12.i ]
  %82 = inttoptr i64 %retval.sroa.0.0 to %"struct.std::_Rb_tree_node_base"*
  %83 = insertvalue %"struct.std::pair.23" undef, %"struct.std::_Rb_tree_node_base"* %82, 0
  %84 = inttoptr i64 %retval.sroa.12.0 to %"struct.std::_Rb_tree_node_base"*
  %85 = insertvalue %"struct.std::pair.23" %83, %"struct.std::_Rb_tree_node_base"* %84, 1
  ret %"struct.std::pair.23" %85
}

; Function Attrs: nounwind
declare void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* dereferenceable(32)) local_unnamed_addr #9

; Function Attrs: nounwind
declare extern_weak i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #9

; Function Attrs: nounwind readonly
declare %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #19

; Function Attrs: nounwind readonly
declare %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #19

; Function Attrs: nounwind readonly
declare i32 @wmemcmp(i32*, i32*, i64) local_unnamed_addr #19

define weak_odr amdgpu_kernel void @"_ZZ4mainEN3$_019__cxxamp_trampolineEPi"(i32*) local_unnamed_addr #20 align 2 {
entry:
  %call.i4 = tail call zeroext i1 @__ockl_wfall_i32(i32 0) #43
  br i1 %call.i4, label %while.body.i, label %"_ZZ4mainENK3$_0clERN6Kalmar5indexILi1EEE.exit"

while.body.i:                                     ; preds = %if.end4.i, %entry
  %thread_done.i.05 = phi i32 [ %thread_done.i.1, %if.end4.i ], [ 0, %entry ]
  %call2.i = tail call i32 @__ockl_lane_u32() #43
  %1 = tail call i32 @llvm.amdgcn.readfirstlane(i32 %call2.i)
  %cmp.i = icmp eq i32 %1, %call2.i
  br i1 %cmp.i, label %if.then.i, label %if.end4.i

if.then.i:                                        ; preds = %while.body.i
  %2 = load atomic i32, i32* %0 seq_cst, align 4
  %add.i = add nsw i32 %2, 1
  %3 = cmpxchg i32* %0, i32 %2, i32 %add.i seq_cst seq_cst
  %4 = extractvalue { i32, i1 } %3, 1
  %spec.select = select i1 %4, i32 1, i32 %thread_done.i.05
  br label %if.end4.i

if.end4.i:                                        ; preds = %if.then.i, %while.body.i
  %thread_done.i.1 = phi i32 [ %thread_done.i.05, %while.body.i ], [ %spec.select, %if.then.i ]
  %call.i = tail call zeroext i1 @__ockl_wfall_i32(i32 %thread_done.i.1) #43
  br i1 %call.i, label %while.body.i, label %"_ZZ4mainENK3$_0clERN6Kalmar5indexILi1EEE.exit"

"_ZZ4mainENK3$_0clERN6Kalmar5indexILi1EEE.exit":  ; preds = %if.end4.i, %entry
  ret void
}

; Function Attrs: convergent nounwind readnone
declare i32 @llvm.amdgcn.readfirstlane(i32) #21

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_acos_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_acos_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_acos(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_acos_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_acos_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_acos_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_acosh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_acosh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_acosh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_acosh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_acosh_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_acosh_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_asin_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_asin_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_asin(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_asin_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_asin_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_asin_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_asinh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_asinh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_asinh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_asinh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_asinh_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_asinh_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_atan_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_atan_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_atan(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_atan_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_atan_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_atan_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_atanh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_atanh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_atanh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_atanh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_atanh_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_atanh_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_atan2_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_atan2_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_atan2(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_atan2_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_atan2_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_atan2_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_cbrt_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_cbrt_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_cbrt(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_cbrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_cbrt_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_cbrt_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_ceil_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_ceil_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_ceil(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_ceil_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_ceil_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_ceil_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_copysign_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_copysign_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_copysign(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_copysign_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_copysign_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_copysign_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_cos_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_cos_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_cos(float) local_unnamed_addr #23 {
  %2 = tail call float @__ocml_cos_f32(float %0) #52
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_cos_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_cos_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_native_cos(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_cos_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_cosh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_cosh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_cosh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_cosh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_cosh_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_cosh_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_cospi_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_cospi_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_cospi(float) local_unnamed_addr #23 {
  %2 = tail call float @__ocml_cospi_f32(float %0) #52
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_cospi_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_cospi_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_erf_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_erf_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_erf(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_erf_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_erf_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_erf_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_erfc_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_erfc_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_erfc(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_erfc_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_erfc_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_erfc_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_erfcinv_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_erfcinv_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_erfcinv(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_erfcinv_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_erfcinv_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_erfcinv_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_erfinv_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_erfinv_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_erfinv(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_erfinv_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_erfinv_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_erfinv_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_exp_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_exp_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_exp(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_exp_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_exp_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_exp_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_exp2_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_exp2_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_exp2(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_exp2_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_exp2_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_exp2_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_exp2_native_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_native_exp2_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_exp2_native(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_exp2_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_exp10_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_exp10_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_exp10(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_exp10_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_exp10_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_exp10_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_expm1_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_expm1_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_expm1(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_expm1_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_expm1_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_expm1_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fabs_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_fabs_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fabs(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_fabs_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fabs_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_fabs_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fdim_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_fdim_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fdim(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_fdim_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fdim_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_fdim_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_floor_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_floor_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_floor(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_floor_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_floor_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_floor_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fma_half(half, half, half) local_unnamed_addr #22 {
  %4 = tail call half @__ocml_fma_f16(half %0, half %1, half %2) #21
  ret half %4
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fma(float, float, float) local_unnamed_addr #22 {
  %4 = tail call float @__ocml_fma_f32(float %0, float %1, float %2) #21
  ret float %4
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fma_double(double, double, double) local_unnamed_addr #22 {
  %4 = tail call double @__ocml_fma_f64(double %0, double %1, double %2) #21
  ret double %4
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fmax_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_fmax_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fmax(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_fmax_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fmax_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_fmax_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fmin_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_fmin_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fmin(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_fmin_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fmin_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_fmin_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_fmod_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_fmod_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_fmod(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_fmod_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_fmod_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_fmod_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_fpclassify_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_fpclassify_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_fpclassify(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_fpclassify_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_fpclassify_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_fpclassify_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected half @__hc_frexp_half(half, i32* nocapture) local_unnamed_addr #23 {
  %3 = alloca i32, align 4, addrspace(5)
  %4 = bitcast i32 addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %4) #47
  %5 = call half @__ocml_frexp_f16(half %0, i32 addrspace(5)* %3) #52
  %6 = load i32, i32 addrspace(5)* %3, align 4, !tbaa !120
  store i32 %6, i32* %1, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %4) #47
  ret half %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_frexp(float, i32* nocapture) local_unnamed_addr #23 {
  %3 = alloca i32, align 4, addrspace(5)
  %4 = bitcast i32 addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %4) #47
  %5 = call float @__ocml_frexp_f32(float %0, i32 addrspace(5)* %3) #52
  %6 = load i32, i32 addrspace(5)* %3, align 4, !tbaa !120
  store i32 %6, i32* %1, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %4) #47
  ret float %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected double @__hc_frexp_double(double, i32* nocapture) local_unnamed_addr #23 {
  %3 = alloca i32, align 4, addrspace(5)
  %4 = bitcast i32 addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %4) #47
  %5 = call double @__ocml_frexp_f64(double %0, i32 addrspace(5)* %3) #52
  %6 = load i32, i32 addrspace(5)* %3, align 4, !tbaa !120
  store i32 %6, i32* %1, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %4) #47
  ret double %5
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_hypot_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_hypot_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_hypot(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_hypot_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_hypot_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_hypot_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_ilogb_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_ilogb_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_ilogb(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_ilogb_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_ilogb_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_ilogb_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isfinite_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isfinite_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isfinite(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isfinite_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isfinite_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isfinite_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isinf_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isinf_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isinf(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isinf_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isinf_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isinf_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnan_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnan_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnan(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnan_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnan_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnan_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnormal_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnormal_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnormal(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnormal_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_isnormal_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_isnormal_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_ldexp_half(half, i16 signext) local_unnamed_addr #22 {
  %3 = sext i16 %1 to i32
  %4 = tail call half @__ocml_ldexp_f16(half %0, i32 %3) #21
  ret half %4
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_ldexp(float, i32) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_ldexp_f32(float %0, i32 %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_ldexp_double(double, i32) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_ldexp_f64(double %0, i32 %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_lgamma_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_lgamma_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_lgamma(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_lgamma_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_lgamma_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_lgamma_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_log_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_log_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_log(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_log_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_log_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_log_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_log10_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_log10_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_log10(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_log10_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_log10_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_log10_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_log2_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_log2_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_log2(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_log2_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_log2_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_log2_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_log2_native_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_native_log2_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_log2_native(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_log2_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_log1p_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_log1p_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_log1p(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_log1p_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_logb_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_logb_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_logb(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_logb_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_logb_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_logb_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected half @__hc_modf_half(half, half* nocapture) local_unnamed_addr #23 {
  %3 = alloca half, align 2, addrspace(5)
  %4 = bitcast half addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 2, i8 addrspace(5)* %4) #47
  %5 = call half @__ocml_modf_f16(half %0, half addrspace(5)* %3) #52
  %6 = load half, half addrspace(5)* %3, align 2, !tbaa !124
  store half %6, half* %1, align 2, !tbaa !124
  call void @llvm.lifetime.end.p5i8(i64 2, i8 addrspace(5)* %4) #47
  ret half %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_modf(float, float* nocapture) local_unnamed_addr #23 {
  %3 = alloca float, align 4, addrspace(5)
  %4 = bitcast float addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %4) #47
  %5 = call float @__ocml_modf_f32(float %0, float addrspace(5)* %3) #52
  %6 = bitcast float addrspace(5)* %3 to i32 addrspace(5)*
  %7 = load i32, i32 addrspace(5)* %6, align 4, !tbaa !126
  %8 = bitcast float* %1 to i32*
  store i32 %7, i32* %8, align 4, !tbaa !126
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %4) #47
  ret float %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected double @__hc_modf_double(double, double* nocapture) local_unnamed_addr #23 {
  %3 = alloca double, align 8, addrspace(5)
  %4 = bitcast double addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %4) #47
  %5 = call double @__ocml_modf_f64(double %0, double addrspace(5)* %3) #52
  %6 = bitcast double addrspace(5)* %3 to i64 addrspace(5)*
  %7 = load i64, i64 addrspace(5)* %6, align 8, !tbaa !128
  %8 = bitcast double* %1 to i64*
  store i64 %7, i64* %8, align 8, !tbaa !128
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %4) #47
  ret double %5
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_nan_half(i32) local_unnamed_addr #22 {
  %2 = trunc i32 %0 to i16
  %3 = tail call half @__ocml_nan_f16(i16 zeroext %2) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_nan(i32) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_nan_f32(i32 %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_nan_double(i64) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_nan_f64(i64 %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_nearbyint_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_nearbyint_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_nearbyint(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_nearbyint_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_nearbyint_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_nearbyint_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_nextafter_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_nextafter_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_nextafter(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_nextafter_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_nextafter_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_nextafter_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_pow_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_pow_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_pow(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_pow_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_pow_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_pow_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_rcbrt_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_rcbrt_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_rcbrt(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_rcbrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_rcbrt_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_rcbrt_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_remainder_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_remainder_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_remainder(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_remainder_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_remainder_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_remainder_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected half @__hc_remquo_half(half, half, i32* nocapture) local_unnamed_addr #23 {
  %4 = alloca i32, align 4, addrspace(5)
  %5 = bitcast i32 addrspace(5)* %4 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %5) #47
  %6 = call half @__ocml_remquo_f16(half %0, half %1, i32 addrspace(5)* %4) #52
  %7 = load i32, i32 addrspace(5)* %4, align 4, !tbaa !120
  store i32 %7, i32* %2, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %5) #47
  ret half %6
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_remquo(float, float, i32* nocapture) local_unnamed_addr #23 {
  %4 = alloca i32, align 4, addrspace(5)
  %5 = bitcast i32 addrspace(5)* %4 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %5) #47
  %6 = call float @__ocml_remquo_f32(float %0, float %1, i32 addrspace(5)* %4) #52
  %7 = load i32, i32 addrspace(5)* %4, align 4, !tbaa !120
  store i32 %7, i32* %2, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %5) #47
  ret float %6
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected double @__hc_remquo_double(double, double, i32* nocapture) local_unnamed_addr #23 {
  %4 = alloca i32, align 4, addrspace(5)
  %5 = bitcast i32 addrspace(5)* %4 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %5) #47
  %6 = call double @__ocml_remquo_f64(double %0, double %1, i32 addrspace(5)* %4) #52
  %7 = load i32, i32 addrspace(5)* %4, align 4, !tbaa !120
  store i32 %7, i32* %2, align 4, !tbaa !120
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %5) #47
  ret double %6
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_round_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_round_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_round(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_round_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_round_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_round_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_rsqrt_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_rsqrt_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_rsqrt(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_rsqrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_rsqrt_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_rsqrt_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_rsqrt_native(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_rsqrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sinpi_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_sinpi_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sinpi(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_sinpi_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_sinpi_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_sinpi_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_scalb_half(half, half) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_scalb_f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_scalb(float, float) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_scalb_f32(float %0, float %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_scalb_double(double, double) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_scalb_f64(double %0, double %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_scalbn_half(half, i32) local_unnamed_addr #22 {
  %3 = tail call half @__ocml_scalbn_f16(half %0, i32 %1) #21
  ret half %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_scalbn(float, i32) local_unnamed_addr #22 {
  %3 = tail call float @__ocml_scalbn_f32(float %0, i32 %1) #21
  ret float %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_scalbn_double(double, i32) local_unnamed_addr #22 {
  %3 = tail call double @__ocml_scalbn_f64(double %0, i32 %1) #21
  ret double %3
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_signbit_half(half) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_signbit_f16(half %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_signbit(float) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_signbit_f32(float %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__hc_signbit_double(double) local_unnamed_addr #22 {
  %2 = tail call i32 @__ocml_signbit_f64(double %0) #21
  ret i32 %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sin_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_sin_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sin(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_sin_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_sin_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_sin_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sin_native_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_native_sin_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sin_native(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_sin_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected half @__hc_sincos_half(half, half* nocapture) local_unnamed_addr #23 {
  %3 = alloca half, align 2, addrspace(5)
  %4 = bitcast half addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 2, i8 addrspace(5)* %4) #47
  %5 = call half @__ocml_sincos_f16(half %0, half addrspace(5)* %3) #52
  %6 = load half, half addrspace(5)* %3, align 2, !tbaa !124
  store half %6, half* %1, align 2, !tbaa !124
  call void @llvm.lifetime.end.p5i8(i64 2, i8 addrspace(5)* %4) #47
  ret half %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_sincos(float, float* nocapture) local_unnamed_addr #23 {
  %3 = alloca float, align 4, addrspace(5)
  %4 = bitcast float addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %4) #47
  %5 = call float @__ocml_sincos_f32(float %0, float addrspace(5)* %3) #52
  %6 = bitcast float addrspace(5)* %3 to i32 addrspace(5)*
  %7 = load i32, i32 addrspace(5)* %6, align 4, !tbaa !126
  %8 = bitcast float* %1 to i32*
  store i32 %7, i32* %8, align 4, !tbaa !126
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %4) #47
  ret float %5
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected double @__hc_sincos_double(double, double* nocapture) local_unnamed_addr #23 {
  %3 = alloca double, align 8, addrspace(5)
  %4 = bitcast double addrspace(5)* %3 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 8, i8 addrspace(5)* %4) #47
  %5 = call double @__ocml_sincos_f64(double %0, double addrspace(5)* %3) #52
  %6 = bitcast double addrspace(5)* %3 to i64 addrspace(5)*
  %7 = load i64, i64 addrspace(5)* %6, align 8, !tbaa !128
  %8 = bitcast double* %1 to i64*
  store i64 %7, i64* %8, align 8, !tbaa !128
  call void @llvm.lifetime.end.p5i8(i64 8, i8 addrspace(5)* %4) #47
  ret double %5
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sinh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_sinh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sinh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_sinh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_sinh_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_sinh_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sqrt_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_sqrt_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sqrt(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_sqrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_sqrt_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_sqrt_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_sqrt_native_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_native_sqrt_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_sqrt_native(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_native_sqrt_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_tgamma_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_tgamma_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_tgamma(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_tgamma_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_tgamma_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_tgamma_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_tan_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_tan_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind
define linkonce_odr protected float @__hc_tan(float) local_unnamed_addr #23 {
  %2 = tail call float @__ocml_tan_f32(float %0) #52
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_tan_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_tan_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_tanh_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_tanh_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_tanh(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_tanh_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_tanpi_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_tanpi_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_tanpi(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_tanpi_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_tanpi_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_tanpi_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected half @__hc_trunc_half(half) local_unnamed_addr #22 {
  %2 = tail call half @__ocml_trunc_f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected float @__hc_trunc(float) local_unnamed_addr #22 {
  %2 = tail call float @__ocml_trunc_f32(float %0) #21
  ret float %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected double @__hc_trunc_double(double) local_unnamed_addr #22 {
  %2 = tail call double @__ocml_trunc_f64(double %0) #21
  ret double %2
}

; Function Attrs: alwaysinline nounwind readnone
define linkonce_odr protected i32 @amp_get_global_id(i32) local_unnamed_addr #24 {
  %2 = tail call i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr()
  switch i32 %0, label %21 [
    i32 0, label %3
    i32 1, label %9
    i32 2, label %15
  ]

; <label>:3:                                      ; preds = %1
  %4 = tail call i32 @llvm.amdgcn.workitem.id.x(), !range !130
  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %6 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 4
  %7 = bitcast i8 addrspace(4)* %6 to i16 addrspace(4)*
  %8 = load i16, i16 addrspace(4)* %7, align 4, !tbaa !131
  br label %21

; <label>:9:                                      ; preds = %1
  %10 = tail call i32 @llvm.amdgcn.workitem.id.y(), !range !130
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.y()
  %12 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 6
  %13 = bitcast i8 addrspace(4)* %12 to i16 addrspace(4)*
  %14 = load i16, i16 addrspace(4)* %13, align 2, !tbaa !137
  br label %21

; <label>:15:                                     ; preds = %1
  %16 = tail call i32 @llvm.amdgcn.workitem.id.z(), !range !130
  %17 = tail call i32 @llvm.amdgcn.workgroup.id.z()
  %18 = getelementptr inbounds i8, i8 addrspace(4)* %2, i64 8
  %19 = bitcast i8 addrspace(4)* %18 to i16 addrspace(4)*
  %20 = load i16, i16 addrspace(4)* %19, align 8, !tbaa !138
  br label %21

; <label>:21:                                     ; preds = %15, %9, %3, %1
  %22 = phi i32 [ %16, %15 ], [ %10, %9 ], [ %4, %3 ], [ 0, %1 ]
  %23 = phi i32 [ %17, %15 ], [ %11, %9 ], [ %5, %3 ], [ 0, %1 ]
  %24 = phi i16 [ %20, %15 ], [ %14, %9 ], [ %8, %3 ], [ 1, %1 ]
  %25 = zext i16 %24 to i32
  %26 = mul i32 %23, %25
  %27 = add i32 %26, %22
  ret i32 %27
}

; Function Attrs: nounwind readnone speculatable
declare i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.y() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.y() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.z() #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.z() #25

; Function Attrs: convergent nounwind
define linkonce_odr protected i8 addrspace(1)* @__printf_alloc(i32) local_unnamed_addr #26 {
  %2 = alloca i32, align 4, addrspace(5)
  %3 = tail call i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr()
  %4 = getelementptr inbounds i8, i8 addrspace(4)* %3, i64 24
  %5 = bitcast i8 addrspace(4)* %4 to i8 addrspace(1)* addrspace(4)*
  %6 = load i8 addrspace(1)*, i8 addrspace(1)* addrspace(4)* %5, align 8, !tbaa !139
  %7 = bitcast i8 addrspace(1)* %6 to i32 addrspace(1)*
  %8 = getelementptr inbounds i8, i8 addrspace(1)* %6, i64 4
  %9 = bitcast i8 addrspace(1)* %8 to i32 addrspace(1)*
  %10 = load i32, i32 addrspace(1)* %9, align 4, !tbaa !120
  %11 = bitcast i32 addrspace(5)* %2 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %11) #47
  %12 = addrspacecast i32 addrspace(1)* %7 to i32*
  %13 = tail call i32 @_Z20atomic_load_explicitPVU7_Atomicj12memory_order12memory_scope(i32* %12, i32 0, i32 2) #52
  store i32 %13, i32 addrspace(5)* %2, align 4, !tbaa !120
  %14 = addrspacecast i32 addrspace(5)* %2 to i32*
  %15 = add i32 %13, %0
  %16 = add i32 %15, 8
  %17 = icmp ugt i32 %16, %10
  br i1 %17, label %31, label %18

; <label>:18:                                     ; preds = %21, %1
  %19 = phi i32 [ %23, %21 ], [ %15, %1 ]
  %20 = call zeroext i1 @_Z39atomic_compare_exchange_strong_explicitPVU7_AtomicjPjj12memory_orderS4_12memory_scope(i32* %12, i32* %14, i32 %19, i32 0, i32 0, i32 2) #52
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %18
  %22 = load i32, i32 addrspace(5)* %2, align 4, !tbaa !120
  %23 = add i32 %22, %0
  %24 = add i32 %23, 8
  %25 = icmp ugt i32 %24, %10
  br i1 %25, label %31, label %18

; <label>:26:                                     ; preds = %18
  %27 = getelementptr inbounds i8, i8 addrspace(1)* %6, i64 8
  %28 = load i32, i32 addrspace(5)* %2, align 4, !tbaa !120
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8 addrspace(1)* %27, i64 %29
  br label %31

; <label>:31:                                     ; preds = %26, %21, %1
  %32 = phi i8 addrspace(1)* [ %30, %26 ], [ null, %1 ], [ null, %21 ]
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %11) #47
  ret i8 addrspace(1)* %32
}

; Function Attrs: nounwind readnone speculatable
declare i8 addrspace(4)* @llvm.amdgcn.implicitarg.ptr() #25

; Function Attrs: alwaysinline norecurse nounwind
define linkonce_odr protected i32 @_Z20atomic_load_explicitPVU7_Atomicj12memory_order12memory_scope(i32* nocapture readonly, i32, i32) local_unnamed_addr #27 {
  switch i32 %1, label %4 [
    i32 1, label %5
    i32 2, label %5
    i32 5, label %6
  ]

; <label>:4:                                      ; preds = %3
  switch i32 %2, label %13 [
    i32 1, label %9
    i32 2, label %11
    i32 4, label %15
  ]

; <label>:5:                                      ; preds = %3, %3
  switch i32 %2, label %21 [
    i32 1, label %17
    i32 2, label %19
    i32 4, label %23
  ]

; <label>:6:                                      ; preds = %3
  switch i32 %2, label %29 [
    i32 1, label %25
    i32 2, label %27
    i32 4, label %31
  ]

; <label>:7:                                      ; preds = %31, %29, %27, %25, %23, %21, %19, %17, %15, %13, %11, %9
  %8 = phi i32 [ %14, %13 ], [ %16, %15 ], [ %12, %11 ], [ %10, %9 ], [ %30, %29 ], [ %32, %31 ], [ %28, %27 ], [ %26, %25 ], [ %22, %21 ], [ %24, %23 ], [ %20, %19 ], [ %18, %17 ]
  ret i32 %8

; <label>:9:                                      ; preds = %4
  %10 = load atomic i32, i32* %0 syncscope("workgroup") monotonic, align 4
  br label %7

; <label>:11:                                     ; preds = %4
  %12 = load atomic i32, i32* %0 syncscope("agent") monotonic, align 4
  br label %7

; <label>:13:                                     ; preds = %4
  %14 = load atomic i32, i32* %0 monotonic, align 4
  br label %7

; <label>:15:                                     ; preds = %4
  %16 = load atomic i32, i32* %0 syncscope("subgroup") monotonic, align 4
  br label %7

; <label>:17:                                     ; preds = %5
  %18 = load atomic i32, i32* %0 syncscope("workgroup") acquire, align 4
  br label %7

; <label>:19:                                     ; preds = %5
  %20 = load atomic i32, i32* %0 syncscope("agent") acquire, align 4
  br label %7

; <label>:21:                                     ; preds = %5
  %22 = load atomic i32, i32* %0 acquire, align 4
  br label %7

; <label>:23:                                     ; preds = %5
  %24 = load atomic i32, i32* %0 syncscope("subgroup") acquire, align 4
  br label %7

; <label>:25:                                     ; preds = %6
  %26 = load atomic i32, i32* %0 syncscope("workgroup") seq_cst, align 4
  br label %7

; <label>:27:                                     ; preds = %6
  %28 = load atomic i32, i32* %0 syncscope("agent") seq_cst, align 4
  br label %7

; <label>:29:                                     ; preds = %6
  %30 = load atomic i32, i32* %0 seq_cst, align 4
  br label %7

; <label>:31:                                     ; preds = %6
  %32 = load atomic i32, i32* %0 syncscope("subgroup") seq_cst, align 4
  br label %7
}

; Function Attrs: alwaysinline norecurse nounwind
define linkonce_odr protected zeroext i1 @_Z39atomic_compare_exchange_strong_explicitPVU7_AtomicjPjj12memory_orderS4_12memory_scope(i32*, i32*, i32, i32, i32, i32) local_unnamed_addr #27 {
  switch i32 %3, label %7 [
    i32 1, label %8
    i32 2, label %8
    i32 3, label %9
    i32 4, label %10
    i32 5, label %11
  ]

; <label>:7:                                      ; preds = %6
  switch i32 %5, label %26 [
    i32 1, label %14
    i32 2, label %20
    i32 4, label %32
  ]

; <label>:8:                                      ; preds = %6, %6
  switch i32 %5, label %46 [
    i32 1, label %38
    i32 2, label %42
    i32 4, label %50
  ]

; <label>:9:                                      ; preds = %6
  switch i32 %5, label %106 [
    i32 1, label %94
    i32 2, label %100
    i32 4, label %112
  ]

; <label>:10:                                     ; preds = %6
  switch i32 %5, label %126 [
    i32 1, label %118
    i32 2, label %122
    i32 4, label %130
  ]

; <label>:11:                                     ; preds = %6
  switch i32 %5, label %176 [
    i32 1, label %174
    i32 2, label %175
    i32 4, label %177
  ]

; <label>:12:                                     ; preds = %248, %246, %244, %240, %236, %232, %230, %228, %226, %222, %218, %214, %212, %210, %208, %204, %200, %196, %194, %192, %190, %186, %182, %178, %172, %170, %167, %164, %162, %160, %157, %154, %152, %150, %147, %144, %142, %140, %137, %134, %116, %112, %110, %106, %104, %100, %98, %94, %92, %90, %87, %84, %82, %80, %77, %74, %72, %70, %67, %64, %62, %60, %57, %54, %36, %32, %30, %26, %24, %20, %18, %14
  %13 = phi i1 [ false, %18 ], [ true, %14 ], [ false, %24 ], [ true, %20 ], [ false, %30 ], [ true, %26 ], [ false, %36 ], [ true, %32 ], [ false, %60 ], [ true, %54 ], [ false, %62 ], [ true, %57 ], [ false, %70 ], [ true, %64 ], [ false, %72 ], [ true, %67 ], [ false, %80 ], [ true, %74 ], [ false, %82 ], [ true, %77 ], [ false, %90 ], [ true, %84 ], [ false, %92 ], [ true, %87 ], [ false, %98 ], [ true, %94 ], [ false, %104 ], [ true, %100 ], [ false, %110 ], [ true, %106 ], [ false, %116 ], [ true, %112 ], [ false, %140 ], [ true, %134 ], [ false, %142 ], [ true, %137 ], [ false, %150 ], [ true, %144 ], [ false, %152 ], [ true, %147 ], [ false, %160 ], [ true, %154 ], [ false, %162 ], [ true, %157 ], [ false, %170 ], [ true, %164 ], [ false, %172 ], [ true, %167 ], [ false, %190 ], [ true, %178 ], [ false, %192 ], [ true, %182 ], [ false, %194 ], [ true, %186 ], [ false, %208 ], [ true, %196 ], [ false, %210 ], [ true, %200 ], [ false, %212 ], [ true, %204 ], [ false, %226 ], [ true, %214 ], [ false, %228 ], [ true, %218 ], [ false, %230 ], [ true, %222 ], [ false, %244 ], [ true, %232 ], [ false, %246 ], [ true, %236 ], [ false, %248 ], [ true, %240 ]
  ret i1 %13

; <label>:14:                                     ; preds = %7
  %15 = load i32, i32* %1, align 4
  %16 = cmpxchg i32* %0, i32 %15, i32 %2 syncscope("workgroup") monotonic monotonic
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %12, label %18

; <label>:18:                                     ; preds = %14
  %19 = extractvalue { i32, i1 } %16, 0
  store i32 %19, i32* %1, align 4
  br label %12

; <label>:20:                                     ; preds = %7
  %21 = load i32, i32* %1, align 4
  %22 = cmpxchg i32* %0, i32 %21, i32 %2 syncscope("agent") monotonic monotonic
  %23 = extractvalue { i32, i1 } %22, 1
  br i1 %23, label %12, label %24

; <label>:24:                                     ; preds = %20
  %25 = extractvalue { i32, i1 } %22, 0
  store i32 %25, i32* %1, align 4
  br label %12

; <label>:26:                                     ; preds = %7
  %27 = load i32, i32* %1, align 4
  %28 = cmpxchg i32* %0, i32 %27, i32 %2 monotonic monotonic
  %29 = extractvalue { i32, i1 } %28, 1
  br i1 %29, label %12, label %30

; <label>:30:                                     ; preds = %26
  %31 = extractvalue { i32, i1 } %28, 0
  store i32 %31, i32* %1, align 4
  br label %12

; <label>:32:                                     ; preds = %7
  %33 = load i32, i32* %1, align 4
  %34 = cmpxchg i32* %0, i32 %33, i32 %2 syncscope("subgroup") monotonic monotonic
  %35 = extractvalue { i32, i1 } %34, 1
  br i1 %35, label %12, label %36

; <label>:36:                                     ; preds = %32
  %37 = extractvalue { i32, i1 } %34, 0
  store i32 %37, i32* %1, align 4
  br label %12

; <label>:38:                                     ; preds = %8
  %39 = add i32 %4, -1
  %40 = icmp ult i32 %39, 2
  %41 = load i32, i32* %1, align 4
  br i1 %40, label %57, label %54

; <label>:42:                                     ; preds = %8
  %43 = add i32 %4, -1
  %44 = icmp ult i32 %43, 2
  %45 = load i32, i32* %1, align 4
  br i1 %44, label %67, label %64

; <label>:46:                                     ; preds = %8
  %47 = add i32 %4, -1
  %48 = icmp ult i32 %47, 2
  %49 = load i32, i32* %1, align 4
  br i1 %48, label %77, label %74

; <label>:50:                                     ; preds = %8
  %51 = add i32 %4, -1
  %52 = icmp ult i32 %51, 2
  %53 = load i32, i32* %1, align 4
  br i1 %52, label %87, label %84

; <label>:54:                                     ; preds = %38
  %55 = cmpxchg i32* %0, i32 %41, i32 %2 syncscope("workgroup") acquire monotonic
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %12, label %60

; <label>:57:                                     ; preds = %38
  %58 = cmpxchg i32* %0, i32 %41, i32 %2 syncscope("workgroup") acquire acquire
  %59 = extractvalue { i32, i1 } %58, 1
  br i1 %59, label %12, label %62

; <label>:60:                                     ; preds = %54
  %61 = extractvalue { i32, i1 } %55, 0
  store i32 %61, i32* %1, align 4
  br label %12

; <label>:62:                                     ; preds = %57
  %63 = extractvalue { i32, i1 } %58, 0
  store i32 %63, i32* %1, align 4
  br label %12

; <label>:64:                                     ; preds = %42
  %65 = cmpxchg i32* %0, i32 %45, i32 %2 syncscope("agent") acquire monotonic
  %66 = extractvalue { i32, i1 } %65, 1
  br i1 %66, label %12, label %70

; <label>:67:                                     ; preds = %42
  %68 = cmpxchg i32* %0, i32 %45, i32 %2 syncscope("agent") acquire acquire
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %12, label %72

; <label>:70:                                     ; preds = %64
  %71 = extractvalue { i32, i1 } %65, 0
  store i32 %71, i32* %1, align 4
  br label %12

; <label>:72:                                     ; preds = %67
  %73 = extractvalue { i32, i1 } %68, 0
  store i32 %73, i32* %1, align 4
  br label %12

; <label>:74:                                     ; preds = %46
  %75 = cmpxchg i32* %0, i32 %49, i32 %2 acquire monotonic
  %76 = extractvalue { i32, i1 } %75, 1
  br i1 %76, label %12, label %80

; <label>:77:                                     ; preds = %46
  %78 = cmpxchg i32* %0, i32 %49, i32 %2 acquire acquire
  %79 = extractvalue { i32, i1 } %78, 1
  br i1 %79, label %12, label %82

; <label>:80:                                     ; preds = %74
  %81 = extractvalue { i32, i1 } %75, 0
  store i32 %81, i32* %1, align 4
  br label %12

; <label>:82:                                     ; preds = %77
  %83 = extractvalue { i32, i1 } %78, 0
  store i32 %83, i32* %1, align 4
  br label %12

; <label>:84:                                     ; preds = %50
  %85 = cmpxchg i32* %0, i32 %53, i32 %2 syncscope("subgroup") acquire monotonic
  %86 = extractvalue { i32, i1 } %85, 1
  br i1 %86, label %12, label %90

; <label>:87:                                     ; preds = %50
  %88 = cmpxchg i32* %0, i32 %53, i32 %2 syncscope("subgroup") acquire acquire
  %89 = extractvalue { i32, i1 } %88, 1
  br i1 %89, label %12, label %92

; <label>:90:                                     ; preds = %84
  %91 = extractvalue { i32, i1 } %85, 0
  store i32 %91, i32* %1, align 4
  br label %12

; <label>:92:                                     ; preds = %87
  %93 = extractvalue { i32, i1 } %88, 0
  store i32 %93, i32* %1, align 4
  br label %12

; <label>:94:                                     ; preds = %9
  %95 = load i32, i32* %1, align 4
  %96 = cmpxchg i32* %0, i32 %95, i32 %2 syncscope("workgroup") release monotonic
  %97 = extractvalue { i32, i1 } %96, 1
  br i1 %97, label %12, label %98

; <label>:98:                                     ; preds = %94
  %99 = extractvalue { i32, i1 } %96, 0
  store i32 %99, i32* %1, align 4
  br label %12

; <label>:100:                                    ; preds = %9
  %101 = load i32, i32* %1, align 4
  %102 = cmpxchg i32* %0, i32 %101, i32 %2 syncscope("agent") release monotonic
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %12, label %104

; <label>:104:                                    ; preds = %100
  %105 = extractvalue { i32, i1 } %102, 0
  store i32 %105, i32* %1, align 4
  br label %12

; <label>:106:                                    ; preds = %9
  %107 = load i32, i32* %1, align 4
  %108 = cmpxchg i32* %0, i32 %107, i32 %2 release monotonic
  %109 = extractvalue { i32, i1 } %108, 1
  br i1 %109, label %12, label %110

; <label>:110:                                    ; preds = %106
  %111 = extractvalue { i32, i1 } %108, 0
  store i32 %111, i32* %1, align 4
  br label %12

; <label>:112:                                    ; preds = %9
  %113 = load i32, i32* %1, align 4
  %114 = cmpxchg i32* %0, i32 %113, i32 %2 syncscope("subgroup") release monotonic
  %115 = extractvalue { i32, i1 } %114, 1
  br i1 %115, label %12, label %116

; <label>:116:                                    ; preds = %112
  %117 = extractvalue { i32, i1 } %114, 0
  store i32 %117, i32* %1, align 4
  br label %12

; <label>:118:                                    ; preds = %10
  %119 = add i32 %4, -1
  %120 = icmp ult i32 %119, 2
  %121 = load i32, i32* %1, align 4
  br i1 %120, label %137, label %134

; <label>:122:                                    ; preds = %10
  %123 = add i32 %4, -1
  %124 = icmp ult i32 %123, 2
  %125 = load i32, i32* %1, align 4
  br i1 %124, label %147, label %144

; <label>:126:                                    ; preds = %10
  %127 = add i32 %4, -1
  %128 = icmp ult i32 %127, 2
  %129 = load i32, i32* %1, align 4
  br i1 %128, label %157, label %154

; <label>:130:                                    ; preds = %10
  %131 = add i32 %4, -1
  %132 = icmp ult i32 %131, 2
  %133 = load i32, i32* %1, align 4
  br i1 %132, label %167, label %164

; <label>:134:                                    ; preds = %118
  %135 = cmpxchg i32* %0, i32 %121, i32 %2 syncscope("workgroup") acq_rel monotonic
  %136 = extractvalue { i32, i1 } %135, 1
  br i1 %136, label %12, label %140

; <label>:137:                                    ; preds = %118
  %138 = cmpxchg i32* %0, i32 %121, i32 %2 syncscope("workgroup") acq_rel acquire
  %139 = extractvalue { i32, i1 } %138, 1
  br i1 %139, label %12, label %142

; <label>:140:                                    ; preds = %134
  %141 = extractvalue { i32, i1 } %135, 0
  store i32 %141, i32* %1, align 4
  br label %12

; <label>:142:                                    ; preds = %137
  %143 = extractvalue { i32, i1 } %138, 0
  store i32 %143, i32* %1, align 4
  br label %12

; <label>:144:                                    ; preds = %122
  %145 = cmpxchg i32* %0, i32 %125, i32 %2 syncscope("agent") acq_rel monotonic
  %146 = extractvalue { i32, i1 } %145, 1
  br i1 %146, label %12, label %150

; <label>:147:                                    ; preds = %122
  %148 = cmpxchg i32* %0, i32 %125, i32 %2 syncscope("agent") acq_rel acquire
  %149 = extractvalue { i32, i1 } %148, 1
  br i1 %149, label %12, label %152

; <label>:150:                                    ; preds = %144
  %151 = extractvalue { i32, i1 } %145, 0
  store i32 %151, i32* %1, align 4
  br label %12

; <label>:152:                                    ; preds = %147
  %153 = extractvalue { i32, i1 } %148, 0
  store i32 %153, i32* %1, align 4
  br label %12

; <label>:154:                                    ; preds = %126
  %155 = cmpxchg i32* %0, i32 %129, i32 %2 acq_rel monotonic
  %156 = extractvalue { i32, i1 } %155, 1
  br i1 %156, label %12, label %160

; <label>:157:                                    ; preds = %126
  %158 = cmpxchg i32* %0, i32 %129, i32 %2 acq_rel acquire
  %159 = extractvalue { i32, i1 } %158, 1
  br i1 %159, label %12, label %162

; <label>:160:                                    ; preds = %154
  %161 = extractvalue { i32, i1 } %155, 0
  store i32 %161, i32* %1, align 4
  br label %12

; <label>:162:                                    ; preds = %157
  %163 = extractvalue { i32, i1 } %158, 0
  store i32 %163, i32* %1, align 4
  br label %12

; <label>:164:                                    ; preds = %130
  %165 = cmpxchg i32* %0, i32 %133, i32 %2 syncscope("subgroup") acq_rel monotonic
  %166 = extractvalue { i32, i1 } %165, 1
  br i1 %166, label %12, label %170

; <label>:167:                                    ; preds = %130
  %168 = cmpxchg i32* %0, i32 %133, i32 %2 syncscope("subgroup") acq_rel acquire
  %169 = extractvalue { i32, i1 } %168, 1
  br i1 %169, label %12, label %172

; <label>:170:                                    ; preds = %164
  %171 = extractvalue { i32, i1 } %165, 0
  store i32 %171, i32* %1, align 4
  br label %12

; <label>:172:                                    ; preds = %167
  %173 = extractvalue { i32, i1 } %168, 0
  store i32 %173, i32* %1, align 4
  br label %12

; <label>:174:                                    ; preds = %11
  switch i32 %4, label %178 [
    i32 1, label %182
    i32 2, label %182
    i32 5, label %186
  ]

; <label>:175:                                    ; preds = %11
  switch i32 %4, label %196 [
    i32 1, label %200
    i32 2, label %200
    i32 5, label %204
  ]

; <label>:176:                                    ; preds = %11
  switch i32 %4, label %214 [
    i32 1, label %218
    i32 2, label %218
    i32 5, label %222
  ]

; <label>:177:                                    ; preds = %11
  switch i32 %4, label %232 [
    i32 1, label %236
    i32 2, label %236
    i32 5, label %240
  ]

; <label>:178:                                    ; preds = %174
  %179 = load i32, i32* %1, align 4
  %180 = cmpxchg i32* %0, i32 %179, i32 %2 syncscope("workgroup") seq_cst monotonic
  %181 = extractvalue { i32, i1 } %180, 1
  br i1 %181, label %12, label %190

; <label>:182:                                    ; preds = %174, %174
  %183 = load i32, i32* %1, align 4
  %184 = cmpxchg i32* %0, i32 %183, i32 %2 syncscope("workgroup") seq_cst acquire
  %185 = extractvalue { i32, i1 } %184, 1
  br i1 %185, label %12, label %192

; <label>:186:                                    ; preds = %174
  %187 = load i32, i32* %1, align 4
  %188 = cmpxchg i32* %0, i32 %187, i32 %2 syncscope("workgroup") seq_cst seq_cst
  %189 = extractvalue { i32, i1 } %188, 1
  br i1 %189, label %12, label %194

; <label>:190:                                    ; preds = %178
  %191 = extractvalue { i32, i1 } %180, 0
  store i32 %191, i32* %1, align 4
  br label %12

; <label>:192:                                    ; preds = %182
  %193 = extractvalue { i32, i1 } %184, 0
  store i32 %193, i32* %1, align 4
  br label %12

; <label>:194:                                    ; preds = %186
  %195 = extractvalue { i32, i1 } %188, 0
  store i32 %195, i32* %1, align 4
  br label %12

; <label>:196:                                    ; preds = %175
  %197 = load i32, i32* %1, align 4
  %198 = cmpxchg i32* %0, i32 %197, i32 %2 syncscope("agent") seq_cst monotonic
  %199 = extractvalue { i32, i1 } %198, 1
  br i1 %199, label %12, label %208

; <label>:200:                                    ; preds = %175, %175
  %201 = load i32, i32* %1, align 4
  %202 = cmpxchg i32* %0, i32 %201, i32 %2 syncscope("agent") seq_cst acquire
  %203 = extractvalue { i32, i1 } %202, 1
  br i1 %203, label %12, label %210

; <label>:204:                                    ; preds = %175
  %205 = load i32, i32* %1, align 4
  %206 = cmpxchg i32* %0, i32 %205, i32 %2 syncscope("agent") seq_cst seq_cst
  %207 = extractvalue { i32, i1 } %206, 1
  br i1 %207, label %12, label %212

; <label>:208:                                    ; preds = %196
  %209 = extractvalue { i32, i1 } %198, 0
  store i32 %209, i32* %1, align 4
  br label %12

; <label>:210:                                    ; preds = %200
  %211 = extractvalue { i32, i1 } %202, 0
  store i32 %211, i32* %1, align 4
  br label %12

; <label>:212:                                    ; preds = %204
  %213 = extractvalue { i32, i1 } %206, 0
  store i32 %213, i32* %1, align 4
  br label %12

; <label>:214:                                    ; preds = %176
  %215 = load i32, i32* %1, align 4
  %216 = cmpxchg i32* %0, i32 %215, i32 %2 seq_cst monotonic
  %217 = extractvalue { i32, i1 } %216, 1
  br i1 %217, label %12, label %226

; <label>:218:                                    ; preds = %176, %176
  %219 = load i32, i32* %1, align 4
  %220 = cmpxchg i32* %0, i32 %219, i32 %2 seq_cst acquire
  %221 = extractvalue { i32, i1 } %220, 1
  br i1 %221, label %12, label %228

; <label>:222:                                    ; preds = %176
  %223 = load i32, i32* %1, align 4
  %224 = cmpxchg i32* %0, i32 %223, i32 %2 seq_cst seq_cst
  %225 = extractvalue { i32, i1 } %224, 1
  br i1 %225, label %12, label %230

; <label>:226:                                    ; preds = %214
  %227 = extractvalue { i32, i1 } %216, 0
  store i32 %227, i32* %1, align 4
  br label %12

; <label>:228:                                    ; preds = %218
  %229 = extractvalue { i32, i1 } %220, 0
  store i32 %229, i32* %1, align 4
  br label %12

; <label>:230:                                    ; preds = %222
  %231 = extractvalue { i32, i1 } %224, 0
  store i32 %231, i32* %1, align 4
  br label %12

; <label>:232:                                    ; preds = %177
  %233 = load i32, i32* %1, align 4
  %234 = cmpxchg i32* %0, i32 %233, i32 %2 syncscope("subgroup") seq_cst monotonic
  %235 = extractvalue { i32, i1 } %234, 1
  br i1 %235, label %12, label %244

; <label>:236:                                    ; preds = %177, %177
  %237 = load i32, i32* %1, align 4
  %238 = cmpxchg i32* %0, i32 %237, i32 %2 syncscope("subgroup") seq_cst acquire
  %239 = extractvalue { i32, i1 } %238, 1
  br i1 %239, label %12, label %246

; <label>:240:                                    ; preds = %177
  %241 = load i32, i32* %1, align 4
  %242 = cmpxchg i32* %0, i32 %241, i32 %2 syncscope("subgroup") seq_cst seq_cst
  %243 = extractvalue { i32, i1 } %242, 1
  br i1 %243, label %12, label %248

; <label>:244:                                    ; preds = %232
  %245 = extractvalue { i32, i1 } %234, 0
  store i32 %245, i32* %1, align 4
  br label %12

; <label>:246:                                    ; preds = %236
  %247 = extractvalue { i32, i1 } %238, 0
  store i32 %247, i32* %1, align 4
  br label %12

; <label>:248:                                    ; preds = %240
  %249 = extractvalue { i32, i1 } %242, 0
  store i32 %249, i32* %1, align 4
  br label %12
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_tanpi_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = tail call [2 x i32] @__ocmlpriv_trigpired_f32(float %2) #21
  %4 = extractvalue [2 x i32] %3, 0
  %5 = extractvalue [2 x i32] %3, 1
  %6 = bitcast i32 %4 to float
  %7 = and i32 %5, 1
  %8 = tail call float @__ocmlpriv_tanpired_f32(float %6, i32 %7) #21
  %9 = bitcast float %8 to i32
  %10 = add i32 %5, -1
  %11 = icmp ult i32 %10, 2
  %12 = fcmp oeq float %6, 0.000000e+00
  %13 = and i1 %11, %12
  %14 = select i1 %13, i32 -2147483648, i32 0
  %15 = bitcast float %0 to i32
  %16 = and i32 %15, -2147483648
  %17 = xor i32 %16, %9
  %18 = xor i32 %17, %14
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 519)
  %22 = and i1 %21, %20
  %23 = bitcast i32 %18 to float
  %24 = select i1 %22, float 0x7FF8000000000000, float %23
  ret float %24
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_trigpired_f32(float) local_unnamed_addr #28 {
  %2 = fmul float %0, 5.000000e-01
  %3 = tail call float @llvm.amdgcn.fract.f32(float %2)
  %4 = tail call i1 @llvm.amdgcn.class.f32(float %2, i32 516)
  %5 = fmul float %3, 2.000000e+00
  %6 = select i1 %4, float 0.000000e+00, float %5
  %7 = fcmp ogt float %0, 1.000000e+00
  %8 = select i1 %7, float %6, float %0
  %9 = fmul float %8, 2.000000e+00
  %10 = tail call float @llvm.rint.f32(float %9)
  %11 = tail call float @__ocml_fmuladd_f32(float %10, float -5.000000e-01, float %8) #21
  %12 = bitcast float %11 to i32
  %13 = fptosi float %10 to i32
  %14 = and i32 %13, 3
  %15 = insertvalue [2 x i32] undef, i32 %12, 0
  %16 = insertvalue [2 x i32] %15, i32 %14, 1
  ret [2 x i32] %16
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocmlpriv_tanpired_f32(float, i32) local_unnamed_addr #28 {
  %3 = fmul float %0, %0
  %4 = tail call float @__ocml_fmuladd_f32(float %3, float 0x40F7D2BD40000000, float 0x40BA4D3060000000) #21
  %5 = tail call float @__ocml_fmuladd_f32(float %3, float %4, float 0x40A4350040000000) #21
  %6 = tail call float @__ocml_fmuladd_f32(float %3, float %5, float 0x4084B69260000000) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %3, float %6, float 0x406451E220000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %3, float %7, float 0x404467A9C0000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %3, float %8, float 0x4024ABB6A0000000) #21
  %10 = fmul float %3, %0
  %11 = fmul float %10, %9
  %12 = tail call float @__ocml_fmuladd_f32(float %0, float 0x400921FB60000000, float %11) #21
  %13 = fdiv float -1.000000e+00, %12
  %14 = icmp eq i32 %1, 0
  %15 = select i1 %14, float %12, float %13
  ret float %15
}

; Function Attrs: nounwind readnone speculatable
declare i1 @llvm.amdgcn.class.f32(float, i32) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_fmuladd_f32(float, float, float) local_unnamed_addr #29 {
  %4 = tail call float @llvm.fmuladd.f32(float %0, float %1, float %2)
  ret float %4
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fmuladd.f32(float, float, float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.fract.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.rint.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_ilogb_f64(double) local_unnamed_addr #29 {
  %2 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %3 = add nsw i32 %2, -1
  %4 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %5 = icmp eq i8 %4, 0
  %6 = fcmp uno double %0, 0.000000e+00
  %7 = and i1 %6, %5
  %8 = select i1 %7, i32 2147483647, i32 %3
  %9 = fcmp oeq double %0, 0.000000e+00
  %10 = select i1 %9, i32 -2147483648, i32 %8
  ret i32 %10
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_erfinv_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp olt double %2, 3.750000e-01
  br i1 %3, label %4, label %22

; <label>:4:                                      ; preds = %1
  %5 = fmul double %0, %0
  %6 = tail call double @llvm.fma.f64(double %5, double 0x3FDC5EC06CD8002B, double 0xBFEBB7DD47AEF0D6)
  %7 = tail call double @llvm.fma.f64(double %5, double %6, double 0x3FED189992ECCDB6)
  %8 = tail call double @llvm.fma.f64(double %5, double %7, double 0xBFE10EC180CDE957)
  %9 = tail call double @llvm.fma.f64(double %5, double %8, double 0x3FD05CCE379DD66F)
  %10 = tail call double @llvm.fma.f64(double %5, double %9, double 0xBFA6B9067E3DAE74)
  %11 = tail call double @llvm.fma.f64(double %5, double %10, double 0x3FA5F7F0487C11A3)
  %12 = tail call double @llvm.fma.f64(double %5, double %11, double 0x3F9E0FBF22B2350C)
  %13 = tail call double @llvm.fma.f64(double %5, double %12, double 0x3FA2CE26322B7F90)
  %14 = tail call double @llvm.fma.f64(double %5, double %13, double 0x3FA5EBEEEE81DD31)
  %15 = tail call double @llvm.fma.f64(double %5, double %14, double 0x3FAA7CACB897F0D4)
  %16 = tail call double @llvm.fma.f64(double %5, double %15, double 0x3FB0A130D62CBA32)
  %17 = tail call double @llvm.fma.f64(double %5, double %16, double 0x3FB62847C8653359)
  %18 = tail call double @llvm.fma.f64(double %5, double %17, double 0x3FC053C2C0A5E083)
  %19 = tail call double @llvm.fma.f64(double %5, double %18, double 0x3FCDB29FB2FEEC72)
  %20 = tail call double @llvm.fma.f64(double %5, double %19, double 0x3FEC5BF891B4EF6A)
  %21 = fmul double %2, %20
  br label %172

; <label>:22:                                     ; preds = %1
  %23 = fcmp olt double %2, 0x3FEFFFE000000000
  br i1 %23, label %24, label %119

; <label>:24:                                     ; preds = %22
  %25 = fsub double -0.000000e+00, %2
  %26 = tail call double @llvm.fma.f64(double %25, double %2, double 1.000000e+00)
  %27 = tail call double @__ocml_log_f64(double %26) #21
  %28 = fcmp ogt double %27, -6.250000e+00
  br i1 %28, label %29, label %53

; <label>:29:                                     ; preds = %24
  %30 = fsub double -3.125000e+00, %27
  %31 = tail call double @llvm.fma.f64(double %30, double 0xBBB135D2E746E627, double 0xBC08DDF93324D327)
  %32 = tail call double @llvm.fma.f64(double %30, double %31, double 0x3C37B83EEF0B7C9F)
  %33 = tail call double @llvm.fma.f64(double %30, double %32, double 0x3C69BA72CD589B91)
  %34 = tail call double @llvm.fma.f64(double %30, double %33, double 0xBCA33689090A6B96)
  %35 = tail call double @llvm.fma.f64(double %30, double %34, double 0x3C782E11898132E0)
  %36 = tail call double @llvm.fma.f64(double %30, double %35, double 0x3CFDE4ACFD9E26BA)
  %37 = tail call double @llvm.fma.f64(double %30, double %36, double 0xBD26D33EED66C487)
  %38 = tail call double @llvm.fma.f64(double %30, double %37, double 0xBD36F2167040D8E2)
  %39 = tail call double @llvm.fma.f64(double %30, double %38, double 0x3D872A22C2D77E20)
  %40 = tail call double @llvm.fma.f64(double %30, double %39, double 0xBDAC8859C4E5C0AF)
  %41 = tail call double @llvm.fma.f64(double %30, double %40, double 0xBDCDC583D118A561)
  %42 = tail call double @llvm.fma.f64(double %30, double %41, double 0x3E120F47CCF46B3C)
  %43 = tail call double @llvm.fma.f64(double %30, double %42, double 0xBE31A9E38DC84D60)
  %44 = tail call double @llvm.fma.f64(double %30, double %43, double 0xBE5F36CD6D3D46A9)
  %45 = tail call double @llvm.fma.f64(double %30, double %44, double 0x3E9C6B4F5D03B787)
  %46 = tail call double @llvm.fma.f64(double %30, double %45, double 0xBEB6E8A5434AE8A2)
  %47 = tail call double @llvm.fma.f64(double %30, double %46, double 0xBEED1D1F7B8736F6)
  %48 = tail call double @llvm.fma.f64(double %30, double %47, double 0x3F2879C2A212F024)
  %49 = tail call double @llvm.fma.f64(double %30, double %48, double 0xBF4845769484FCA8)
  %50 = tail call double @llvm.fma.f64(double %30, double %49, double 0xBF78B6C33114F909)
  %51 = tail call double @llvm.fma.f64(double %30, double %50, double 0x3FCEBD80D9B13E28)
  %52 = tail call double @llvm.fma.f64(double %30, double %51, double 0x3FFA755E7C99AE86)
  br label %116

; <label>:53:                                     ; preds = %24
  %54 = fcmp ogt double %27, -1.600000e+01
  %55 = fcmp ogt double %27, 0x9000000000000000
  %56 = select i1 %55, double 0x4FF0000000000000, double 1.000000e+00
  %57 = fmul double %27, %56
  %58 = fsub double -0.000000e+00, %57
  %59 = tail call double @llvm.amdgcn.rsq.f64(double %58)
  %60 = fmul double %59, %58
  %61 = fmul double %59, 5.000000e-01
  %62 = fsub double -0.000000e+00, %61
  %63 = tail call double @llvm.fma.f64(double %62, double %60, double 5.000000e-01)
  %64 = tail call double @llvm.fma.f64(double %61, double %63, double %61)
  %65 = tail call double @llvm.fma.f64(double %60, double %63, double %60)
  %66 = fsub double -0.000000e+00, %65
  %67 = tail call double @llvm.fma.f64(double %66, double %65, double %58)
  %68 = tail call double @llvm.fma.f64(double %67, double %64, double %65)
  %69 = fsub double -0.000000e+00, %68
  %70 = tail call double @llvm.fma.f64(double %69, double %68, double %58)
  %71 = tail call double @llvm.fma.f64(double %70, double %64, double %68)
  %72 = select i1 %55, double 0x37F0000000000000, double 1.000000e+00
  %73 = fmul double %72, %71
  %74 = fcmp oeq double %57, -0.000000e+00
  %75 = fcmp oeq double %57, 0xFFF0000000000000
  %76 = or i1 %74, %75
  %77 = select i1 %76, double %58, double %73
  br i1 %54, label %78, label %98

; <label>:78:                                     ; preds = %53
  %79 = fadd double %77, -3.250000e+00
  %80 = tail call double @llvm.fma.f64(double %79, double 0x3E23040F87DBD932, double 0x3E785CBE52878635)
  %81 = tail call double @llvm.fma.f64(double %79, double %80, double 0xBE92777453DD3955)
  %82 = tail call double @llvm.fma.f64(double %79, double %81, double 0x3E5395ABCD554C6C)
  %83 = tail call double @llvm.fma.f64(double %79, double %82, double 0x3EB936388A3790AD)
  %84 = tail call double @llvm.fma.f64(double %79, double %83, double 0xBED0D5DB812B5083)
  %85 = tail call double @llvm.fma.f64(double %79, double %84, double 0x3EC8860CD5D652F6)
  %86 = tail call double @llvm.fma.f64(double %79, double %85, double 0x3EEA29A0CACDFB23)
  %87 = tail call double @llvm.fma.f64(double %79, double %86, double 0xBF08CEF1F80281F2)
  %88 = tail call double @llvm.fma.f64(double %79, double %87, double 0x3F11E684D0B9188A)
  %89 = tail call double @llvm.fma.f64(double %79, double %88, double 0x3EF932CD54C8A222)
  %90 = tail call double @llvm.fma.f64(double %79, double %89, double 0xBF37448A89EF8AA3)
  %91 = tail call double @llvm.fma.f64(double %79, double %90, double 0x3F4F3CC55AD40C25)
  %92 = tail call double @llvm.fma.f64(double %79, double %91, double 0xBF5BA924132F38B1)
  %93 = tail call double @llvm.fma.f64(double %79, double %92, double 0x3F6468EECA533CF8)
  %94 = tail call double @llvm.fma.f64(double %79, double %93, double 0xBF6EBADABB891BBD)
  %95 = tail call double @llvm.fma.f64(double %79, double %94, double 0x3F75FFCFE5B76AFC)
  %96 = tail call double @llvm.fma.f64(double %79, double %95, double 0x3FF0158A6D641D39)
  %97 = tail call double @llvm.fma.f64(double %79, double %96, double 0x4008ABCC380D5A48)
  br label %116

; <label>:98:                                     ; preds = %53
  %99 = fadd double %77, -5.000000e+00
  %100 = tail call double @llvm.fma.f64(double %99, double 0xBDBDCEC3A7785389, double 0xBDF18FEEC0E38727)
  %101 = tail call double @llvm.fma.f64(double %99, double %100, double 0x3E19E6BF2DDA45E3)
  %102 = tail call double @llvm.fma.f64(double %99, double %101, double 0xBE30468FB24E2F5F)
  %103 = tail call double @llvm.fma.f64(double %99, double %102, double 0x3E405AC6A8FBA182)
  %104 = tail call double @llvm.fma.f64(double %99, double %103, double 0xBE50102E495FB9C0)
  %105 = tail call double @llvm.fma.f64(double %99, double %104, double 0x3E5F4C20E1334AF8)
  %106 = tail call double @llvm.fma.f64(double %99, double %105, double 0xBE722D220FDF9C3E)
  %107 = tail call double @llvm.fma.f64(double %99, double %106, double 0x3E8EBC8BB824CB54)
  %108 = tail call double @llvm.fma.f64(double %99, double %107, double 0xBEB0A8D40EA372CC)
  %109 = tail call double @llvm.fma.f64(double %99, double %108, double 0x3ED2FBD29D093D2B)
  %110 = tail call double @llvm.fma.f64(double %99, double %109, double 0xBEF4A3497E1E0FAC)
  %111 = tail call double @llvm.fma.f64(double %99, double %110, double 0x3F13EBF4EB00938F)
  %112 = tail call double @llvm.fma.f64(double %99, double %111, double 0xBF2C2F36A8FC5D53)
  %113 = tail call double @llvm.fma.f64(double %99, double %112, double 0xBF222EA5DF04047C)
  %114 = tail call double @llvm.fma.f64(double %99, double %113, double 0x3FF02A30D1FBA0DC)
  %115 = tail call double @llvm.fma.f64(double %99, double %114, double 0x4013664DDD1AD7FB)
  br label %116

; <label>:116:                                    ; preds = %98, %78, %29
  %117 = phi double [ %52, %29 ], [ %97, %78 ], [ %115, %98 ]
  %118 = fmul double %2, %117
  br label %172

; <label>:119:                                    ; preds = %22
  %120 = fsub double 1.000000e+00, %2
  %121 = tail call double @__ocml_log_f64(double %120) #21
  %122 = fcmp ogt double %121, 0x9000000000000000
  %123 = select i1 %122, double 0x4FF0000000000000, double 1.000000e+00
  %124 = fmul double %121, %123
  %125 = fsub double -0.000000e+00, %124
  %126 = tail call double @llvm.amdgcn.rsq.f64(double %125)
  %127 = fmul double %126, %125
  %128 = fmul double %126, 5.000000e-01
  %129 = fsub double -0.000000e+00, %128
  %130 = tail call double @llvm.fma.f64(double %129, double %127, double 5.000000e-01)
  %131 = tail call double @llvm.fma.f64(double %128, double %130, double %128)
  %132 = tail call double @llvm.fma.f64(double %127, double %130, double %127)
  %133 = fsub double -0.000000e+00, %132
  %134 = tail call double @llvm.fma.f64(double %133, double %132, double %125)
  %135 = tail call double @llvm.fma.f64(double %134, double %131, double %132)
  %136 = fsub double -0.000000e+00, %135
  %137 = tail call double @llvm.fma.f64(double %136, double %135, double %125)
  %138 = tail call double @llvm.fma.f64(double %137, double %131, double %135)
  %139 = select i1 %122, double 0x37F0000000000000, double 1.000000e+00
  %140 = fmul double %139, %138
  %141 = fcmp oeq double %124, -0.000000e+00
  %142 = fcmp oeq double %124, 0xFFF0000000000000
  %143 = or i1 %141, %142
  %144 = select i1 %143, double %125, double %140
  %145 = fdiv double 1.000000e+00, %144
  %146 = fcmp olt double %2, 0x3FEFFFFFFFE00000
  br i1 %146, label %147, label %159

; <label>:147:                                    ; preds = %119
  %148 = tail call double @llvm.fma.f64(double %145, double 0x406C4BD831A51669, double 0xC0866AF45B757C26)
  %149 = tail call double @llvm.fma.f64(double %145, double %148, double 0x409061B293EE1671)
  %150 = tail call double @llvm.fma.f64(double %145, double %149, double 0xC08D4AA0FD7248E9)
  %151 = tail call double @llvm.fma.f64(double %145, double %150, double 0x4081EEBB0088748D)
  %152 = tail call double @llvm.fma.f64(double %145, double %151, double 0xC06FF4CB6C165EFE)
  %153 = tail call double @llvm.fma.f64(double %145, double %152, double 0x40559C379A609255)
  %154 = tail call double @llvm.fma.f64(double %145, double %153, double 0xC03762B2677680C6)
  %155 = tail call double @llvm.fma.f64(double %145, double %154, double 0x4017626132CF7C5A)
  %156 = tail call double @llvm.fma.f64(double %145, double %155, double 0xBFFA298CC231A949)
  %157 = tail call double @llvm.fma.f64(double %145, double %156, double 0xBF99FA2D429B22CA)
  %158 = tail call double @llvm.fma.f64(double %145, double %157, double 0x3FF00131C4B15D15)
  br label %169

; <label>:159:                                    ; preds = %119
  %160 = tail call double @llvm.fma.f64(double %145, double 0x406E1F462CC8E58A, double 0xC07DD260D25BEE8D)
  %161 = tail call double @llvm.fma.f64(double %145, double %160, double 0x407AF7DAB6C206E6)
  %162 = tail call double @llvm.fma.f64(double %145, double %161, double 0xC06D97C75A0F5809)
  %163 = tail call double @llvm.fma.f64(double %145, double %162, double 0x405632C20BF45D30)
  %164 = tail call double @llvm.fma.f64(double %145, double %163, double 0xC038E4908179A727)
  %165 = tail call double @llvm.fma.f64(double %145, double %164, double 0x40189538A73A2C3C)
  %166 = tail call double @llvm.fma.f64(double %145, double %165, double 0xBFFAAD8569B3607D)
  %167 = tail call double @llvm.fma.f64(double %145, double %166, double 0xBF980D1BEC4B54CB)
  %168 = tail call double @llvm.fma.f64(double %145, double %167, double 0x3FF001006F90EA2C)
  br label %169

; <label>:169:                                    ; preds = %159, %147
  %170 = phi double [ %158, %147 ], [ %168, %159 ]
  %171 = fmul double %144, %170
  br label %172

; <label>:172:                                    ; preds = %169, %116, %4
  %173 = phi double [ %21, %4 ], [ %118, %116 ], [ %171, %169 ]
  %174 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %175 = icmp eq i8 %174, 0
  %176 = fcmp ogt double %2, 1.000000e+00
  %177 = select i1 %176, double 0x7FF8000000000000, double %173
  %178 = fcmp oeq double %2, 1.000000e+00
  %179 = select i1 %178, double 0x7FF0000000000000, double %177
  %180 = select i1 %175, double %179, double %173
  %181 = tail call double @llvm.copysign.f64(double %180, double %0)
  ret double %181
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fma.f64(double, double, double) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_log_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.frexp.mant.f64(double %0)
  %3 = fcmp olt double %2, 0x3FE5555555555555
  %4 = zext i1 %3 to i32
  %5 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %7 = sub nsw i32 %6, %4
  %8 = fadd double %5, -1.000000e+00
  %9 = fadd double %5, 1.000000e+00
  %10 = fsub double %9, %5
  %11 = fsub double %9, %10
  %12 = fsub double %5, %11
  %13 = fsub double 1.000000e+00, %10
  %14 = fadd double %13, %12
  %15 = tail call double @llvm.amdgcn.rcp.f64(double %9) #47
  %16 = fsub double -0.000000e+00, %9
  %17 = tail call double @llvm.fma.f64(double %16, double %15, double 1.000000e+00) #47
  %18 = tail call double @llvm.fma.f64(double %17, double %15, double %15) #47
  %19 = tail call double @llvm.fma.f64(double %16, double %18, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %18) #47
  %21 = fmul double %8, %20
  %22 = fmul double %9, %21
  %23 = fsub double -0.000000e+00, %22
  %24 = tail call double @llvm.fma.f64(double %21, double %9, double %23) #47
  %25 = tail call double @llvm.fma.f64(double %21, double %14, double %24) #47
  %26 = fadd double %22, %25
  %27 = fsub double %26, %22
  %28 = fsub double %25, %27
  %29 = fsub double %8, %26
  %30 = fsub double %8, %29
  %31 = fsub double %30, %26
  %32 = fsub double %31, %28
  %33 = fadd double %29, %32
  %34 = fmul double %20, %33
  %35 = fadd double %21, %34
  %36 = fsub double %35, %21
  %37 = fsub double %34, %36
  %38 = fmul double %35, %35
  %39 = fsub double -0.000000e+00, %38
  %40 = tail call double @llvm.fma.f64(double %35, double %35, double %39) #47
  %41 = fmul double %37, 2.000000e+00
  %42 = tail call double @llvm.fma.f64(double %35, double %41, double %40) #47
  %43 = tail call double @llvm.fma.f64(double %37, double %37, double %42) #47
  %44 = fadd double %38, %43
  %45 = fsub double %44, %38
  %46 = fsub double %43, %45
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %48 = tail call double @llvm.fma.f64(double %44, double %47, double 0x3FC7474DD7F4DF2E)
  %49 = tail call double @llvm.fma.f64(double %44, double %48, double 0x3FCC71C016291751)
  %50 = tail call double @llvm.fma.f64(double %44, double %49, double 0x3FD249249B27ACF1)
  %51 = tail call double @llvm.fma.f64(double %44, double %50, double 0x3FD99999998EF7B6)
  %52 = tail call double @llvm.fma.f64(double %44, double %51, double 0x3FE5555555555780)
  %53 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 1) #47
  %54 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 1) #47
  %55 = fmul double %35, %44
  %56 = fsub double -0.000000e+00, %55
  %57 = tail call double @llvm.fma.f64(double %35, double %44, double %56) #47
  %58 = fmul double %37, %44
  %59 = tail call double @llvm.fma.f64(double %35, double %46, double %58) #47
  %60 = fadd double %57, %59
  %61 = fadd double %55, %60
  %62 = fsub double %61, %55
  %63 = fsub double %60, %62
  %64 = fmul double %61, %52
  %65 = fsub double -0.000000e+00, %64
  %66 = tail call double @llvm.fma.f64(double %61, double %52, double %65) #47
  %67 = tail call double @llvm.fma.f64(double %63, double %52, double %66) #47
  %68 = fadd double %64, %67
  %69 = fsub double %68, %64
  %70 = fsub double %67, %69
  %71 = fadd double %53, %68
  %72 = fsub double %71, %53
  %73 = fsub double %71, %72
  %74 = fsub double %53, %73
  %75 = fsub double %68, %72
  %76 = fadd double %75, %74
  %77 = fadd double %54, %70
  %78 = fsub double %77, %54
  %79 = fsub double %77, %78
  %80 = fsub double %54, %79
  %81 = fsub double %70, %78
  %82 = fadd double %81, %80
  %83 = fadd double %77, %76
  %84 = fadd double %71, %83
  %85 = fsub double %84, %71
  %86 = fsub double %83, %85
  %87 = fadd double %82, %86
  %88 = fadd double %84, %87
  %89 = fsub double %88, %84
  %90 = fsub double %87, %89
  %91 = sitofp i32 %7 to double
  %92 = fmul double %91, 0x3FE62E42FEFA39EF
  %93 = fsub double -0.000000e+00, %92
  %94 = tail call double @llvm.fma.f64(double %91, double 0x3FE62E42FEFA39EF, double %93) #47
  %95 = tail call double @llvm.fma.f64(double %91, double 0x3C7ABC9E3B39803F, double %94) #47
  %96 = fadd double %92, %95
  %97 = fsub double %96, %92
  %98 = fsub double %95, %97
  %99 = fadd double %96, %88
  %100 = fsub double %99, %96
  %101 = fsub double %99, %100
  %102 = fsub double %96, %101
  %103 = fsub double %88, %100
  %104 = fadd double %103, %102
  %105 = fadd double %98, %90
  %106 = fsub double %105, %98
  %107 = fsub double %105, %106
  %108 = fsub double %98, %107
  %109 = fsub double %90, %106
  %110 = fadd double %109, %108
  %111 = fadd double %105, %104
  %112 = fadd double %99, %111
  %113 = fsub double %112, %99
  %114 = fsub double %111, %113
  %115 = fadd double %110, %114
  %116 = fadd double %112, %115
  %117 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %118 = icmp eq i8 %117, 0
  %119 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %120 = select i1 %119, double %0, double %116
  %121 = fcmp olt double %0, 0.000000e+00
  %122 = select i1 %121, double 0x7FF8000000000000, double %120
  %123 = fcmp oeq double %0, 0.000000e+00
  %124 = select i1 %123, double 0xFFF0000000000000, double %122
  %125 = select i1 %118, double %124, double %116
  ret double %125
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.rsq.f64(double) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.frexp.mant.f64(double) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.ldexp.f64(double, i32) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.rcp.f64(double) #25

; Function Attrs: nounwind readnone speculatable
declare i1 @llvm.amdgcn.class.f64(double, i32) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_remainder_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call double @llvm.fabs.f64(double %1)
  %5 = fcmp ogt double %3, %4
  br i1 %5, label %6, label %61

; <label>:6:                                      ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %3)
  %8 = tail call double @llvm.amdgcn.frexp.mant.f64(double %3)
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %8, i32 26)
  %10 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %4)
  %11 = add nsw i32 %10, -1
  %12 = tail call double @llvm.amdgcn.frexp.mant.f64(double %4)
  %13 = tail call double @llvm.amdgcn.ldexp.f64(double %12, i32 1)
  %14 = sub i32 %7, %10
  %15 = fdiv double 1.000000e+00, %13
  %16 = icmp sgt i32 %14, 26
  br i1 %16, label %17, label %30

; <label>:17:                                     ; preds = %17, %6
  %18 = phi double [ %27, %17 ], [ %9, %6 ]
  %19 = phi i32 [ %28, %17 ], [ %14, %6 ]
  %20 = fmul double %15, %18
  %21 = tail call double @llvm.rint.f64(double %20)
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %22, double %13, double %18) #47
  %24 = fcmp olt double %23, 0.000000e+00
  %25 = fadd double %13, %23
  %26 = select i1 %24, double %25, double %23
  %27 = tail call double @llvm.amdgcn.ldexp.f64(double %26, i32 26)
  %28 = add nsw i32 %19, -26
  %29 = icmp sgt i32 %28, 26
  br i1 %29, label %17, label %30

; <label>:30:                                     ; preds = %17, %6
  %31 = phi i32 [ %14, %6 ], [ %28, %17 ]
  %32 = phi double [ %9, %6 ], [ %27, %17 ]
  %33 = add nsw i32 %31, -25
  %34 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 %33)
  %35 = fmul double %15, %34
  %36 = tail call double @llvm.rint.f64(double %35)
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %37, double %13, double %34) #47
  %39 = fcmp olt double %38, 0.000000e+00
  %40 = zext i1 %39 to i32
  %41 = fadd double %13, %38
  %42 = select i1 %39, double %41, double %38
  %43 = fptosi double %36 to i32
  %44 = sub nsw i32 %43, %40
  %45 = fmul double %42, 2.000000e+00
  %46 = fcmp ogt double %45, %13
  %47 = zext i1 %46 to i32
  %48 = fcmp oeq double %45, %13
  %49 = zext i1 %48 to i32
  %50 = and i32 %44, %49
  %51 = or i32 %50, %47
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %52, double 0.000000e+00, double %13
  %54 = fsub double %42, %53
  %55 = tail call double @llvm.amdgcn.ldexp.f64(double %54, i32 %11)
  %56 = bitcast double %0 to i64
  %57 = and i64 %56, -9223372036854775808
  %58 = bitcast double %55 to i64
  %59 = xor i64 %57, %58
  %60 = bitcast i64 %59 to double
  br label %83

; <label>:61:                                     ; preds = %2
  %62 = fcmp olt double %4, 0x7FE0000000000000
  %63 = fmul double %3, 2.000000e+00
  %64 = fcmp ogt double %63, %4
  %65 = and i1 %62, %64
  %66 = fmul double %4, 5.000000e-01
  %67 = fcmp ogt double %3, %66
  %68 = or i1 %65, %67
  %69 = bitcast double %0 to <2 x i32>
  %70 = extractelement <2 x i32> %69, i64 1
  %71 = bitcast double %1 to <2 x i32>
  %72 = extractelement <2 x i32> %71, i64 1
  %73 = xor i32 %72, %70
  %74 = ashr i32 %73, 30
  %75 = or i32 %74, 1
  %76 = sitofp i32 %75 to double
  %77 = fsub double -0.000000e+00, %76
  %78 = tail call double @llvm.fma.f64(double %1, double %77, double %0)
  %79 = select i1 %68, double %78, double %0
  %80 = fcmp oeq double %3, %4
  %81 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %0)
  %82 = select i1 %80, double %81, double %79
  br label %83

; <label>:83:                                     ; preds = %61, %30
  %84 = phi double [ %60, %30 ], [ %82, %61 ]
  %85 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %86 = icmp eq i8 %85, 0
  %87 = fcmp oeq double %1, 0.000000e+00
  %88 = fcmp uno double %1, 0.000000e+00
  %89 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %90 = or i1 %89, %88
  %91 = or i1 %87, %90
  %92 = and i1 %91, %86
  %93 = select i1 %92, double 0x7FF8000000000000, double %84
  ret double %93
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.rint.f64(double) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_ldexp_f32(float, i32) local_unnamed_addr #29 {
  %3 = tail call float @llvm.amdgcn.ldexp.f32(float %0, i32 %1)
  ret float %3
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.ldexp.f32(float, i32) #25

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected double @__ocml_sincos_f64(double, double addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call %1 @__ocmlpriv_trigred_f64(double %3) #21
  %5 = extractvalue %1 %4, 0
  %6 = extractvalue %1 %4, 1
  %7 = extractvalue %1 %4, 2
  %8 = tail call %2 @__ocmlpriv_sincosred2_f64(double %6, double %5) #21
  %9 = extractvalue %2 %8, 0
  %10 = extractvalue %2 %8, 1
  %11 = icmp sgt i32 %7, 1
  %12 = select i1 %11, i32 -2147483648, i32 0
  %13 = and i32 %7, 1
  %14 = icmp ne i32 %13, 0
  %15 = select i1 %14, double %10, double %9
  %16 = bitcast double %15 to <2 x i32>
  %17 = bitcast double %0 to <2 x i32>
  %18 = extractelement <2 x i32> %17, i64 1
  %19 = and i32 %18, -2147483648
  %20 = xor i32 %12, %19
  %21 = extractelement <2 x i32> %16, i64 1
  %22 = xor i32 %20, %21
  %23 = insertelement <2 x i32> %16, i32 %22, i64 1
  %24 = fsub double -0.000000e+00, %9
  %25 = select i1 %14, double %24, double %10
  %26 = bitcast double %25 to <2 x i32>
  %27 = extractelement <2 x i32> %26, i64 1
  %28 = xor i32 %27, %12
  %29 = insertelement <2 x i32> %26, i32 %28, i64 1
  %30 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %31 = icmp eq i8 %30, 0
  %32 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %33 = and i1 %32, %31
  %34 = select i1 %33, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %29
  %35 = select i1 %33, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %23
  %36 = bitcast double addrspace(5)* %1 to <2 x i32> addrspace(5)*
  store <2 x i32> %34, <2 x i32> addrspace(5)* %36, align 8, !tbaa !128
  %37 = bitcast <2 x i32> %35 to double
  ret double %37
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected %1 @__ocmlpriv_trigred_f64(double) local_unnamed_addr #28 {
  %2 = fcmp olt double %0, 0x4140000000000000
  br i1 %2, label %3, label %5

; <label>:3:                                      ; preds = %1
  %4 = tail call %1 @__ocmlpriv_trigredsmall_f64(double %0) #21
  br label %7

; <label>:5:                                      ; preds = %1
  %6 = tail call %1 @__ocmlpriv_trigredlarge_f64(double %0) #21
  br label %7

; <label>:7:                                      ; preds = %5, %3
  %8 = phi %1 [ %6, %5 ], [ %4, %3 ]
  ret %1 %8
}

; Function Attrs: nounwind readnone
define linkonce_odr protected %2 @__ocmlpriv_sincosred2_f64(double, double) local_unnamed_addr #29 {
  %3 = fmul double %0, %0
  %4 = fmul double %3, %0
  %5 = fmul double %3, 5.000000e-01
  %6 = fsub double 1.000000e+00, %5
  %7 = fsub double 1.000000e+00, %6
  %8 = fsub double %7, %5
  %9 = fmul double %3, %3
  %10 = tail call double @llvm.fma.f64(double %3, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %11 = tail call double @llvm.fma.f64(double %3, double %10, double 0xBE927E4FA17F65F6)
  %12 = tail call double @llvm.fma.f64(double %3, double %11, double 0x3EFA01A019F4EC90)
  %13 = tail call double @llvm.fma.f64(double %3, double %12, double 0xBF56C16C16C16967)
  %14 = tail call double @llvm.fma.f64(double %3, double %13, double 0x3FA5555555555555)
  %15 = fsub double -0.000000e+00, %1
  %16 = tail call double @llvm.fma.f64(double %0, double %15, double %8)
  %17 = tail call double @llvm.fma.f64(double %9, double %14, double %16)
  %18 = fadd double %6, %17
  %19 = tail call double @llvm.fma.f64(double %3, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %20 = tail call double @llvm.fma.f64(double %3, double %19, double 0x3EC71DE3796CDE01)
  %21 = tail call double @llvm.fma.f64(double %3, double %20, double 0xBF2A01A019E83E5C)
  %22 = tail call double @llvm.fma.f64(double %3, double %21, double 0x3F81111111110BB3)
  %23 = fsub double -0.000000e+00, %4
  %24 = fmul double %1, 5.000000e-01
  %25 = tail call double @llvm.fma.f64(double %23, double %22, double %24)
  %26 = tail call double @llvm.fma.f64(double %3, double %25, double %15)
  %27 = tail call double @llvm.fma.f64(double %23, double 0xBFC5555555555555, double %26)
  %28 = fsub double %0, %27
  %29 = insertvalue %2 undef, double %28, 0
  %30 = insertvalue %2 %29, double %18, 1
  ret %2 %30
}

; Function Attrs: nounwind readnone
define linkonce_odr protected %1 @__ocmlpriv_trigredsmall_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, 0x3FE45F306DC9C883
  %3 = tail call double @llvm.rint.f64(double %2)
  %4 = tail call double @llvm.fma.f64(double %3, double 0xBFF921FB54442D18, double %0)
  %5 = tail call double @llvm.fma.f64(double %3, double 0xBC91A62633145C00, double %4)
  %6 = fmul double %3, 0x3C91A62633145C00
  %7 = fsub double -0.000000e+00, %6
  %8 = tail call double @llvm.fma.f64(double %3, double 0x3C91A62633145C00, double %7)
  %9 = fsub double %4, %6
  %10 = fsub double %4, %9
  %11 = fsub double %10, %6
  %12 = fsub double %9, %5
  %13 = fadd double %12, %11
  %14 = fsub double %13, %8
  %15 = tail call double @llvm.fma.f64(double %3, double 0xB97B839A252049C0, double %14)
  %16 = fadd double %5, %15
  %17 = fsub double %16, %5
  %18 = fsub double %15, %17
  %19 = fptosi double %3 to i32
  %20 = and i32 %19, 3
  %21 = insertvalue %1 undef, double %18, 0
  %22 = insertvalue %1 %21, double %16, 1
  %23 = insertvalue %1 %22, i32 %20, 2
  ret %1 %23
}

; Function Attrs: nounwind readnone
define linkonce_odr protected %1 @__ocmlpriv_trigredlarge_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 0)
  %3 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 1)
  %4 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 2)
  %5 = fcmp oge double %0, 0x7B00000000000000
  %6 = select i1 %5, i32 -128, i32 0
  %7 = tail call double @llvm.amdgcn.ldexp.f64(double %0, i32 %6)
  %8 = fmul double %4, %7
  %9 = fmul double %3, %7
  %10 = fsub double -0.000000e+00, %9
  %11 = tail call double @llvm.fma.f64(double %3, double %7, double %10)
  %12 = fadd double %8, %11
  %13 = fsub double %12, %8
  %14 = fsub double %12, %13
  %15 = fsub double %11, %13
  %16 = fsub double %8, %14
  %17 = fadd double %15, %16
  %18 = fadd double %9, %12
  %19 = fsub double %18, %9
  %20 = fsub double %12, %19
  %21 = fmul double %2, %7
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %2, double %7, double %22)
  %24 = fadd double %23, %18
  %25 = fsub double %24, %18
  %26 = fsub double %24, %25
  %27 = fsub double %23, %25
  %28 = fsub double %18, %26
  %29 = fadd double %27, %28
  %30 = fadd double %21, %24
  %31 = fsub double %30, %21
  %32 = fsub double %24, %31
  %33 = fadd double %30, %32
  %34 = fsub double %33, %30
  %35 = fsub double %32, %34
  %36 = fadd double %29, %35
  %37 = fsub double %36, %35
  %38 = fsub double %29, %37
  %39 = fadd double %20, %38
  %40 = fsub double %39, %38
  %41 = fsub double %20, %40
  %42 = fadd double %17, %41
  %43 = fadd double %33, %36
  %44 = fsub double %43, %33
  %45 = fsub double %36, %44
  %46 = fadd double %45, %39
  %47 = fsub double %46, %45
  %48 = fsub double %39, %47
  %49 = fadd double %48, %42
  %50 = tail call double @llvm.amdgcn.ldexp.f64(double %43, i32 -16)
  %51 = tail call double @llvm.amdgcn.fract.f64(double %50)
  %52 = tail call i1 @llvm.amdgcn.class.f64(double %50, i32 516)
  %53 = select i1 %52, double 0.000000e+00, double %51
  %54 = tail call double @llvm.amdgcn.ldexp.f64(double %53, i32 16)
  %55 = fadd double %46, %54
  %56 = fcmp olt double %55, 0.000000e+00
  %57 = select i1 %56, double 6.553600e+04, double 0.000000e+00
  %58 = fadd double %54, %57
  %59 = fadd double %46, %58
  %60 = fptosi double %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = fsub double %58, %61
  %63 = fadd double %46, %62
  %64 = fsub double %63, %62
  %65 = fsub double %46, %64
  %66 = fadd double %49, %65
  %67 = fcmp oge double %63, 5.000000e-01
  %68 = zext i1 %67 to i32
  %69 = add nsw i32 %68, %60
  %70 = select i1 %67, double 1.000000e+00, double 0.000000e+00
  %71 = fsub double %63, %70
  %72 = fadd double %71, %66
  %73 = fsub double %72, %71
  %74 = fsub double %66, %73
  %75 = fmul double %72, 0x3FF921FB54442D18
  %76 = fsub double -0.000000e+00, %75
  %77 = tail call double @llvm.fma.f64(double %72, double 0x3FF921FB54442D18, double %76)
  %78 = tail call double @llvm.fma.f64(double %72, double 0x3C91A62633145C07, double %77)
  %79 = tail call double @llvm.fma.f64(double %74, double 0x3FF921FB54442D18, double %78)
  %80 = fadd double %75, %79
  %81 = fsub double %80, %75
  %82 = fsub double %79, %81
  %83 = and i32 %69, 3
  %84 = insertvalue %1 undef, double %82, 0
  %85 = insertvalue %1 %84, double %80, 1
  %86 = insertvalue %1 %85, i32 %83, 2
  ret %1 %86
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.amdgcn.fract.f64(double) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_asin_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fcmp ugt half %2, 0xH3800
  br i1 %3, label %9, label %4

; <label>:4:                                      ; preds = %1
  %5 = fmul half %0, %0
  %6 = tail call half @llvm.fma.f16(half %5, half 0xH2E0A, half 0xH3148) #21
  %7 = fmul half %5, %6
  %8 = tail call half @llvm.fma.f16(half %2, half %7, half %2) #21
  br label %18

; <label>:9:                                      ; preds = %1
  %10 = fpext half %2 to float
  %11 = tail call float @__ocml_fmuladd_f32(float %10, float -5.000000e-01, float 5.000000e-01) #21
  %12 = fcmp olt float %11, 0.000000e+00
  %13 = tail call float @llvm.sqrt.f32(float %11)
  %14 = select i1 %12, float 0x7FF8000000000000, float %13
  %15 = tail call float @__ocml_fmuladd_f32(float %11, float 0xBFD82675A0000000, float 0xBFFFF9F600000000) #21
  %16 = tail call float @__ocml_fmuladd_f32(float %14, float %15, float 0x3FF921FB60000000) #21
  %17 = fptrunc float %16 to half
  br label %18

; <label>:18:                                     ; preds = %9, %4
  %19 = phi half [ %8, %4 ], [ %17, %9 ]
  %20 = tail call half @llvm.copysign.f16(half %19, half %0) #21
  ret half %20
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.fabs.f16(half) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.fma.f16(half, half, half) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sqrt.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.copysign.f16(half, half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_pow_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.fabs.f16(half %0) #21
  %4 = fpext half %1 to float
  %5 = fpext half %3 to float
  %6 = tail call float @llvm.log2.f32(float %5)
  %7 = fmul float %6, %4
  %8 = tail call float @llvm.exp2.f32(float %7)
  %9 = tail call half @llvm.fabs.f16(half %1) #21
  %10 = tail call half @llvm.trunc.f16(half %9) #21
  %11 = fcmp oeq half %9, %10
  %12 = zext i1 %11 to i32
  %13 = fmul half %10, 0xH3800
  %14 = tail call half @llvm.amdgcn.fract.f16(half %13) #21
  %15 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %13, i32 516) #21
  %16 = select i1 %15, half 0xH0000, half %14
  %17 = fcmp oeq half %16, 0xH0000
  %18 = and i1 %11, %17
  %19 = zext i1 %18 to i32
  %20 = add nuw nsw i32 %19, %12
  %21 = fptrunc float %8 to half
  %22 = icmp eq i32 %20, 1
  %23 = fcmp olt half %0, 0xH0000
  %24 = and i1 %23, %22
  %25 = select i1 %24, half 0xH8000, half 0xH0000
  %26 = tail call half @llvm.copysign.f16(half %21, half %25) #21
  %27 = fcmp oeq half %0, 0xH0000
  %28 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 512) #21
  %29 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 960) #21
  %30 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 4) #21
  %31 = fcmp oeq half %1, 0xH0000
  %32 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %9, i32 512) #21
  %33 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 4) #21
  %34 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 512) #21
  %35 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 960) #21
  %36 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %90

; <label>:38:                                     ; preds = %2
  %39 = fcmp uno half %9, 0xH0000
  %40 = fcmp uno half %0, 0xH0000
  %41 = fcmp ogt half %3, 0xH3C00
  %42 = fcmp olt half %3, 0xH3C00
  %43 = xor i1 %29, true
  %44 = icmp eq i32 %20, 0
  %45 = and i1 %44, %43
  %46 = select i1 %45, half 0xH7E00, half %26
  %47 = and i1 %42, %33
  %48 = select i1 %47, half 0xH7C00, half %46
  %49 = and i1 %41, %33
  %50 = and i1 %42, %34
  %51 = or i1 %50, %49
  %52 = select i1 %51, half 0xH0000, half %48
  %53 = and i1 %41, %34
  %54 = select i1 %53, half 0xH7C00, half %52
  %55 = tail call half @llvm.copysign.f16(half 0xH7C00, half %0) #21
  %56 = xor i1 %35, true
  %57 = and i1 %27, %56
  %58 = and i1 %57, %22
  %59 = select i1 %58, half %55, half %54
  %60 = icmp ne i32 %20, 1
  %61 = and i1 %57, %60
  %62 = select i1 %61, half 0xH7C00, half %59
  %63 = tail call half @llvm.copysign.f16(half 0xH0000, half %0) #21
  %64 = and i1 %27, %35
  %65 = and i1 %64, %22
  %66 = select i1 %65, half %63, half %62
  %67 = and i1 %64, %60
  %68 = select i1 %67, half 0xH0000, half %66
  %69 = and i1 %27, %33
  %70 = select i1 %69, half 0xH7C00, half %68
  %71 = fcmp oeq half %0, 0xHBC00
  %72 = and i1 %71, %32
  %73 = select i1 %72, half 0xH3C00, half %70
  %74 = and i1 %30, %56
  %75 = and i1 %74, %22
  %76 = select i1 %75, half 0xH8000, half %73
  %77 = and i1 %74, %60
  %78 = select i1 %77, half 0xH0000, half %76
  %79 = and i1 %30, %35
  %80 = and i1 %79, %22
  %81 = select i1 %80, half 0xHFC00, half %78
  %82 = and i1 %79, %60
  %83 = select i1 %82, half 0xH7C00, half %81
  %84 = and i1 %28, %56
  %85 = select i1 %84, half 0xH0000, half %83
  %86 = and i1 %28, %35
  %87 = select i1 %86, half 0xH7C00, half %85
  %88 = select i1 %40, half %0, half %87
  %89 = select i1 %39, half %1, half %88
  br label %105

; <label>:90:                                     ; preds = %2
  %91 = tail call half @llvm.copysign.f16(half 0xH7C00, half %0) #21
  %92 = xor i1 %35, true
  %93 = and i1 %27, %92
  %94 = and i1 %93, %22
  %95 = select i1 %94, half %91, half %26
  %96 = icmp ne i32 %20, 1
  %97 = and i1 %93, %96
  %98 = select i1 %97, half 0xH7C00, half %95
  %99 = tail call half @llvm.copysign.f16(half 0xH0000, half %0) #21
  %100 = and i1 %27, %35
  %101 = and i1 %100, %22
  %102 = select i1 %101, half %99, half %98
  %103 = and i1 %100, %96
  %104 = select i1 %103, half 0xH0000, half %102
  br label %105

; <label>:105:                                    ; preds = %90, %38
  %106 = phi half [ %104, %90 ], [ %89, %38 ]
  %107 = fcmp oeq half %0, 0xH3C00
  %108 = or i1 %107, %31
  %109 = select i1 %108, half 0xH3C00, half %106
  ret half %109
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.log2.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.exp2.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.trunc.f16(half) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.amdgcn.fract.f16(half) #25

; Function Attrs: nounwind readnone speculatable
declare i1 @llvm.amdgcn.class.f16(half, i32) #25

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected float @__ocml_nextafter_f32(float, float) local_unnamed_addr #31 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = sub nsw i32 -2147483648, %3
  %6 = icmp slt i32 %3, 0
  %7 = select i1 %6, i32 %5, i32 %3
  %8 = bitcast float %1 to i32
  %9 = and i32 %8, 2147483647
  %10 = sub nsw i32 -2147483648, %8
  %11 = icmp slt i32 %8, 0
  %12 = select i1 %11, i32 %10, i32 %8
  %13 = icmp slt i32 %7, %12
  %14 = select i1 %13, i32 1, i32 -1
  %15 = add nsw i32 %14, %7
  %16 = sub nsw i32 -2147483648, %15
  %17 = icmp slt i32 %15, 0
  %18 = select i1 %17, i32 %16, i32 %15
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = icmp ugt i32 %4, 2139095040
  %22 = select i1 %21, i32 %3, i32 %18
  %23 = icmp ugt i32 %9, 2139095040
  %24 = select i1 %23, i32 %8, i32 %22
  %25 = select i1 %20, i32 %24, i32 %18
  %26 = or i32 %9, %4
  %27 = icmp eq i32 %26, 0
  %28 = icmp eq i32 %3, %8
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 %8, i32 %25
  %31 = bitcast i32 %30 to float
  ret float %31
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_scalbn_f32(float, i32) local_unnamed_addr #28 {
  %3 = tail call float @__ocml_ldexp_f32(float %0, i32 %1) #21
  ret float %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_acos_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call half @llvm.fma.f16(half %2, half 0xHB800, half 0xH3800) #21
  %4 = fmul half %0, %0
  %5 = fcmp ogt half %2, 0xH3800
  %6 = select i1 %5, half %3, half %4
  %7 = tail call half @llvm.fma.f16(half %6, half 0xH2E0A, half 0xH3148) #21
  %8 = fmul half %6, %7
  %9 = fcmp olt half %6, 0xH0000
  %10 = tail call half @llvm.sqrt.f16(half %6) #21
  %11 = select i1 %9, half 0xH7E00, half %10
  %12 = tail call half @llvm.fma.f16(half %11, half %8, half %11) #21
  %13 = fmul half %12, 0xH4000
  %14 = fsub half 0xH8000, %13
  %15 = tail call half @llvm.fma.f16(half 0xH3FAA, half 0xH3E8F, half %14) #21
  %16 = fcmp olt half %0, 0xH0000
  %17 = select i1 %16, half %15, half %13
  %18 = tail call half @llvm.fma.f16(half %0, half %8, half %0) #21
  %19 = fsub half 0xH8000, %18
  %20 = tail call half @llvm.fma.f16(half 0xH3BAA, half 0xH3E8F, half %19) #21
  %21 = select i1 %5, half %17, half %20
  ret half %21
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.sqrt.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fabs_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  ret half %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fma_f16(half, half, half) local_unnamed_addr #28 {
  %4 = tail call half @llvm.fma.f16(half %0, half %1, half %2) #21
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_atan_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp ogt double %2, 1.000000e+00
  %4 = fdiv double 1.000000e+00, %2
  %5 = select i1 %3, double %4, double %2
  %6 = tail call double @__ocmlpriv_atanred_f64(double %5) #21
  %7 = fsub double -0.000000e+00, %6
  %8 = tail call double @llvm.fma.f64(double 0x3FEDD9AD336A0500, double 0x3FFAF154EEB562D6, double %7)
  %9 = select i1 %3, double %8, double %6
  %10 = tail call double @llvm.copysign.f64(double %9, double %0)
  ret double %10
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocmlpriv_atanred_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, %0
  %3 = tail call double @llvm.fma.f64(double %2, double 0x3EEBA404B5E68A13, double 0xBF23E260BD3237F4)
  %4 = tail call double @llvm.fma.f64(double %2, double %3, double 0x3F4B2BB069EFB384)
  %5 = tail call double @llvm.fma.f64(double %2, double %4, double 0xBF67952DAF56DE9B)
  %6 = tail call double @llvm.fma.f64(double %2, double %5, double 0x3F7D6D43A595C56F)
  %7 = tail call double @llvm.fma.f64(double %2, double %6, double 0xBF8C6EA4A57D9582)
  %8 = tail call double @llvm.fma.f64(double %2, double %7, double 0x3F967E295F08B19F)
  %9 = tail call double @llvm.fma.f64(double %2, double %8, double 0xBF9E9AE6FC27006A)
  %10 = tail call double @llvm.fma.f64(double %2, double %9, double 0x3FA2C15B5711927A)
  %11 = tail call double @llvm.fma.f64(double %2, double %10, double 0xBFA59976E82D3FF0)
  %12 = tail call double @llvm.fma.f64(double %2, double %11, double 0x3FA82D5D6EF28734)
  %13 = tail call double @llvm.fma.f64(double %2, double %12, double 0xBFAAE5CE6A214619)
  %14 = tail call double @llvm.fma.f64(double %2, double %13, double 0x3FAE1BB48427B883)
  %15 = tail call double @llvm.fma.f64(double %2, double %14, double 0xBFB110E48B207F05)
  %16 = tail call double @llvm.fma.f64(double %2, double %15, double 0x3FB3B13657B87036)
  %17 = tail call double @llvm.fma.f64(double %2, double %16, double 0xBFB745D119378E4F)
  %18 = tail call double @llvm.fma.f64(double %2, double %17, double 0x3FBC71C717E1913C)
  %19 = tail call double @llvm.fma.f64(double %2, double %18, double 0xBFC2492492376B7D)
  %20 = tail call double @llvm.fma.f64(double %2, double %19, double 0x3FC99999999952CC)
  %21 = tail call double @llvm.fma.f64(double %2, double %20, double 0xBFD5555555555523)
  %22 = fmul double %2, %21
  %23 = tail call double @llvm.fma.f64(double %0, double %22, double %0)
  ret double %23
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_rcbrt_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = tail call float @llvm.canonicalize.f32(float %0)
  %5 = select i1 %3, float %0, float %4
  %6 = tail call float @llvm.fabs.f32(float %5)
  %7 = tail call i1 @llvm.amdgcn.class.f32(float %5, i32 144)
  %8 = select i1 %7, i32 24, i32 0
  %9 = tail call float @llvm.amdgcn.ldexp.f32(float %6, i32 %8)
  %10 = select i1 %3, float %9, float %6
  %11 = tail call float @llvm.log2.f32(float %10)
  %12 = fmul float %11, 0xBFD5555560000000
  %13 = tail call float @llvm.exp2.f32(float %12)
  %14 = fmul float %13, %13
  %15 = fmul float %10, %13
  %16 = fsub float -0.000000e+00, %15
  %17 = tail call float @__ocml_fmuladd_f32(float %14, float %16, float 1.000000e+00) #21
  %18 = fmul float %13, 0x3FD5555560000000
  %19 = tail call float @__ocml_fmuladd_f32(float %17, float %18, float %13) #21
  %20 = select i1 %7, i32 8, i32 0
  %21 = tail call float @llvm.amdgcn.ldexp.f32(float %19, i32 %20)
  %22 = select i1 %3, float %21, float %19
  %23 = tail call float @llvm.amdgcn.rcp.f32(float %5)
  %24 = tail call i1 @llvm.amdgcn.class.f32(float %5, i32 615)
  %25 = select i1 %24, float %23, float %22
  %26 = tail call float @llvm.copysign.f32(float %25, float %5)
  ret float %26
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.canonicalize.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.rcp.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fmax_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.canonicalize.f16(half %0) #21
  %4 = tail call half @llvm.canonicalize.f16(half %1) #21
  %5 = tail call half @llvm.maxnum.f16(half %3, half %4) #21
  ret half %5
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.canonicalize.f16(half) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.maxnum.f16(half, half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_erfc_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_erfc_f32(float %2) #21
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_erfc_f32(float) local_unnamed_addr #28 {
  %2 = fcmp olt float %0, 0x3FDE861FC0000000
  br i1 %2, label %3, label %40

; <label>:3:                                      ; preds = %1
  %4 = fcmp ogt float %0, -1.000000e+00
  br i1 %4, label %5, label %15

; <label>:5:                                      ; preds = %3
  %6 = fmul float %0, %0
  %7 = tail call float @__ocml_fmuladd_f32(float %6, float 0x3F1496A320000000, float 0xBF4A3F7000000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %6, float %7, float 0x3F75405B20000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %6, float %8, float 0xBF9B7F90E0000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %6, float %9, float 0x3FBCE2CF80000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %6, float %10, float 0xBFD81273E0000000) #21
  %12 = tail call float @__ocml_fmuladd_f32(float %6, float %11, float 0x3FF20DD740000000) #21
  %13 = fsub float -0.000000e+00, %0
  %14 = tail call float @__ocml_fmuladd_f32(float %13, float %12, float 1.000000e+00) #21
  br label %108

; <label>:15:                                     ; preds = %3
  %16 = fcmp ogt float %0, -2.000000e+00
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %15
  %18 = fsub float -1.000000e+00, %0
  %19 = tail call float @__ocml_fmuladd_f32(float %18, float 0xBF6E72C840000000, float 0x3F9FE43A00000000) #21
  %20 = tail call float @__ocml_fmuladd_f32(float %18, float %19, float 0xBFB6C8EEC0000000) #21
  %21 = tail call float @__ocml_fmuladd_f32(float %18, float %20, float 0x3FB3DB6CE0000000) #21
  %22 = tail call float @__ocml_fmuladd_f32(float %18, float %21, float 0x3FC1760E00000000) #21
  %23 = tail call float @__ocml_fmuladd_f32(float %18, float %22, float 0xBFDA8D6D00000000) #21
  %24 = tail call float @__ocml_fmuladd_f32(float %18, float %23, float 0x3FDA90F560000000) #21
  %25 = tail call float @__ocml_fmuladd_f32(float %18, float %24, float 0x3FFD7BB3E0000000) #21
  br label %108

; <label>:26:                                     ; preds = %15
  %27 = fcmp ogt float %0, 0xC00DF80000000000
  br i1 %27, label %28, label %108

; <label>:28:                                     ; preds = %26
  %29 = fsub float -2.000000e+00, %0
  %30 = tail call float @__ocml_fmuladd_f32(float %29, float 0xBF219665A0000000, float 0xBF1D8E18A0000000) #21
  %31 = tail call float @__ocml_fmuladd_f32(float %29, float %30, float 0x3F813B7C00000000) #21
  %32 = tail call float @__ocml_fmuladd_f32(float %29, float %31, float 0xBF8CF36A80000000) #21
  %33 = tail call float @__ocml_fmuladd_f32(float %29, float %32, float 0xBFC9460FA0000000) #21
  %34 = tail call float @__ocml_fmuladd_f32(float %29, float %33, float 0x3FE6E23C80000000) #21
  %35 = fmul float %34, %34
  %36 = fmul float %35, %35
  %37 = fmul float %36, %36
  %38 = fsub float -0.000000e+00, %37
  %39 = tail call float @__ocml_fmuladd_f32(float %38, float %37, float 2.000000e+00) #21
  br label %108

; <label>:40:                                     ; preds = %1
  %41 = fcmp olt float %0, 1.000000e+00
  br i1 %41, label %42, label %50

; <label>:42:                                     ; preds = %40
  %43 = fadd float %0, -7.500000e-01
  %44 = tail call float @__ocml_fmuladd_f32(float %43, float 0x3F9B3CA9A0000000, float 0x3FAA276060000000) #21
  %45 = tail call float @__ocml_fmuladd_f32(float %43, float %44, float 0xBFC3489BC0000000) #21
  %46 = tail call float @__ocml_fmuladd_f32(float %43, float %45, float 0xBF9B5B5F00000000) #21
  %47 = tail call float @__ocml_fmuladd_f32(float %43, float %46, float 0x3FDEDC50C0000000) #21
  %48 = tail call float @__ocml_fmuladd_f32(float %43, float %47, float 0xBFE492E580000000) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %43, float %48, float 0x3FD27C6D20000000) #21
  br label %108

; <label>:50:                                     ; preds = %40
  %51 = fcmp olt float %0, 1.500000e+00
  br i1 %51, label %52, label %60

; <label>:52:                                     ; preds = %50
  %53 = fadd float %0, -1.250000e+00
  %54 = tail call float @__ocml_fmuladd_f32(float %53, float 0xBF9558B4E0000000, float 0x3FA7F43160000000) #21
  %55 = tail call float @__ocml_fmuladd_f32(float %53, float %54, float 0x3F79362C60000000) #21
  %56 = tail call float @__ocml_fmuladd_f32(float %53, float %55, float 0xBFC5716AC0000000) #21
  %57 = tail call float @__ocml_fmuladd_f32(float %53, float %56, float 0x3FD2EBF300000000) #21
  %58 = tail call float @__ocml_fmuladd_f32(float %53, float %57, float 0xBFCE4653C0000000) #21
  %59 = tail call float @__ocml_fmuladd_f32(float %53, float %58, float 0x3FB3BCD140000000) #21
  br label %108

; <label>:60:                                     ; preds = %50
  %61 = fcmp olt float %0, 1.750000e+00
  br i1 %61, label %62, label %70

; <label>:62:                                     ; preds = %60
  %63 = fadd float %0, -1.625000e+00
  %64 = tail call float @__ocml_fmuladd_f32(float %63, float 0xBF8D1CD9C0000000, float 0x3F62D8F6C0000000) #21
  %65 = tail call float @__ocml_fmuladd_f32(float %63, float %64, float 0x3FA9742C60000000) #21
  %66 = tail call float @__ocml_fmuladd_f32(float %63, float %65, float 0xBFBD664720000000) #21
  %67 = tail call float @__ocml_fmuladd_f32(float %63, float %66, float 0x3FC0BCFCE0000000) #21
  %68 = tail call float @__ocml_fmuladd_f32(float %63, float %67, float 0xBFB499D460000000) #21
  %69 = tail call float @__ocml_fmuladd_f32(float %63, float %68, float 0x3F9612D8A0000000) #21
  br label %108

; <label>:70:                                     ; preds = %60
  %71 = fcmp olt float %0, 0x40240C0000000000
  br i1 %71, label %72, label %105

; <label>:72:                                     ; preds = %70
  %73 = fmul float %0, %0
  %74 = tail call float @llvm.amdgcn.rcp.f32(float %73)
  %75 = fcmp olt float %0, 2.750000e+00
  br i1 %75, label %76, label %78

; <label>:76:                                     ; preds = %72
  %77 = tail call float @__ocml_fmuladd_f32(float %74, float 0x3FEECF46A0000000, float 0xBFFD8A0060000000) #21
  br label %80

; <label>:78:                                     ; preds = %72
  %79 = tail call float @__ocml_fmuladd_f32(float %74, float 0x403107A4C0000000, float 0xC027FA4040000000) #21
  br label %80

; <label>:80:                                     ; preds = %78, %76
  %81 = phi float [ 0x40122B8C80000000, %78 ], [ 0x3FFAB72D80000000, %76 ]
  %82 = phi float [ %79, %78 ], [ %77, %76 ]
  %83 = phi float [ 0xBFF7FAF0C0000000, %78 ], [ 0xBFF05ED120000000, %76 ]
  %84 = phi float [ 0x3FE3F746E0000000, %78 ], [ 0x3FE2691FE0000000, %76 ]
  %85 = phi float [ 0xBFDFFFC900000000, %78 ], [ 0xBFDFD0DDC0000000, %76 ]
  %86 = phi float [ 0xBF84341A60000000, %78 ], [ 0xBF845B16E0000000, %76 ]
  %87 = tail call float @__ocml_fmuladd_f32(float %74, float %82, float %81) #21
  %88 = tail call float @__ocml_fmuladd_f32(float %74, float %87, float %83) #21
  %89 = tail call float @__ocml_fmuladd_f32(float %74, float %88, float %84) #21
  %90 = tail call float @__ocml_fmuladd_f32(float %74, float %89, float %85) #21
  %91 = tail call float @__ocml_fmuladd_f32(float %74, float %90, float %86) #21
  %92 = bitcast float %0 to i32
  %93 = and i32 %92, -8192
  %94 = bitcast i32 %93 to float
  %95 = fsub float %94, %0
  %96 = fadd float %94, %0
  %97 = tail call float @__ocml_fmuladd_f32(float %95, float %96, float %91) #21
  %98 = tail call float @__ocml_exp_f32(float %97) #21
  %99 = tail call float @llvm.amdgcn.rcp.f32(float %0)
  %100 = fmul float %99, %98
  %101 = fsub float -0.000000e+00, %94
  %102 = tail call float @__ocml_fmuladd_f32(float %94, float %101, float -5.625000e-01) #21
  %103 = tail call float @__ocml_exp_f32(float %102) #21
  %104 = fmul float %100, %103
  br label %108

; <label>:105:                                    ; preds = %70
  %106 = fcmp ord float %0, 0.000000e+00
  %107 = select i1 %106, float 0.000000e+00, float %0
  br label %108

; <label>:108:                                    ; preds = %105, %80, %62, %52, %42, %28, %26, %17, %5
  %109 = phi float [ 2.000000e+00, %26 ], [ %14, %5 ], [ %25, %17 ], [ %39, %28 ], [ %49, %42 ], [ %59, %52 ], [ %69, %62 ], [ %104, %80 ], [ %107, %105 ]
  ret float %109
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_exp_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = load i8, i8 addrspace(4)* @__oclc_unsafe_math_opt, align 1, !tbaa !140, !range !43
  %5 = icmp ne i8 %4, 0
  br i1 %3, label %38, label %6

; <label>:6:                                      ; preds = %1
  br i1 %5, label %7, label %10

; <label>:7:                                      ; preds = %6
  %8 = fmul float %0, 0x3FF7154760000000
  %9 = tail call float @llvm.exp2.f32(float %8)
  br label %77

; <label>:10:                                     ; preds = %6
  %11 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %12 = icmp sgt i32 %11, 899
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %10
  switch i32 %11, label %19 [
    i32 801, label %14
    i32 701, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %10
  %15 = fmul float %0, 0x3FF7154760000000
  %16 = fsub float -0.000000e+00, %15
  %17 = tail call float @llvm.fma.f32(float %0, float 0x3FF7154760000000, float %16)
  %18 = tail call float @llvm.fma.f32(float %0, float 0x3E54AE0BE0000000, float %17)
  br label %28

; <label>:19:                                     ; preds = %13
  %20 = bitcast float %0 to i32
  %21 = and i32 %20, -4096
  %22 = bitcast i32 %21 to float
  %23 = fsub float %0, %22
  %24 = fmul float %22, 0x3FF7140000000000
  %25 = fmul float %23, 0x3F347652A0000000
  %26 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3FF7140000000000, float %25) #21
  %27 = tail call float @__ocml_fmuladd_f32(float %22, float 0x3F347652A0000000, float %26) #21
  br label %28

; <label>:28:                                     ; preds = %19, %14
  %29 = phi float [ %18, %14 ], [ %27, %19 ]
  %30 = phi float [ %15, %14 ], [ %24, %19 ]
  %31 = tail call float @llvm.exp2.f32(float %29)
  %32 = tail call float @llvm.exp2.f32(float %30)
  %33 = fmul float %31, %32
  %34 = fcmp olt float %0, 0xC055D58A00000000
  %35 = select i1 %34, float 0.000000e+00, float %33
  %36 = fcmp ogt float %0, 0x40562E4300000000
  %37 = select i1 %36, float 0x7FF0000000000000, float %35
  br label %77

; <label>:38:                                     ; preds = %1
  %39 = fcmp olt float %0, 0xC055D58A00000000
  %40 = select i1 %39, float 6.400000e+01, float 0.000000e+00
  %41 = fadd float %40, %0
  br i1 %5, label %42, label %47

; <label>:42:                                     ; preds = %38
  %43 = fmul float %41, 0x3FF7154760000000
  %44 = tail call float @llvm.exp2.f32(float %43)
  %45 = select i1 %39, float 0x3A2969D480000000, float 1.000000e+00
  %46 = fmul float %45, %44
  br label %77

; <label>:47:                                     ; preds = %38
  %48 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %49 = icmp sgt i32 %48, 899
  br i1 %49, label %51, label %50

; <label>:50:                                     ; preds = %47
  switch i32 %48, label %56 [
    i32 801, label %51
    i32 701, label %51
  ]

; <label>:51:                                     ; preds = %50, %50, %47
  %52 = fmul float %41, 0x3FF7154760000000
  %53 = fsub float -0.000000e+00, %52
  %54 = tail call float @llvm.fma.f32(float %41, float 0x3FF7154760000000, float %53)
  %55 = tail call float @llvm.fma.f32(float %41, float 0x3E54AE0BE0000000, float %54)
  br label %65

; <label>:56:                                     ; preds = %50
  %57 = bitcast float %41 to i32
  %58 = and i32 %57, -4096
  %59 = bitcast i32 %58 to float
  %60 = fsub float %41, %59
  %61 = fmul float %59, 0x3FF7140000000000
  %62 = fmul float %60, 0x3F347652A0000000
  %63 = tail call float @__ocml_fmuladd_f32(float %60, float 0x3FF7140000000000, float %62) #21
  %64 = tail call float @__ocml_fmuladd_f32(float %59, float 0x3F347652A0000000, float %63) #21
  br label %65

; <label>:65:                                     ; preds = %56, %51
  %66 = phi float [ %55, %51 ], [ %64, %56 ]
  %67 = phi float [ %52, %51 ], [ %61, %56 ]
  %68 = tail call float @llvm.exp2.f32(float %66)
  %69 = tail call float @llvm.exp2.f32(float %67)
  %70 = fmul float %68, %69
  %71 = select i1 %39, float 0x3A2969D480000000, float 1.000000e+00
  %72 = fmul float %71, %70
  %73 = fcmp olt float %41, 0xC059D1DA00000000
  %74 = select i1 %73, float 0.000000e+00, float %72
  %75 = fcmp ogt float %41, 0x40562E4300000000
  %76 = select i1 %75, float 0x7FF0000000000000, float %74
  br label %77

; <label>:77:                                     ; preds = %65, %42, %28, %7
  %78 = phi float [ %9, %7 ], [ %37, %28 ], [ %46, %42 ], [ %76, %65 ]
  ret float %78
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fma.f32(float, float, float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_trunc_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.trunc.f64(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_cosh_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fadd double %2, 0xBFE62E42FEFA39EF
  %4 = fsub double %3, %2
  %5 = fsub double %4, %3
  %6 = fadd double %2, %5
  %7 = fadd double %4, 0x3FE62E42FEFA39EF
  %8 = fsub double %6, %7
  %9 = fadd double %8, 0xBC7ABC9E3B39803F
  %10 = fadd double %3, %9
  %11 = fsub double %10, %3
  %12 = fsub double %9, %11
  %13 = insertelement <2 x double> undef, double %12, i32 0
  %14 = insertelement <2 x double> %13, double %10, i32 1
  %15 = tail call <2 x double> @__ocmlpriv_epexpep_f64(<2 x double> %14) #21
  %16 = extractelement <2 x double> %15, i64 1
  %17 = tail call double @llvm.amdgcn.rcp.f64(double %16) #47
  %18 = fsub double -0.000000e+00, %16
  %19 = tail call double @llvm.fma.f64(double %18, double %17, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %17, double %17) #47
  %21 = tail call double @llvm.fma.f64(double %18, double %20, double 1.000000e+00) #47
  %22 = tail call double @llvm.fma.f64(double %21, double %20, double %20) #47
  %23 = fmul double %16, %22
  %24 = fsub double -0.000000e+00, %23
  %25 = tail call double @llvm.fma.f64(double %22, double %16, double %24) #47
  %26 = extractelement <2 x double> %15, i64 0
  %27 = tail call double @llvm.fma.f64(double %22, double %26, double %25) #47
  %28 = fadd double %23, %27
  %29 = fsub double %28, %23
  %30 = fsub double %27, %29
  %31 = fsub double 1.000000e+00, %28
  %32 = fsub double 1.000000e+00, %31
  %33 = fsub double %32, %28
  %34 = fsub double %33, %30
  %35 = fadd double %31, %34
  %36 = fsub double %35, %31
  %37 = fsub double %34, %36
  %38 = fmul double %22, %35
  %39 = fmul double %16, %38
  %40 = fsub double -0.000000e+00, %39
  %41 = tail call double @llvm.fma.f64(double %38, double %16, double %40) #47
  %42 = tail call double @llvm.fma.f64(double %38, double %26, double %41) #47
  %43 = fadd double %39, %42
  %44 = fsub double %43, %39
  %45 = fsub double %42, %44
  %46 = fsub double %35, %43
  %47 = fsub double %35, %46
  %48 = fsub double %47, %43
  %49 = fadd double %37, %48
  %50 = fsub double %49, %45
  %51 = fadd double %46, %50
  %52 = fmul double %22, %51
  %53 = fadd double %22, %38
  %54 = fsub double %53, %22
  %55 = fsub double %38, %54
  %56 = fadd double %55, %52
  %57 = fadd double %53, %56
  %58 = fsub double %57, %53
  %59 = fsub double %56, %58
  %60 = tail call double @llvm.amdgcn.ldexp.f64(double %57, i32 -2) #47
  %61 = tail call double @llvm.amdgcn.ldexp.f64(double %59, i32 -2) #47
  %62 = fadd double %16, %60
  %63 = fsub double %62, %16
  %64 = fsub double %60, %63
  %65 = fadd double %26, %61
  %66 = fadd double %64, %65
  %67 = fadd double %62, %66
  %68 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %69 = icmp eq i8 %68, 0
  %70 = fcmp oge double %2, 0x408633CE8FB9F87E
  %71 = and i1 %70, %69
  %72 = select i1 %71, double 0x7FF0000000000000, double %67
  ret double %72
}

; Function Attrs: nounwind readnone
define linkonce_odr protected <2 x double> @__ocmlpriv_epexpep_f64(<2 x double>) local_unnamed_addr #29 {
  %2 = extractelement <2 x double> %0, i64 1
  %3 = fmul double %2, 0x3FF71547652B82FE
  %4 = tail call double @llvm.rint.f64(double %3)
  %5 = tail call double @llvm.fma.f64(double %4, double 0xBFE62E42FEFA3000, double %2)
  %6 = extractelement <2 x double> %0, i64 0
  %7 = fadd double %6, %5
  %8 = fsub double %7, %5
  %9 = fsub double %6, %8
  %10 = fmul double %4, 0x3D53DE6AF278E000
  %11 = fsub double %7, %10
  %12 = fsub double %7, %11
  %13 = fsub double %12, %10
  %14 = fadd double %9, %13
  %15 = fadd double %11, %14
  %16 = fsub double %15, %11
  %17 = fsub double %14, %16
  %18 = fmul double %4, 0x3AC9CC01F97B57A0
  %19 = fsub double %15, %18
  %20 = fsub double %15, %19
  %21 = fsub double %20, %18
  %22 = fadd double %17, %21
  %23 = fadd double %19, %22
  %24 = fsub double %23, %19
  %25 = fsub double %22, %24
  %26 = tail call double @llvm.fma.f64(double %23, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %27 = tail call double @llvm.fma.f64(double %23, double %26, double 0x3EC71DEE623FDE64)
  %28 = tail call double @llvm.fma.f64(double %23, double %27, double 0x3EFA01997C89E6B0)
  %29 = tail call double @llvm.fma.f64(double %23, double %28, double 0x3F2A01A014761F6E)
  %30 = tail call double @llvm.fma.f64(double %23, double %29, double 0x3F56C16C1852B7B0)
  %31 = tail call double @llvm.fma.f64(double %23, double %30, double 0x3F81111111122322)
  %32 = tail call double @llvm.fma.f64(double %23, double %31, double 0x3FA55555555502A1)
  %33 = tail call double @llvm.fma.f64(double %23, double %32, double 0x3FC5555555555511)
  %34 = tail call double @llvm.fma.f64(double %23, double %33, double 0x3FE000000000000B)
  %35 = fmul double %23, %23
  %36 = fsub double -0.000000e+00, %35
  %37 = tail call double @llvm.fma.f64(double %23, double %23, double %36) #47
  %38 = fmul double %25, 2.000000e+00
  %39 = tail call double @llvm.fma.f64(double %23, double %38, double %37) #47
  %40 = tail call double @llvm.fma.f64(double %25, double %25, double %39) #47
  %41 = fadd double %35, %40
  %42 = fsub double %41, %35
  %43 = fsub double %40, %42
  %44 = fmul double %41, %34
  %45 = fsub double -0.000000e+00, %44
  %46 = tail call double @llvm.fma.f64(double %41, double %34, double %45) #47
  %47 = tail call double @llvm.fma.f64(double %43, double %34, double %46) #47
  %48 = fadd double %44, %47
  %49 = fsub double %48, %44
  %50 = fsub double %47, %49
  %51 = fadd double %23, %48
  %52 = fsub double %51, %23
  %53 = fsub double %48, %52
  %54 = fadd double %25, %50
  %55 = fadd double %53, %54
  %56 = fadd double %51, %55
  %57 = fsub double %56, %51
  %58 = fsub double %55, %57
  %59 = fadd double %56, 1.000000e+00
  %60 = fadd double %59, -1.000000e+00
  %61 = fsub double %56, %60
  %62 = fadd double %58, %61
  %63 = fadd double %59, %62
  %64 = fsub double %63, %59
  %65 = fsub double %62, %64
  %66 = fptosi double %4 to i32
  %67 = tail call double @llvm.amdgcn.ldexp.f64(double %63, i32 %66) #47
  %68 = tail call double @llvm.amdgcn.ldexp.f64(double %65, i32 %66) #47
  %69 = insertelement <2 x double> undef, double %68, i32 0
  %70 = insertelement <2 x double> %69, double %67, i32 1
  ret <2 x double> %70
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_cospi_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  %5 = tail call [2 x i32] @__ocmlpriv_trigpired_f32(float %4) #21
  %6 = extractvalue [2 x i32] %5, 0
  %7 = extractvalue [2 x i32] %5, 1
  %8 = bitcast i32 %6 to float
  %9 = tail call [2 x i32] @__ocmlpriv_sincospired_f32(float %8) #21
  %10 = extractvalue [2 x i32] %9, 0
  %11 = extractvalue [2 x i32] %9, 1
  %12 = bitcast i32 %10 to float
  %13 = fsub float -0.000000e+00, %12
  %14 = and i32 %7, 1
  %15 = icmp eq i32 %14, 0
  %16 = bitcast float %13 to i32
  %17 = select i1 %15, i32 %11, i32 %16
  %18 = icmp sgt i32 %7, 1
  %19 = select i1 %18, i32 -2147483648, i32 0
  %20 = xor i32 %17, %19
  %21 = bitcast i32 %20 to float
  %22 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %23 = icmp eq i8 %22, 0
  %24 = icmp ugt i32 %3, 2139095039
  %25 = and i1 %24, %23
  %26 = select i1 %25, float 0x7FF8000000000000, float %21
  ret float %26
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_sincospired_f32(float) local_unnamed_addr #28 {
  %2 = fmul float %0, %0
  %3 = tail call float @__ocml_fmuladd_f32(float %2, float 0x3FCEB54820000000, float 0xBFE3E497C0000000) #21
  %4 = tail call float @__ocml_fmuladd_f32(float %2, float %3, float 0x400468E6C0000000) #21
  %5 = tail call float @__ocml_fmuladd_f32(float %2, float %4, float 0xC014ABC1C0000000) #21
  %6 = fmul float %2, %0
  %7 = fmul float %6, %5
  %8 = tail call float @__ocml_fmuladd_f32(float %0, float 0x400921FB60000000, float %7) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %2, float 0x3FA97CA880000000, float 0x3FCC85D3A0000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %2, float %9, float 0xBFF55A3B40000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %2, float %10, float 0x40103C1A60000000) #21
  %12 = tail call float @__ocml_fmuladd_f32(float %2, float %11, float 0xC013BD3CC0000000) #21
  %13 = tail call float @__ocml_fmuladd_f32(float %2, float %12, float 1.000000e+00) #21
  %14 = bitcast float %13 to i32
  %15 = bitcast float %8 to i32
  %16 = insertvalue [2 x i32] undef, i32 %15, 0
  %17 = insertvalue [2 x i32] %16, i32 %14, 1
  ret [2 x i32] %17
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_remainder_f32(float, float) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  %5 = tail call float @llvm.canonicalize.f32(float %0)
  %6 = tail call float @llvm.canonicalize.f32(float %1)
  %7 = select i1 %4, float %1, float %6
  %8 = select i1 %4, float %0, float %5
  %9 = tail call float @llvm.fabs.f32(float %8)
  %10 = tail call float @llvm.fabs.f32(float %7)
  %11 = fcmp ogt float %9, %10
  br i1 %11, label %12, label %119

; <label>:12:                                     ; preds = %2
  %13 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %9)
  %14 = tail call float @llvm.amdgcn.frexp.mant.f32(float %9)
  %15 = tail call float @llvm.amdgcn.ldexp.f32(float %14, i32 12)
  %16 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %10)
  %17 = add nsw i32 %16, -1
  %18 = tail call float @llvm.amdgcn.frexp.mant.f32(float %10)
  %19 = tail call float @llvm.amdgcn.ldexp.f32(float %18, i32 1)
  %20 = sub i32 %13, %16
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %22 = icmp sgt i32 %20, 12
  %23 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  br i1 %22, label %24, label %63

; <label>:24:                                     ; preds = %12
  %25 = icmp sgt i32 %23, 899
  %26 = bitcast float %19 to i32
  %27 = and i32 %26, -4096
  %28 = bitcast i32 %27 to float
  %29 = fsub float %19, %28
  br label %30

; <label>:30:                                     ; preds = %55, %24
  %31 = phi float [ %15, %24 ], [ %60, %55 ]
  %32 = phi i32 [ %20, %24 ], [ %61, %55 ]
  %33 = fmul float %21, %31
  %34 = tail call float @llvm.rint.f32(float %33)
  br i1 %25, label %36, label %35

; <label>:35:                                     ; preds = %30
  switch i32 %23, label %39 [
    i32 801, label %36
    i32 701, label %36
  ]

; <label>:36:                                     ; preds = %35, %35, %30
  %37 = fsub float -0.000000e+00, %34
  %38 = tail call float @llvm.fma.f32(float %37, float %19, float %31) #47
  br label %55

; <label>:39:                                     ; preds = %35
  %40 = bitcast float %34 to i32
  %41 = and i32 %40, -4096
  %42 = bitcast i32 %41 to float
  %43 = fsub float %34, %42
  %44 = fmul float %19, %34
  %45 = fsub float -0.000000e+00, %44
  %46 = tail call float @__ocml_fmuladd_f32(float %42, float %28, float %45) #21
  %47 = tail call float @__ocml_fmuladd_f32(float %42, float %29, float %46) #21
  %48 = tail call float @__ocml_fmuladd_f32(float %43, float %28, float %47) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %43, float %29, float %48) #21
  %50 = fsub float %31, %44
  %51 = fsub float %31, %50
  %52 = fsub float %51, %44
  %53 = fsub float %52, %49
  %54 = fadd float %50, %53
  br label %55

; <label>:55:                                     ; preds = %39, %36
  %56 = phi float [ %38, %36 ], [ %54, %39 ]
  %57 = fcmp olt float %56, 0.000000e+00
  %58 = fadd float %19, %56
  %59 = select i1 %57, float %58, float %56
  %60 = tail call float @llvm.amdgcn.ldexp.f32(float %59, i32 12)
  %61 = add nsw i32 %32, -12
  %62 = icmp sgt i32 %61, 12
  br i1 %62, label %30, label %63

; <label>:63:                                     ; preds = %55, %12
  %64 = phi i32 [ %20, %12 ], [ %61, %55 ]
  %65 = phi float [ %15, %12 ], [ %60, %55 ]
  %66 = add nsw i32 %64, -11
  %67 = tail call float @llvm.amdgcn.ldexp.f32(float %65, i32 %66)
  %68 = fmul float %21, %67
  %69 = tail call float @llvm.rint.f32(float %68)
  %70 = icmp sgt i32 %23, 899
  br i1 %70, label %72, label %71

; <label>:71:                                     ; preds = %63
  switch i32 %23, label %75 [
    i32 801, label %72
    i32 701, label %72
  ]

; <label>:72:                                     ; preds = %71, %71, %63
  %73 = fsub float -0.000000e+00, %69
  %74 = tail call float @llvm.fma.f32(float %73, float %19, float %67) #47
  br label %95

; <label>:75:                                     ; preds = %71
  %76 = bitcast float %69 to i32
  %77 = and i32 %76, -4096
  %78 = bitcast i32 %77 to float
  %79 = fsub float %69, %78
  %80 = bitcast float %19 to i32
  %81 = and i32 %80, -4096
  %82 = bitcast i32 %81 to float
  %83 = fsub float %19, %82
  %84 = fmul float %19, %69
  %85 = fsub float -0.000000e+00, %84
  %86 = tail call float @__ocml_fmuladd_f32(float %78, float %82, float %85) #21
  %87 = tail call float @__ocml_fmuladd_f32(float %78, float %83, float %86) #21
  %88 = tail call float @__ocml_fmuladd_f32(float %79, float %82, float %87) #21
  %89 = tail call float @__ocml_fmuladd_f32(float %79, float %83, float %88) #21
  %90 = fsub float %67, %84
  %91 = fsub float %67, %90
  %92 = fsub float %91, %84
  %93 = fsub float %92, %89
  %94 = fadd float %90, %93
  br label %95

; <label>:95:                                     ; preds = %75, %72
  %96 = phi float [ %74, %72 ], [ %94, %75 ]
  %97 = fcmp olt float %96, 0.000000e+00
  %98 = zext i1 %97 to i32
  %99 = fadd float %19, %96
  %100 = select i1 %97, float %99, float %96
  %101 = fptosi float %69 to i32
  %102 = sub nsw i32 %101, %98
  %103 = fmul float %100, 2.000000e+00
  %104 = fcmp ogt float %103, %19
  %105 = zext i1 %104 to i32
  %106 = fcmp oeq float %103, %19
  %107 = zext i1 %106 to i32
  %108 = and i32 %102, %107
  %109 = or i32 %108, %105
  %110 = icmp eq i32 %109, 0
  %111 = select i1 %110, float 0.000000e+00, float %19
  %112 = fsub float %100, %111
  %113 = tail call float @llvm.amdgcn.ldexp.f32(float %112, i32 %17)
  %114 = bitcast float %8 to i32
  %115 = and i32 %114, -2147483648
  %116 = bitcast float %113 to i32
  %117 = xor i32 %115, %116
  %118 = bitcast i32 %117 to float
  br label %139

; <label>:119:                                    ; preds = %2
  %120 = fcmp olt float %10, 0x47E0000000000000
  %121 = fmul float %9, 2.000000e+00
  %122 = fcmp ogt float %121, %10
  %123 = and i1 %120, %122
  %124 = fmul float %10, 5.000000e-01
  %125 = fcmp ogt float %9, %124
  %126 = or i1 %125, %123
  %127 = bitcast float %8 to i32
  %128 = bitcast float %7 to i32
  %129 = xor i32 %127, %128
  %130 = ashr i32 %129, 30
  %131 = or i32 %130, 1
  %132 = sitofp i32 %131 to float
  %133 = fsub float -0.000000e+00, %132
  %134 = tail call float @__ocml_fmuladd_f32(float %7, float %133, float %8) #21
  %135 = select i1 %126, float %134, float %8
  %136 = fcmp oeq float %9, %10
  %137 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %8)
  %138 = select i1 %136, float %137, float %135
  br label %139

; <label>:139:                                    ; preds = %119, %95
  %140 = phi float [ %118, %95 ], [ %138, %119 ]
  %141 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %142 = icmp eq i8 %141, 0
  %143 = fcmp oeq float %7, 0.000000e+00
  %144 = fcmp uno float %7, 0.000000e+00
  %145 = tail call i1 @llvm.amdgcn.class.f32(float %8, i32 519)
  %146 = or i1 %144, %145
  %147 = or i1 %143, %146
  %148 = and i1 %147, %142
  %149 = select i1 %148, float 0x7FF8000000000000, float %140
  ret float %149
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.frexp.exp.i32.f32(float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.frexp.mant.f32(float) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_atan_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fcmp ogt half %2, 0xH3C00
  %4 = tail call half @llvm.amdgcn.rcp.f16(half %2) #21
  %5 = select i1 %3, half %4, half %2
  %6 = tail call half @__ocmlpriv_atanred_f16(half %5) #21
  %7 = fsub half 0xH8000, %6
  %8 = tail call half @llvm.fma.f16(half 0xH3BAA, half 0xH3E8F, half %7) #21
  %9 = select i1 %3, half %8, half %6
  %10 = tail call half @llvm.copysign.f16(half %9, half %0) #21
  ret half %10
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.amdgcn.rcp.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocmlpriv_atanred_f16(half) local_unnamed_addr #28 {
  %2 = fmul half %0, %0
  %3 = tail call half @llvm.fma.f16(half %2, half 0xHA9E2, half 0xH3113) #21
  %4 = tail call half @llvm.fma.f16(half %2, half %3, half 0xHB53D) #21
  %5 = fmul half %2, %4
  %6 = tail call half @llvm.fma.f16(half %0, half %5, half %0) #21
  ret half %6
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_tan_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %1 @__ocmlpriv_trigred_f64(double %2) #21
  %4 = extractvalue %1 %3, 0
  %5 = extractvalue %1 %3, 1
  %6 = extractvalue %1 %3, 2
  %7 = and i32 %6, 1
  %8 = tail call double @__ocmlpriv_tanred2_f64(double %5, double %4, i32 %7) #21
  %9 = bitcast double %8 to <2 x i32>
  %10 = bitcast double %0 to <2 x i32>
  %11 = extractelement <2 x i32> %10, i64 1
  %12 = and i32 %11, -2147483648
  %13 = extractelement <2 x i32> %9, i64 1
  %14 = xor i32 %13, %12
  %15 = insertelement <2 x i32> %9, i32 %14, i64 1
  %16 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %17 = icmp eq i8 %16, 0
  %18 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %19 = and i1 %18, %17
  %20 = select i1 %19, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %15
  %21 = bitcast <2 x i32> %20 to double
  ret double %21
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocmlpriv_tanred2_f64(double, double, i32) local_unnamed_addr #29 {
  %4 = fcmp ogt double %0, 6.800000e-01
  %5 = fcmp olt double %0, -6.800000e-01
  %6 = select i1 %4, double 1.000000e+00, double 0.000000e+00
  %7 = select i1 %5, double -1.000000e+00, double %6
  %8 = fsub double -0.000000e+00, %7
  %9 = tail call double @llvm.fma.f64(double %8, double %0, double 0x3FE921FB54442D18)
  %10 = tail call double @llvm.fma.f64(double %8, double %1, double 0x3C81A62633145C06)
  %11 = fadd double %9, %10
  %12 = or i1 %4, %5
  %13 = select i1 %12, double %11, double %0
  %14 = select i1 %12, double 0.000000e+00, double %1
  %15 = fmul double %14, %13
  %16 = fmul double %13, %13
  %17 = tail call double @llvm.fma.f64(double %15, double 2.000000e+00, double %16)
  %18 = tail call double @llvm.fma.f64(double %17, double 0x3F2D5DAF289C385A, double 0xBF977C24C7569ABB)
  %19 = tail call double @llvm.fma.f64(double %17, double %18, double 0x3FD7D50F6638564A)
  %20 = tail call double @llvm.fma.f64(double %17, double 0xBF2E7517EF6D98F8, double 0x3F9AB0F4F80A0ACF)
  %21 = tail call double @llvm.fma.f64(double %17, double %20, double 0xBFE08046499EB90F)
  %22 = tail call double @llvm.fma.f64(double %17, double %21, double 0x3FF1DFCB8CAA40B8)
  %23 = tail call double @llvm.amdgcn.rcp.f64(double %22)
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double 1.000000e+00)
  %26 = tail call double @llvm.fma.f64(double %25, double %23, double %23)
  %27 = tail call double @llvm.fma.f64(double %24, double %26, double 1.000000e+00)
  %28 = tail call double @llvm.fma.f64(double %27, double %26, double %26)
  %29 = fmul double %19, %28
  %30 = tail call double @llvm.fma.f64(double %24, double %29, double %19)
  %31 = tail call double @llvm.fma.f64(double %30, double %28, double %29)
  %32 = fmul double %13, %17
  %33 = tail call double @llvm.fma.f64(double %31, double %32, double %14)
  %34 = fadd double %13, %33
  %35 = icmp ne i32 %2, 0
  br i1 %12, label %36, label %64

; <label>:36:                                     ; preds = %3
  %37 = fmul double %34, 2.000000e+00
  br i1 %35, label %38, label %51

; <label>:38:                                     ; preds = %36
  %39 = fadd double %34, -1.000000e+00
  %40 = tail call double @llvm.amdgcn.rcp.f64(double %39)
  %41 = fsub double -0.000000e+00, %39
  %42 = tail call double @llvm.fma.f64(double %41, double %40, double 1.000000e+00)
  %43 = tail call double @llvm.fma.f64(double %42, double %40, double %40)
  %44 = tail call double @llvm.fma.f64(double %41, double %43, double 1.000000e+00)
  %45 = tail call double @llvm.fma.f64(double %44, double %43, double %43)
  %46 = fmul double %37, %45
  %47 = tail call double @llvm.fma.f64(double %41, double %46, double %37)
  %48 = tail call double @llvm.fma.f64(double %47, double %45, double %46)
  %49 = fadd double %48, -1.000000e+00
  %50 = fmul double %7, %49
  br label %84

; <label>:51:                                     ; preds = %36
  %52 = fadd double %34, 1.000000e+00
  %53 = tail call double @llvm.amdgcn.rcp.f64(double %52)
  %54 = fsub double -0.000000e+00, %52
  %55 = tail call double @llvm.fma.f64(double %54, double %53, double 1.000000e+00)
  %56 = tail call double @llvm.fma.f64(double %55, double %53, double %53)
  %57 = tail call double @llvm.fma.f64(double %54, double %56, double 1.000000e+00)
  %58 = tail call double @llvm.fma.f64(double %57, double %56, double %56)
  %59 = fmul double %37, %58
  %60 = tail call double @llvm.fma.f64(double %54, double %59, double %37)
  %61 = tail call double @llvm.fma.f64(double %60, double %58, double %59)
  %62 = fsub double 1.000000e+00, %61
  %63 = fmul double %7, %62
  br label %84

; <label>:64:                                     ; preds = %3
  br i1 %35, label %65, label %84

; <label>:65:                                     ; preds = %64
  %66 = bitcast double %34 to i64
  %67 = and i64 %66, -4294967296
  %68 = bitcast i64 %67 to double
  %69 = fsub double %68, %13
  %70 = fsub double %33, %69
  %71 = tail call double @llvm.amdgcn.rcp.f64(double %34)
  %72 = fsub double -0.000000e+00, %34
  %73 = tail call double @llvm.fma.f64(double %72, double %71, double 1.000000e+00)
  %74 = tail call double @llvm.fma.f64(double %73, double %71, double %71)
  %75 = tail call double @llvm.fma.f64(double %72, double %74, double 1.000000e+00)
  %76 = tail call double @llvm.fma.f64(double %75, double %74, double %74)
  %77 = fsub double -0.000000e+00, %76
  %78 = bitcast double %77 to i64
  %79 = and i64 %78, -4294967296
  %80 = bitcast i64 %79 to double
  %81 = tail call double @llvm.fma.f64(double %80, double %68, double 1.000000e+00)
  %82 = tail call double @llvm.fma.f64(double %80, double %70, double %81)
  %83 = tail call double @llvm.fma.f64(double %82, double %77, double %80)
  br label %84

; <label>:84:                                     ; preds = %65, %64, %51, %38
  %85 = phi double [ %50, %38 ], [ %63, %51 ], [ %83, %65 ], [ %34, %64 ]
  ret double %85
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_sinh_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fadd double %2, 0xBFE62E42FEFA39EF
  %4 = fsub double %3, %2
  %5 = fsub double %4, %3
  %6 = fadd double %2, %5
  %7 = fadd double %4, 0x3FE62E42FEFA39EF
  %8 = fsub double %6, %7
  %9 = fadd double %8, 0xBC7ABC9E3B39803F
  %10 = fadd double %3, %9
  %11 = fsub double %10, %3
  %12 = fsub double %9, %11
  %13 = insertelement <2 x double> undef, double %12, i32 0
  %14 = insertelement <2 x double> %13, double %10, i32 1
  %15 = tail call <2 x double> @__ocmlpriv_epexpep_f64(<2 x double> %14) #21
  %16 = extractelement <2 x double> %15, i64 1
  %17 = tail call double @llvm.amdgcn.rcp.f64(double %16) #47
  %18 = fsub double -0.000000e+00, %16
  %19 = tail call double @llvm.fma.f64(double %18, double %17, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %17, double %17) #47
  %21 = tail call double @llvm.fma.f64(double %18, double %20, double 1.000000e+00) #47
  %22 = tail call double @llvm.fma.f64(double %21, double %20, double %20) #47
  %23 = fmul double %16, %22
  %24 = fsub double -0.000000e+00, %23
  %25 = tail call double @llvm.fma.f64(double %22, double %16, double %24) #47
  %26 = extractelement <2 x double> %15, i64 0
  %27 = tail call double @llvm.fma.f64(double %22, double %26, double %25) #47
  %28 = fadd double %23, %27
  %29 = fsub double %28, %23
  %30 = fsub double %27, %29
  %31 = fsub double 1.000000e+00, %28
  %32 = fsub double 1.000000e+00, %31
  %33 = fsub double %32, %28
  %34 = fsub double %33, %30
  %35 = fadd double %31, %34
  %36 = fsub double %35, %31
  %37 = fsub double %34, %36
  %38 = fmul double %22, %35
  %39 = fmul double %16, %38
  %40 = fsub double -0.000000e+00, %39
  %41 = tail call double @llvm.fma.f64(double %38, double %16, double %40) #47
  %42 = tail call double @llvm.fma.f64(double %38, double %26, double %41) #47
  %43 = fadd double %39, %42
  %44 = fsub double %43, %39
  %45 = fsub double %42, %44
  %46 = fsub double %35, %43
  %47 = fsub double %35, %46
  %48 = fsub double %47, %43
  %49 = fadd double %37, %48
  %50 = fsub double %49, %45
  %51 = fadd double %46, %50
  %52 = fmul double %22, %51
  %53 = fadd double %22, %38
  %54 = fsub double %53, %22
  %55 = fsub double %38, %54
  %56 = fadd double %55, %52
  %57 = fadd double %53, %56
  %58 = fsub double %57, %53
  %59 = fsub double %56, %58
  %60 = tail call double @llvm.amdgcn.ldexp.f64(double %57, i32 -2) #47
  %61 = tail call double @llvm.amdgcn.ldexp.f64(double %59, i32 -2) #47
  %62 = fsub double %16, %60
  %63 = fsub double %16, %62
  %64 = fsub double %63, %60
  %65 = fadd double %26, %64
  %66 = fsub double %65, %61
  %67 = fadd double %62, %66
  %68 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %69 = icmp eq i8 %68, 0
  %70 = fcmp oge double %2, 0x408633CE8FB9F87E
  %71 = and i1 %70, %69
  %72 = select i1 %71, double 0x7FF0000000000000, double %67
  %73 = fcmp olt double %2, 0x3E40000000000000
  %74 = select i1 %73, double %2, double %72
  %75 = tail call double @llvm.copysign.f64(double %74, double %0)
  ret double %75
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_erf_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp olt double %2, 1.000000e+00
  br i1 %3, label %4, label %18

; <label>:4:                                      ; preds = %1
  %5 = fmul double %0, %0
  %6 = tail call double @llvm.fma.f64(double %5, double 0xBE0ABAE491C443A9, double 0x3E4D71B0F1B10A64)
  %7 = tail call double @llvm.fma.f64(double %5, double %6, double 0xBE85C0726F04DCFB)
  %8 = tail call double @llvm.fma.f64(double %5, double %7, double 0x3EBB97FD3D992938)
  %9 = tail call double @llvm.fma.f64(double %5, double %8, double 0xBEEF4CA4D6F3E30F)
  %10 = tail call double @llvm.fma.f64(double %5, double %9, double 0x3F1F9A2BAA8FEDD2)
  %11 = tail call double @llvm.fma.f64(double %5, double %10, double 0xBF4C02DB03DD71D4)
  %12 = tail call double @llvm.fma.f64(double %5, double %11, double 0x3F7565BCCF92B2F9)
  %13 = tail call double @llvm.fma.f64(double %5, double %12, double 0xBF9B82CE311FA93E)
  %14 = tail call double @llvm.fma.f64(double %5, double %13, double 0x3FBCE2F21A040D16)
  %15 = tail call double @llvm.fma.f64(double %5, double %14, double 0xBFD812746B0379BD)
  %16 = tail call double @llvm.fma.f64(double %5, double %15, double 0x3FF20DD750429B6D)
  %17 = fmul double %2, %16
  br label %95

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt double %2, 1.750000e+00
  br i1 %19, label %20, label %36

; <label>:20:                                     ; preds = %18
  %21 = fadd double %2, -1.000000e+00
  %22 = tail call double @llvm.fma.f64(double %21, double 0xBEE6BCF230661065, double 0x3F19753B107BF6D4)
  %23 = tail call double @llvm.fma.f64(double %21, double %22, double 0xBF3412A8FBBF6A41)
  %24 = tail call double @llvm.fma.f64(double %21, double %23, double 0x3F27E91ED5C78D47)
  %25 = tail call double @llvm.fma.f64(double %21, double %24, double 0x3F5311624DD4ECF6)
  %26 = tail call double @llvm.fma.f64(double %21, double %25, double 0xBF5E690FC0CFDF11)
  %27 = tail call double @llvm.fma.f64(double %21, double %26, double 0xBF739B63F9DE527C)
  %28 = tail call double @llvm.fma.f64(double %21, double %27, double 0x3F8F0AB1E1D99AAB)
  %29 = tail call double @llvm.fma.f64(double %21, double %28, double 0x3F72E3EAE226D671)
  %30 = tail call double @llvm.fma.f64(double %21, double %29, double 0xBFB1B613DCDCAE03)
  %31 = tail call double @llvm.fma.f64(double %21, double %30, double 0x3FB1B614A07894F2)
  %32 = tail call double @llvm.fma.f64(double %21, double %31, double 0x3FC1B614B157FB65)
  %33 = tail call double @llvm.fma.f64(double %21, double %32, double 0xBFDA911F0970F238)
  %34 = tail call double @llvm.fma.f64(double %21, double %33, double 0x3FDA911F096FBF25)
  %35 = tail call double @llvm.fma.f64(double %21, double %34, double 0x3FEAF767A741088A)
  br label %95

; <label>:36:                                     ; preds = %18
  %37 = fcmp olt double %2, 2.500000e+00
  br i1 %37, label %38, label %54

; <label>:38:                                     ; preds = %36
  %39 = fadd double %2, -1.750000e+00
  %40 = tail call double @llvm.fma.f64(double %39, double 0x3ED1F15B50F14138, double 0xBF0045A3B7A40CF2)
  %41 = tail call double @llvm.fma.f64(double %39, double %40, double 0x3F156639C276284F)
  %42 = tail call double @llvm.fma.f64(double %39, double %41, double 0xBEEDAFC588FF3AE7)
  %43 = tail call double @llvm.fma.f64(double %39, double %42, double 0xBF3CBEE01A4E2823)
  %44 = tail call double @llvm.fma.f64(double %39, double %43, double 0x3F4D416A49B45130)
  %45 = tail call double @llvm.fma.f64(double %39, double %44, double 0x3F47EEB945B26B23)
  %46 = tail call double @llvm.fma.f64(double %39, double %45, double 0xBF78D11B6EDEE21F)
  %47 = tail call double @llvm.fma.f64(double %39, double %46, double 0x3F825B37E45FE07C)
  %48 = tail call double @llvm.fma.f64(double %39, double %47, double 0x3F7B22258EF6E0B9)
  %49 = tail call double @llvm.fma.f64(double %39, double %48, double 0xBFA8A0DA54B6EC66)
  %50 = tail call double @llvm.fma.f64(double %39, double %49, double 0x3FB7148C3D5D1AD0)
  %51 = tail call double @llvm.fma.f64(double %39, double %50, double 0xBFB7A4A8A2BDFE71)
  %52 = tail call double @llvm.fma.f64(double %39, double %51, double 0x3FAB05530322115A)
  %53 = tail call double @llvm.fma.f64(double %39, double %52, double 0x3FEF92D077F8D56D)
  br label %95

; <label>:54:                                     ; preds = %36
  %55 = fcmp olt double %2, 4.000000e+00
  br i1 %55, label %56, label %74

; <label>:56:                                     ; preds = %54
  %57 = fadd double %2, -2.500000e+00
  %58 = tail call double @llvm.fma.f64(double %57, double 0xBDF708F6D0E65C33, double 0x3E3DBD0618847C60)
  %59 = tail call double @llvm.fma.f64(double %57, double %58, double 0xBE5C3001CF83CD69)
  %60 = tail call double @llvm.fma.f64(double %57, double %59, double 0xBE94DCA746DFE625)
  %61 = tail call double @llvm.fma.f64(double %57, double %60, double 0x3EBA8E79A95D6F67)
  %62 = tail call double @llvm.fma.f64(double %57, double %61, double 0x3EF8D8D7711FC864)
  %63 = tail call double @llvm.fma.f64(double %57, double %62, double 0xBF299FE2D9D9B69B)
  %64 = tail call double @llvm.fma.f64(double %57, double %63, double 0xBF3B3B1F1E28669C)
  %65 = tail call double @llvm.fma.f64(double %57, double %64, double 0x3F801D3D83753FB1)
  %66 = tail call double @llvm.fma.f64(double %57, double %65, double 0xBF5E842CF8341E6A)
  %67 = tail call double @llvm.fma.f64(double %57, double %66, double 0xBFCA49BB4AB1D7D9)
  %68 = tail call double @llvm.fma.f64(double %57, double %67, double 0x3FE3A50E1B16E339)
  %69 = fmul double %68, %68
  %70 = fmul double %69, %69
  %71 = fmul double %70, %70
  %72 = fsub double -0.000000e+00, %71
  %73 = tail call double @llvm.fma.f64(double %72, double %71, double 1.000000e+00)
  br label %95

; <label>:74:                                     ; preds = %54
  %75 = fcmp olt double %2, 5.937500e+00
  br i1 %75, label %76, label %92

; <label>:76:                                     ; preds = %74
  %77 = fadd double %2, -4.000000e+00
  %78 = tail call double @llvm.fma.f64(double %77, double 0x3E55B22D2CD54932, double 0xBE73E056A1040A29)
  %79 = tail call double @llvm.fma.f64(double %77, double %78, double 0xBEC2D8F6BF8AF04A)
  %80 = tail call double @llvm.fma.f64(double %77, double %79, double 0x3EF4C20D337A4541)
  %81 = tail call double @llvm.fma.f64(double %77, double %80, double 0x3EFD9D0971C8F96D)
  %82 = tail call double @llvm.fma.f64(double %77, double %81, double 0xBF50A33E01ADB0DD)
  %83 = tail call double @llvm.fma.f64(double %77, double %82, double 0x3F663716FB40EAB9)
  %84 = tail call double @llvm.fma.f64(double %77, double %83, double 0x3F97D6F6BBCFC7E0)
  %85 = tail call double @llvm.fma.f64(double %77, double %84, double 0xBFC5687476FEEC74)
  %86 = tail call double @llvm.fma.f64(double %77, double %85, double 0x3FD4CB2BACD30820)
  %87 = fmul double %86, %86
  %88 = fmul double %87, %87
  %89 = fmul double %88, %88
  %90 = fsub double -0.000000e+00, %89
  %91 = tail call double @llvm.fma.f64(double %90, double %89, double 1.000000e+00)
  br label %95

; <label>:92:                                     ; preds = %74
  %93 = fcmp uno double %0, 0.000000e+00
  %94 = select i1 %93, double %0, double 1.000000e+00
  br label %95

; <label>:95:                                     ; preds = %92, %76, %56, %38, %20, %4
  %96 = phi double [ %17, %4 ], [ %35, %20 ], [ %53, %38 ], [ %73, %56 ], [ %91, %76 ], [ %94, %92 ]
  %97 = tail call double @llvm.copysign.f64(double %96, double %0)
  ret double %97
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_fmax_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.canonicalize.f64(double %0)
  %4 = tail call double @llvm.canonicalize.f64(double %1)
  %5 = tail call double @llvm.maxnum.f64(double %3, double %4)
  ret double %5
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.canonicalize.f64(double) #25

; Function Attrs: nounwind readnone speculatable
declare double @llvm.maxnum.f64(double, double) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_atan2_f64(double, double) local_unnamed_addr #28 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call double @llvm.fabs.f64(double %1)
  %5 = tail call double @llvm.maxnum.f64(double %4, double %3)
  %6 = tail call double @llvm.minnum.f64(double %4, double %3)
  %7 = fdiv double %6, %5
  %8 = tail call double @__ocmlpriv_atanred_f64(double %7) #21
  %9 = bitcast double %1 to <2 x i32>
  %10 = extractelement <2 x i32> %9, i64 1
  %11 = icmp slt i32 %10, 0
  %12 = fsub double 0x3FF921FB54442D18, %8
  %13 = fcmp olt double %4, %3
  %14 = select i1 %13, double %12, double %8
  %15 = fsub double 0x400921FB54442D18, %14
  %16 = select i1 %11, double %15, double %14
  %17 = select i1 %11, double 0x400921FB54442D18, double 0.000000e+00
  %18 = fcmp oeq double %0, 0.000000e+00
  %19 = select i1 %18, double %17, double %16
  %20 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %31

; <label>:22:                                     ; preds = %2
  %23 = select i1 %11, double 0x4002D97C7F3321D2, double 0x3FE921FB54442D18
  %24 = tail call double @llvm.copysign.f64(double %23, double %0)
  %25 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 516)
  %26 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %27 = and i1 %26, %25
  %28 = select i1 %27, double %24, double %19
  %29 = fcmp uno double %1, %0
  %30 = select i1 %29, double 0x7FF8000000000000, double %28
  br label %31

; <label>:31:                                     ; preds = %22, %2
  %32 = phi double [ %19, %2 ], [ %30, %22 ]
  %33 = tail call double @llvm.copysign.f64(double %32, double %0)
  ret double %33
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.minnum.f64(double, double) #25

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected half @__ocml_remquo_f16(half, half, i32 addrspace(5)* nocapture) local_unnamed_addr #30 {
  %4 = tail call half @llvm.fabs.f16(half %0) #21
  %5 = fpext half %4 to float
  %6 = tail call half @llvm.fabs.f16(half %1) #21
  %7 = fpext half %6 to float
  %8 = fcmp ogt half %4, %6
  br i1 %8, label %9, label %84

; <label>:9:                                      ; preds = %3
  %10 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %5)
  %11 = tail call float @llvm.amdgcn.frexp.mant.f32(float %5)
  %12 = tail call float @llvm.amdgcn.ldexp.f32(float %11, i32 11)
  %13 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %7)
  %14 = add nsw i32 %13, -1
  %15 = tail call float @llvm.amdgcn.frexp.mant.f32(float %7)
  %16 = tail call float @llvm.amdgcn.ldexp.f32(float %15, i32 1)
  %17 = sub i32 %10, %13
  %18 = tail call float @llvm.amdgcn.rcp.f32(float %16)
  %19 = icmp sgt i32 %17, 11
  br i1 %19, label %20, label %39

; <label>:20:                                     ; preds = %20, %9
  %21 = phi float [ %36, %20 ], [ %12, %9 ]
  %22 = phi i32 [ %37, %20 ], [ %17, %9 ]
  %23 = phi i32 [ %35, %20 ], [ 0, %9 ]
  %24 = fmul float %18, %21
  %25 = tail call float @llvm.rint.f32(float %24)
  %26 = fsub float -0.000000e+00, %25
  %27 = tail call float @__ocml_fmuladd_f32(float %26, float %16, float %21) #21
  %28 = fcmp olt float %27, 0.000000e+00
  %29 = zext i1 %28 to i32
  %30 = fadd float %16, %27
  %31 = select i1 %28, float %30, float %27
  %32 = fptosi float %25 to i32
  %33 = sub nsw i32 %32, %29
  %34 = shl i32 %23, 11
  %35 = or i32 %33, %34
  %36 = tail call float @llvm.amdgcn.ldexp.f32(float %31, i32 11)
  %37 = add nsw i32 %22, -11
  %38 = icmp sgt i32 %37, 11
  br i1 %38, label %20, label %39

; <label>:39:                                     ; preds = %20, %9
  %40 = phi i32 [ 0, %9 ], [ %35, %20 ]
  %41 = phi i32 [ %17, %9 ], [ %37, %20 ]
  %42 = phi float [ %12, %9 ], [ %36, %20 ]
  %43 = add nsw i32 %41, -10
  %44 = tail call float @llvm.amdgcn.ldexp.f32(float %42, i32 %43)
  %45 = fmul float %18, %44
  %46 = tail call float @llvm.rint.f32(float %45)
  %47 = fsub float -0.000000e+00, %46
  %48 = tail call float @__ocml_fmuladd_f32(float %47, float %16, float %44) #21
  %49 = fcmp olt float %48, 0.000000e+00
  %50 = zext i1 %49 to i32
  %51 = fadd float %16, %48
  %52 = select i1 %49, float %51, float %48
  %53 = fptosi float %46 to i32
  %54 = sub nsw i32 %53, %50
  %55 = add nsw i32 %41, 1
  %56 = and i32 %55, 31
  %57 = shl i32 %40, %56
  %58 = or i32 %54, %57
  %59 = fmul float %52, 2.000000e+00
  %60 = fcmp ogt float %59, %16
  %61 = zext i1 %60 to i32
  %62 = fcmp oeq float %59, %16
  %63 = zext i1 %62 to i32
  %64 = and i32 %58, %63
  %65 = or i32 %64, %61
  %66 = icmp eq i32 %65, 0
  %67 = select i1 %66, float 0.000000e+00, float %16
  %68 = fsub float %52, %67
  %69 = add nsw i32 %65, %58
  %70 = bitcast half %0 to i16
  %71 = bitcast half %1 to i16
  %72 = xor i16 %71, %70
  %73 = ashr i16 %72, 15
  %74 = sext i16 %73 to i32
  %75 = and i32 %69, 127
  %76 = xor i32 %75, %74
  %77 = sub nsw i32 %76, %74
  %78 = tail call float @llvm.amdgcn.ldexp.f32(float %68, i32 %14)
  %79 = fptrunc float %78 to half
  %80 = bitcast half %79 to i16
  %81 = and i16 %70, -32768
  %82 = xor i16 %81, %80
  %83 = bitcast i16 %82 to half
  br label %101

; <label>:84:                                     ; preds = %3
  %85 = fmul float %7, 5.000000e-01
  %86 = fcmp olt float %85, %5
  %87 = bitcast half %0 to i16
  %88 = bitcast half %1 to i16
  %89 = xor i16 %88, %87
  %90 = icmp sgt i16 %89, -1
  %91 = select i1 %90, i32 1, i32 -1
  %92 = sitofp i32 %91 to half
  %93 = fsub half 0xH8000, %92
  %94 = tail call half @llvm.fma.f16(half %1, half %93, half %0) #21
  %95 = fcmp oeq half %4, %6
  %96 = tail call half @llvm.copysign.f16(half 0xH0000, half %0) #21
  %97 = select i1 %86, half %94, half %0
  %98 = select i1 %95, half %96, half %97
  %99 = or i1 %95, %86
  %100 = select i1 %99, i32 %91, i32 0
  br label %101

; <label>:101:                                    ; preds = %84, %39
  %102 = phi i32 [ %77, %39 ], [ %100, %84 ]
  %103 = phi half [ %83, %39 ], [ %98, %84 ]
  %104 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %105 = icmp eq i8 %104, 0
  %106 = fcmp oeq half %1, 0xH0000
  %107 = fcmp uno half %1, 0xH0000
  %108 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %109 = or i1 %108, %107
  %110 = or i1 %106, %109
  %111 = and i1 %110, %105
  %112 = select i1 %111, i32 0, i32 %102
  store i32 %112, i32 addrspace(5)* %2, align 4, !tbaa !120
  %113 = select i1 %111, half 0xH7E00, half %103
  ret half %113
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected half @__ocml_nextafter_f16(half, half) local_unnamed_addr #31 {
  %3 = bitcast half %0 to i16
  %4 = and i16 %3, 32767
  %5 = sub i16 -32768, %3
  %6 = icmp slt i16 %3, 0
  %7 = select i1 %6, i16 %5, i16 %3
  %8 = bitcast half %1 to i16
  %9 = and i16 %8, 32767
  %10 = sub i16 -32768, %8
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %11, i16 %10, i16 %8
  %13 = icmp slt i16 %7, %12
  %14 = select i1 %13, i16 1, i16 -1
  %15 = add i16 %14, %7
  %16 = sub i16 -32768, %15
  %17 = icmp slt i16 %15, 0
  %18 = select i1 %17, i16 %16, i16 %15
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = icmp ugt i16 %4, 31744
  %22 = select i1 %21, i16 %3, i16 %18
  %23 = icmp ugt i16 %9, 31744
  %24 = select i1 %23, i16 %8, i16 %22
  %25 = select i1 %20, i16 %24, i16 %18
  %26 = or i16 %9, %4
  %27 = icmp eq i16 %26, 0
  %28 = icmp eq i16 %3, %8
  %29 = or i1 %28, %27
  %30 = select i1 %29, i16 %8, i16 %25
  %31 = bitcast i16 %30 to half
  ret half %31
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isinf_f32(float) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind writeonly
define linkonce_odr protected float @__ocml_modf_f32(float, float addrspace(5)* nocapture) local_unnamed_addr #32 {
  %3 = tail call float @llvm.trunc.f32(float %0)
  %4 = fsub float %0, %3
  %5 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %6 = select i1 %5, float 0.000000e+00, float %4
  store float %3, float addrspace(5)* %1, align 4, !tbaa !126
  %7 = tail call float @llvm.copysign.f32(float %6, float %0)
  ret float %7
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.trunc.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_cbrt_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %2)
  %4 = sitofp i32 %3 to float
  %5 = fmul float %4, 0x3FD5555560000000
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = fptosi float %6 to i32
  %8 = mul nsw i32 %7, -3
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %8)
  %10 = fptrunc double %9 to float
  %11 = tail call float @llvm.log2.f32(float %10)
  %12 = fmul float %11, 0x3FD5555560000000
  %13 = tail call float @llvm.exp2.f32(float %12)
  %14 = fpext float %13 to double
  %15 = fmul double %14, %14
  %16 = fsub double -0.000000e+00, %14
  %17 = tail call double @llvm.fma.f64(double %16, double %15, double %9)
  %18 = fadd double %14, %14
  %19 = tail call double @llvm.fma.f64(double %18, double %15, double %9)
  %20 = tail call double @llvm.amdgcn.rcp.f64(double %19)
  %21 = fsub double -0.000000e+00, %19
  %22 = tail call double @llvm.fma.f64(double %21, double %20, double 1.000000e+00)
  %23 = tail call double @llvm.fma.f64(double %22, double %20, double %20)
  %24 = tail call double @llvm.fma.f64(double %21, double %23, double 1.000000e+00)
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double %23)
  %26 = fmul double %17, %25
  %27 = tail call double @llvm.fma.f64(double %21, double %26, double %17)
  %28 = tail call double @llvm.fma.f64(double %27, double %25, double %26)
  %29 = tail call double @llvm.fma.f64(double %14, double %28, double %14)
  %30 = tail call double @llvm.amdgcn.ldexp.f64(double %29, i32 %7)
  %31 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %32 = icmp eq i8 %31, 0
  %33 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 615)
  %34 = and i1 %33, %32
  %35 = select i1 %34, double %0, double %30
  %36 = tail call double @llvm.copysign.f64(double %35, double %0)
  ret double %36
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocml_isfinite_f16(half) local_unnamed_addr #28 {
  %2 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 504) #21
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_logb_f64(double) local_unnamed_addr #29 {
  %2 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %3 = add nsw i32 %2, -1
  %4 = sitofp i32 %3 to double
  %5 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %6 = icmp eq i8 %5, 0
  %7 = tail call double @llvm.fabs.f64(double %0)
  %8 = tail call i1 @llvm.amdgcn.class.f64(double %7, i32 515)
  %9 = select i1 %8, double %7, double %4
  %10 = fcmp oeq double %0, 0.000000e+00
  %11 = select i1 %10, double 0xFFF0000000000000, double %9
  %12 = select i1 %6, double %11, double %4
  ret double %12
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_lgamma_f16(half) local_unnamed_addr #28 {
  %2 = alloca i32, align 4, addrspace(5)
  %3 = bitcast i32 addrspace(5)* %2 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %3) #47
  %4 = call half @__ocml_lgamma_r_f16(half %0, i32 addrspace(5)* %2) #52
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %3) #47
  ret half %4
}

; Function Attrs: convergent nounwind
define linkonce_odr protected half @__ocml_lgamma_r_f16(half, i32 addrspace(5)*) local_unnamed_addr #26 {
  %3 = fpext half %0 to float
  %4 = tail call float @__ocml_lgamma_r_f32(float %3, i32 addrspace(5)* %1) #52
  %5 = fptrunc float %4 to half
  ret half %5
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected float @__ocml_lgamma_r_f32(float, i32 addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast i32 %4 to float
  %6 = fcmp olt float %5, 1.562500e-02
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %2
  %8 = tail call float @__ocml_fmuladd_f32(float %5, float 0x3FD1513220000000, float 0xBFD9A4D560000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %5, float %8, float 0x3FEA51A660000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %5, float %9, float 0xBFE2788D00000000) #21
  %11 = tail call float @__ocml_log_f32(float %5) #21
  %12 = fsub float -0.000000e+00, %11
  %13 = tail call float @__ocml_fmuladd_f32(float %5, float %10, float %12) #21
  br label %160

; <label>:14:                                     ; preds = %2
  %15 = fcmp olt float %5, 2.000000e+00
  br i1 %15, label %16, label %98

; <label>:16:                                     ; preds = %14
  %17 = fcmp ugt float %5, 0x3FECCCCCC0000000
  br i1 %17, label %29, label %18

; <label>:18:                                     ; preds = %16
  %19 = tail call float @__ocml_log_f32(float %5) #21
  %20 = fsub float -0.000000e+00, %19
  %21 = fsub float 1.000000e+00, %5
  %22 = fcmp olt float %5, 0x3FE7694460000000
  %23 = fadd float %5, 0xBFDD8B6180000000
  %24 = select i1 %22, float %23, float %21
  %25 = zext i1 %22 to i32
  %26 = fcmp olt float %5, 0x3FCDA66120000000
  %27 = select i1 %26, float %5, float %24
  %28 = select i1 %26, i32 2, i32 %25
  br label %40

; <label>:29:                                     ; preds = %16
  %30 = fsub float 2.000000e+00, %5
  %31 = fcmp olt float %5, 0x3FFBB4A240000000
  %32 = fadd float %5, 0xBFF762D860000000
  %33 = select i1 %31, float %32, float %30
  %34 = select i1 %31, float 1.000000e+00, float %30
  %35 = fptosi float %34 to i32
  %36 = fcmp olt float %5, 0x3FF3AE1480000000
  %37 = fadd float %5, -1.000000e+00
  %38 = select i1 %36, float %37, float %33
  %39 = select i1 %36, i32 2, i32 %35
  br label %40

; <label>:40:                                     ; preds = %29, %18
  %41 = phi float [ %27, %18 ], [ %38, %29 ]
  %42 = phi i32 [ %28, %18 ], [ %39, %29 ]
  %43 = phi float [ %20, %18 ], [ 0.000000e+00, %29 ]
  switch i32 %42, label %160 [
    i32 0, label %44
    i32 1, label %60
    i32 2, label %82
  ]

; <label>:44:                                     ; preds = %40
  %45 = fmul float %41, %41
  %46 = tail call float @__ocml_fmuladd_f32(float %45, float 0x3EFA707440000000, float 0x3F2CF2ECE0000000) #21
  %47 = tail call float @__ocml_fmuladd_f32(float %45, float %46, float 0x3F538A9420000000) #21
  %48 = tail call float @__ocml_fmuladd_f32(float %45, float %47, float 0x3F7E404FC0000000) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %45, float %48, float 0x3FB13E0020000000) #21
  %50 = tail call float @__ocml_fmuladd_f32(float %45, float %49, float 0x3FB3C467E0000000) #21
  %51 = tail call float @__ocml_fmuladd_f32(float %45, float 0x3F07858EA0000000, float 0x3F1C5088A0000000) #21
  %52 = tail call float @__ocml_fmuladd_f32(float %45, float %51, float 0x3F40B6C680000000) #21
  %53 = tail call float @__ocml_fmuladd_f32(float %45, float %52, float 0x3F67ADD8C0000000) #21
  %54 = tail call float @__ocml_fmuladd_f32(float %45, float %53, float 0x3F951322A0000000) #21
  %55 = tail call float @__ocml_fmuladd_f32(float %45, float %54, float 0x3FD4A34CC0000000) #21
  %56 = fmul float %45, %55
  %57 = tail call float @__ocml_fmuladd_f32(float %41, float %50, float %56) #21
  %58 = tail call float @__ocml_fmuladd_f32(float %41, float -5.000000e-01, float %57) #21
  %59 = fadd float %43, %58
  br label %160

; <label>:60:                                     ; preds = %40
  %61 = fmul float %41, %41
  %62 = fmul float %41, %61
  %63 = tail call float @__ocml_fmuladd_f32(float %62, float 0x3F34AF6D60000000, float 0xBF56FE8EC0000000) #21
  %64 = tail call float @__ocml_fmuladd_f32(float %62, float %63, float 0x3F78FCE0E0000000) #21
  %65 = tail call float @__ocml_fmuladd_f32(float %62, float %64, float 0xBFA0C9A8E0000000) #21
  %66 = tail call float @__ocml_fmuladd_f32(float %62, float %65, float 0x3FDEF72BC0000000) #21
  %67 = tail call float @__ocml_fmuladd_f32(float %62, float 0xBF347F24E0000000, float 0x3F4CDF0CE0000000) #21
  %68 = tail call float @__ocml_fmuladd_f32(float %62, float %67, float 0xBF6E2EFFC0000000) #21
  %69 = tail call float @__ocml_fmuladd_f32(float %62, float %68, float 0x3F9266E7A0000000) #21
  %70 = tail call float @__ocml_fmuladd_f32(float %62, float %69, float 0xBFC2E42780000000) #21
  %71 = tail call float @__ocml_fmuladd_f32(float %62, float 0x3F35FD3EE0000000, float 0xBF41A610A0000000) #21
  %72 = tail call float @__ocml_fmuladd_f32(float %62, float %71, float 0x3F6282D320000000) #21
  %73 = tail call float @__ocml_fmuladd_f32(float %62, float %72, float 0xBF851F9FC0000000) #21
  %74 = tail call float @__ocml_fmuladd_f32(float %62, float %73, float 0x3FB08B42A0000000) #21
  %75 = tail call float @__ocml_fmuladd_f32(float %41, float %74, float %70) #21
  %76 = fsub float -0.000000e+00, %75
  %77 = tail call float @__ocml_fmuladd_f32(float %62, float %76, float 0xBC50C7CAA0000000) #21
  %78 = fsub float -0.000000e+00, %77
  %79 = tail call float @__ocml_fmuladd_f32(float %61, float %66, float %78) #21
  %80 = fadd float %79, 0xBFBF19B9C0000000
  %81 = fadd float %43, %80
  br label %160

; <label>:82:                                     ; preds = %40
  %83 = tail call float @__ocml_fmuladd_f32(float %41, float 0x3F8B678BC0000000, float 0x3FCD4EAF00000000) #21
  %84 = tail call float @__ocml_fmuladd_f32(float %41, float %83, float 0x3FEF497640000000) #21
  %85 = tail call float @__ocml_fmuladd_f32(float %41, float %84, float 0x3FF7475CE0000000) #21
  %86 = tail call float @__ocml_fmuladd_f32(float %41, float %85, float 0x3FE4401E80000000) #21
  %87 = tail call float @__ocml_fmuladd_f32(float %41, float %86, float 0xBFB3C467E0000000) #21
  %88 = fmul float %41, %87
  %89 = tail call float @__ocml_fmuladd_f32(float %41, float 0x3F6A5ABB60000000, float 0x3FBAAE55E0000000) #21
  %90 = tail call float @__ocml_fmuladd_f32(float %41, float %89, float 0x3FE89DFBE0000000) #21
  %91 = tail call float @__ocml_fmuladd_f32(float %41, float %90, float 0x40010725A0000000) #21
  %92 = tail call float @__ocml_fmuladd_f32(float %41, float %91, float 0x4003A5D7C0000000) #21
  %93 = tail call float @__ocml_fmuladd_f32(float %41, float %92, float 1.000000e+00) #21
  %94 = tail call float @llvm.amdgcn.rcp.f32(float %93) #47
  %95 = fmul float %88, %94
  %96 = tail call float @__ocml_fmuladd_f32(float %41, float -5.000000e-01, float %95) #21
  %97 = fadd float %43, %96
  br label %160

; <label>:98:                                     ; preds = %14
  %99 = fcmp olt float %5, 8.000000e+00
  br i1 %99, label %100, label %141

; <label>:100:                                    ; preds = %98
  %101 = fptosi float %5 to i32
  %102 = sitofp i32 %101 to float
  %103 = fsub float %5, %102
  %104 = tail call float @__ocml_fmuladd_f32(float %103, float 0x3F00BFECE0000000, float 0x3F5E26B680000000) #21
  %105 = tail call float @__ocml_fmuladd_f32(float %103, float %104, float 0x3F9B481C80000000) #21
  %106 = tail call float @__ocml_fmuladd_f32(float %103, float %105, float 0x3FC2BB9CC0000000) #21
  %107 = tail call float @__ocml_fmuladd_f32(float %103, float %106, float 0x3FD4D98F40000000) #21
  %108 = tail call float @__ocml_fmuladd_f32(float %103, float %107, float 0x3FCB848B40000000) #21
  %109 = tail call float @__ocml_fmuladd_f32(float %103, float %108, float 0xBFB3C467E0000000) #21
  %110 = fmul float %103, %109
  %111 = tail call float @__ocml_fmuladd_f32(float %103, float 0x3EDEBAF7A0000000, float 0x3F497DDAC0000000) #21
  %112 = tail call float @__ocml_fmuladd_f32(float %103, float %111, float 0x3F9317EA80000000) #21
  %113 = tail call float @__ocml_fmuladd_f32(float %103, float %112, float 0x3FC601EDC0000000) #21
  %114 = tail call float @__ocml_fmuladd_f32(float %103, float %113, float 0x3FE71A18A0000000) #21
  %115 = tail call float @__ocml_fmuladd_f32(float %103, float %114, float 0x3FF645A760000000) #21
  %116 = tail call float @__ocml_fmuladd_f32(float %103, float %115, float 1.000000e+00) #21
  %117 = tail call float @llvm.amdgcn.rcp.f32(float %116) #47
  %118 = fmul float %110, %117
  %119 = tail call float @__ocml_fmuladd_f32(float %103, float 5.000000e-01, float %118) #21
  %120 = fadd float %103, 2.000000e+00
  %121 = fadd float %103, 3.000000e+00
  %122 = fadd float %103, 4.000000e+00
  %123 = fadd float %103, 5.000000e+00
  %124 = fadd float %103, 6.000000e+00
  %125 = icmp sgt i32 %101, 2
  %126 = select i1 %125, float %120, float 1.000000e+00
  %127 = icmp sgt i32 %101, 3
  %128 = select i1 %127, float %121, float 1.000000e+00
  %129 = fmul float %126, %128
  %130 = icmp sgt i32 %101, 4
  %131 = select i1 %130, float %122, float 1.000000e+00
  %132 = fmul float %131, %129
  %133 = icmp sgt i32 %101, 5
  %134 = select i1 %133, float %123, float 1.000000e+00
  %135 = fmul float %134, %132
  %136 = icmp sgt i32 %101, 6
  %137 = select i1 %136, float %124, float 1.000000e+00
  %138 = fmul float %137, %135
  %139 = tail call float @__ocml_log_f32(float %138) #21
  %140 = fadd float %119, %139
  br label %160

; <label>:141:                                    ; preds = %98
  %142 = fcmp olt float %5, 0x4390000000000000
  br i1 %142, label %143, label %156

; <label>:143:                                    ; preds = %141
  %144 = tail call float @llvm.amdgcn.rcp.f32(float %5) #47
  %145 = fmul float %144, %144
  %146 = tail call float @__ocml_fmuladd_f32(float %145, float 0xBF5AB89D00000000, float 0x3F4B67BA40000000) #21
  %147 = tail call float @__ocml_fmuladd_f32(float %145, float %146, float 0xBF4380CB80000000) #21
  %148 = tail call float @__ocml_fmuladd_f32(float %145, float %147, float 0x3F4A019FA0000000) #21
  %149 = tail call float @__ocml_fmuladd_f32(float %145, float %148, float 0xBF66C16C20000000) #21
  %150 = tail call float @__ocml_fmuladd_f32(float %145, float %149, float 0x3FB5555560000000) #21
  %151 = tail call float @__ocml_fmuladd_f32(float %144, float %150, float 0x3FDACFE3A0000000) #21
  %152 = fadd float %5, -5.000000e-01
  %153 = tail call float @__ocml_log_f32(float %5) #21
  %154 = fadd float %153, -1.000000e+00
  %155 = tail call float @__ocml_fmuladd_f32(float %152, float %154, float %151) #21
  br label %160

; <label>:156:                                    ; preds = %141
  %157 = tail call float @__ocml_log_f32(float %5) #21
  %158 = fsub float -0.000000e+00, %5
  %159 = tail call float @__ocml_fmuladd_f32(float %5, float %157, float %158) #21
  br label %160

; <label>:160:                                    ; preds = %156, %143, %100, %82, %60, %44, %40, %7
  %161 = phi float [ %13, %7 ], [ %140, %100 ], [ %155, %143 ], [ %159, %156 ], [ %43, %40 ], [ %97, %82 ], [ %81, %60 ], [ %59, %44 ]
  %162 = fcmp ult float %0, 0.000000e+00
  br i1 %162, label %170, label %163

; <label>:163:                                    ; preds = %160
  %164 = fcmp oeq float %0, 1.000000e+00
  %165 = fcmp oeq float %0, 2.000000e+00
  %166 = or i1 %164, %165
  %167 = select i1 %166, float 0.000000e+00, float %161
  %168 = fcmp une float %0, 0.000000e+00
  %169 = zext i1 %168 to i32
  br label %187

; <label>:170:                                    ; preds = %160
  %171 = icmp ult i32 %4, 1258291200
  br i1 %171, label %172, label %187

; <label>:172:                                    ; preds = %170
  %173 = tail call float @__ocml_sinpi_f32(float %0) #21
  %174 = fmul float %173, %0
  %175 = tail call float @llvm.fabs.f32(float %174) #47
  %176 = fdiv float 0x400921FB60000000, %175, !fpmath !142
  %177 = tail call float @__ocml_log_f32(float %176) #21
  %178 = fsub float %177, %161
  %179 = tail call float @llvm.amdgcn.fract.f32(float %0) #47
  %180 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516) #47
  %181 = select i1 %180, float 0.000000e+00, float %179
  %182 = fcmp oeq float %181, 0.000000e+00
  %183 = select i1 %182, float 0x7FF0000000000000, float %178
  %184 = fcmp olt float %173, 0.000000e+00
  %185 = select i1 %184, i32 -1, i32 1
  %186 = select i1 %182, i32 0, i32 %185
  br label %187

; <label>:187:                                    ; preds = %172, %170, %163
  %188 = phi i32 [ %169, %163 ], [ %186, %172 ], [ 0, %170 ]
  %189 = phi float [ %167, %163 ], [ %183, %172 ], [ %161, %170 ]
  %190 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %192, label %203

; <label>:192:                                    ; preds = %187
  %193 = icmp eq i32 %4, 0
  %194 = icmp eq i32 %4, 2139095040
  %195 = or i1 %193, %194
  %196 = fcmp olt float %0, 0.000000e+00
  %197 = icmp ugt i32 %4, 1258291199
  %198 = and i1 %196, %197
  %199 = or i1 %195, %198
  %200 = select i1 %199, float 0x7FF0000000000000, float %189
  %201 = icmp ugt i32 %4, 2139095040
  %202 = select i1 %201, float %0, float %200
  br label %203

; <label>:203:                                    ; preds = %192, %187
  %204 = phi float [ %189, %187 ], [ %202, %192 ]
  store i32 %188, i32 addrspace(5)* %1, align 4, !tbaa !120
  ret float %204
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_log_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = load i8, i8 addrspace(4)* @__oclc_unsafe_math_opt, align 1, !tbaa !140, !range !43
  %5 = icmp ne i8 %4, 0
  br i1 %3, label %33, label %6

; <label>:6:                                      ; preds = %1
  %7 = tail call float @llvm.log2.f32(float %0)
  br i1 %5, label %8, label %10

; <label>:8:                                      ; preds = %6
  %9 = fmul float %7, 0x3FE62E4300000000
  br label %66

; <label>:10:                                     ; preds = %6
  %11 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %12 = icmp sgt i32 %11, 899
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %10
  switch i32 %11, label %20 [
    i32 801, label %14
    i32 701, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %10
  %15 = fmul float %7, 0x3FE62E42E0000000
  %16 = fsub float -0.000000e+00, %15
  %17 = tail call float @llvm.fma.f32(float %7, float 0x3FE62E42E0000000, float %16)
  %18 = tail call float @llvm.fma.f32(float %7, float 0x3E6EFA39E0000000, float %17)
  %19 = fadd float %15, %18
  br label %29

; <label>:20:                                     ; preds = %13
  %21 = bitcast float %7 to i32
  %22 = and i32 %21, -4096
  %23 = bitcast i32 %22 to float
  %24 = fsub float %7, %23
  %25 = fmul float %24, 0x3F00BFBE80000000
  %26 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3F00BFBE80000000, float %25) #21
  %27 = tail call float @__ocml_fmuladd_f32(float %24, float 0x3FE62E0000000000, float %26) #21
  %28 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3FE62E0000000000, float %27) #21
  br label %29

; <label>:29:                                     ; preds = %20, %14
  %30 = phi float [ %19, %14 ], [ %28, %20 ]
  %31 = tail call i1 @llvm.amdgcn.class.f32(float %7, i32 519)
  %32 = select i1 %31, float %7, float %30
  br label %66

; <label>:33:                                     ; preds = %1
  %34 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 144)
  %35 = select i1 %34, float 0x41F0000000000000, float 1.000000e+00
  %36 = fmul float %35, %0
  %37 = tail call float @llvm.log2.f32(float %36)
  br i1 %5, label %38, label %41

; <label>:38:                                     ; preds = %33
  %39 = select i1 %34, float 0xC0362E4300000000, float 0.000000e+00
  %40 = tail call float @__ocml_fmuladd_f32(float %37, float 0x3FE62E4300000000, float %39) #21
  br label %66

; <label>:41:                                     ; preds = %33
  %42 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %43 = icmp sgt i32 %42, 899
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %41
  switch i32 %42, label %51 [
    i32 801, label %45
    i32 701, label %45
  ]

; <label>:45:                                     ; preds = %44, %44, %41
  %46 = fmul float %37, 0x3FE62E42E0000000
  %47 = fsub float -0.000000e+00, %46
  %48 = tail call float @llvm.fma.f32(float %37, float 0x3FE62E42E0000000, float %47)
  %49 = tail call float @llvm.fma.f32(float %37, float 0x3E6EFA39E0000000, float %48)
  %50 = fadd float %46, %49
  br label %60

; <label>:51:                                     ; preds = %44
  %52 = bitcast float %37 to i32
  %53 = and i32 %52, -4096
  %54 = bitcast i32 %53 to float
  %55 = fsub float %37, %54
  %56 = fmul float %55, 0x3F00BFBE80000000
  %57 = tail call float @__ocml_fmuladd_f32(float %54, float 0x3F00BFBE80000000, float %56) #21
  %58 = tail call float @__ocml_fmuladd_f32(float %55, float 0x3FE62E0000000000, float %57) #21
  %59 = tail call float @__ocml_fmuladd_f32(float %54, float 0x3FE62E0000000000, float %58) #21
  br label %60

; <label>:60:                                     ; preds = %51, %45
  %61 = phi float [ %50, %45 ], [ %59, %51 ]
  %62 = tail call i1 @llvm.amdgcn.class.f32(float %37, i32 519)
  %63 = select i1 %62, float %37, float %61
  %64 = select i1 %34, float 0x40362E4300000000, float 0.000000e+00
  %65 = fsub float %63, %64
  br label %66

; <label>:66:                                     ; preds = %60, %38, %29, %8
  %67 = phi float [ %9, %8 ], [ %32, %29 ], [ %40, %38 ], [ %65, %60 ]
  ret float %67
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_sinpi_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  %5 = tail call [2 x i32] @__ocmlpriv_trigpired_f32(float %4) #21
  %6 = extractvalue [2 x i32] %5, 0
  %7 = extractvalue [2 x i32] %5, 1
  %8 = bitcast i32 %6 to float
  %9 = tail call [2 x i32] @__ocmlpriv_sincospired_f32(float %8) #21
  %10 = extractvalue [2 x i32] %9, 0
  %11 = extractvalue [2 x i32] %9, 1
  %12 = and i32 %7, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 %10, i32 %11
  %15 = icmp sgt i32 %7, 1
  %16 = select i1 %15, i32 -2147483648, i32 0
  %17 = and i32 %2, -2147483648
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, %14
  %20 = bitcast i32 %19 to float
  %21 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %22 = icmp eq i8 %21, 0
  %23 = icmp ugt i32 %3, 2139095039
  %24 = and i1 %23, %22
  %25 = select i1 %24, float 0x7FF8000000000000, float %20
  ret float %25
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_hypot_f16(half, half) local_unnamed_addr #28 {
  %3 = fpext half %0 to float
  %4 = fpext half %1 to float
  %5 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %6 = icmp sgt i32 %5, 899
  %7 = fmul float %4, %4
  br i1 %6, label %9, label %8

; <label>:8:                                      ; preds = %2
  switch i32 %5, label %11 [
    i32 801, label %9
    i32 701, label %9
  ]

; <label>:9:                                      ; preds = %8, %8, %2
  %10 = tail call float @llvm.fma.f32(float %3, float %3, float %7)
  br label %13

; <label>:11:                                     ; preds = %8
  %12 = tail call float @llvm.fmuladd.f32(float %3, float %3, float %7)
  br label %13

; <label>:13:                                     ; preds = %11, %9
  %14 = phi float [ %10, %9 ], [ %12, %11 ]
  %15 = tail call float @llvm.sqrt.f32(float %14)
  %16 = fptrunc float %15 to half
  %17 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %18 = icmp eq i8 %17, 0
  %19 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %20 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 516) #21
  %21 = or i1 %19, %20
  %22 = and i1 %21, %18
  %23 = select i1 %22, half 0xH7C00, half %16
  ret half %23
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_cosh_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fadd float %2, 0xBFE62E4300000000
  %4 = fsub float %3, %2
  %5 = fsub float %4, %3
  %6 = fadd float %2, %5
  %7 = fadd float %4, 0x3FE62E4300000000
  %8 = fsub float %6, %7
  %9 = fadd float %8, 0x3E205C6100000000
  %10 = fadd float %3, %9
  %11 = fsub float %10, %3
  %12 = fsub float %9, %11
  %13 = insertelement <2 x float> undef, float %12, i32 0
  %14 = insertelement <2 x float> %13, float %10, i32 1
  %15 = tail call <2 x float> @__ocmlpriv_epexpep_f32(<2 x float> %14) #21
  %16 = extractelement <2 x float> %15, i64 1
  %17 = tail call float @llvm.amdgcn.rcp.f32(float %16) #47
  %18 = fmul float %16, %17
  %19 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %20 = icmp sgt i32 %19, 899
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %1
  %22 = fsub float -0.000000e+00, %18
  %23 = tail call float @llvm.fma.f32(float %17, float %16, float %22) #47
  %24 = insertelement <2 x float> undef, float %23, i32 0
  %25 = insertelement <2 x float> %24, float %18, i32 1
  %26 = extractelement <2 x float> %15, i64 0
  br label %50

; <label>:27:                                     ; preds = %1
  switch i32 %19, label %28 [
    i32 801, label %42
    i32 701, label %42
  ]

; <label>:28:                                     ; preds = %27
  %29 = bitcast float %17 to i32
  %30 = and i32 %29, -4096
  %31 = bitcast i32 %30 to float
  %32 = fsub float %17, %31
  %33 = bitcast float %16 to i32
  %34 = and i32 %33, -4096
  %35 = bitcast i32 %34 to float
  %36 = fsub float %16, %35
  %37 = fsub float -0.000000e+00, %18
  %38 = tail call float @llvm.fmuladd.f32(float %31, float %35, float %37) #47
  %39 = tail call float @llvm.fmuladd.f32(float %31, float %36, float %38) #47
  %40 = tail call float @llvm.fmuladd.f32(float %32, float %35, float %39) #47
  %41 = tail call float @llvm.fmuladd.f32(float %32, float %36, float %40) #47
  br label %45

; <label>:42:                                     ; preds = %27, %27
  %43 = fsub float -0.000000e+00, %18
  %44 = tail call float @llvm.fma.f32(float %17, float %16, float %43) #47
  br label %45

; <label>:45:                                     ; preds = %42, %28
  %46 = phi float [ %44, %42 ], [ %41, %28 ]
  %47 = insertelement <2 x float> undef, float %46, i32 0
  %48 = insertelement <2 x float> %47, float %18, i32 1
  %49 = extractelement <2 x float> %15, i64 0
  switch i32 %19, label %56 [
    i32 801, label %50
    i32 701, label %50
  ]

; <label>:50:                                     ; preds = %45, %45, %21
  %51 = phi float [ %46, %45 ], [ %46, %45 ], [ %23, %21 ]
  %52 = phi float [ %49, %45 ], [ %49, %45 ], [ %26, %21 ]
  %53 = phi <2 x float> [ %48, %45 ], [ %48, %45 ], [ %25, %21 ]
  %54 = tail call float @llvm.fma.f32(float %17, float %52, float %51) #47
  %55 = insertelement <2 x float> %53, float %54, i64 0
  br label %59

; <label>:56:                                     ; preds = %45
  %57 = tail call float @llvm.fmuladd.f32(float %17, float %49, float %46) #47
  %58 = insertelement <2 x float> %48, float %57, i64 0
  br label %59

; <label>:59:                                     ; preds = %56, %50
  %60 = phi float [ %52, %50 ], [ %49, %56 ]
  %61 = phi <2 x float> [ %55, %50 ], [ %58, %56 ]
  %62 = extractelement <2 x float> %61, i64 1
  %63 = extractelement <2 x float> %61, i64 0
  %64 = fadd float %62, %63
  %65 = fsub float %64, %62
  %66 = fsub float %63, %65
  %67 = fsub float 1.000000e+00, %64
  %68 = fsub float 1.000000e+00, %67
  %69 = fsub float %68, %64
  %70 = fsub float %69, %66
  %71 = fadd float %67, %70
  %72 = fsub float %71, %67
  %73 = fsub float %70, %72
  %74 = fmul float %17, %71
  %75 = fmul float %16, %74
  br i1 %20, label %76, label %81

; <label>:76:                                     ; preds = %59
  %77 = fsub float -0.000000e+00, %75
  %78 = tail call float @llvm.fma.f32(float %74, float %16, float %77) #47
  %79 = insertelement <2 x float> undef, float %78, i32 0
  %80 = insertelement <2 x float> %79, float %75, i32 1
  br label %103

; <label>:81:                                     ; preds = %59
  switch i32 %19, label %82 [
    i32 801, label %96
    i32 701, label %96
  ]

; <label>:82:                                     ; preds = %81
  %83 = bitcast float %74 to i32
  %84 = and i32 %83, -4096
  %85 = bitcast i32 %84 to float
  %86 = fsub float %74, %85
  %87 = bitcast float %16 to i32
  %88 = and i32 %87, -4096
  %89 = bitcast i32 %88 to float
  %90 = fsub float %16, %89
  %91 = fsub float -0.000000e+00, %75
  %92 = tail call float @llvm.fmuladd.f32(float %85, float %89, float %91) #47
  %93 = tail call float @llvm.fmuladd.f32(float %85, float %90, float %92) #47
  %94 = tail call float @llvm.fmuladd.f32(float %86, float %89, float %93) #47
  %95 = tail call float @llvm.fmuladd.f32(float %86, float %90, float %94) #47
  br label %99

; <label>:96:                                     ; preds = %81, %81
  %97 = fsub float -0.000000e+00, %75
  %98 = tail call float @llvm.fma.f32(float %74, float %16, float %97) #47
  br label %99

; <label>:99:                                     ; preds = %96, %82
  %100 = phi float [ %98, %96 ], [ %95, %82 ]
  %101 = insertelement <2 x float> undef, float %100, i32 0
  %102 = insertelement <2 x float> %101, float %75, i32 1
  switch i32 %19, label %108 [
    i32 801, label %103
    i32 701, label %103
  ]

; <label>:103:                                    ; preds = %99, %99, %76
  %104 = phi float [ %100, %99 ], [ %100, %99 ], [ %78, %76 ]
  %105 = phi <2 x float> [ %102, %99 ], [ %102, %99 ], [ %80, %76 ]
  %106 = tail call float @llvm.fma.f32(float %74, float %60, float %104) #47
  %107 = insertelement <2 x float> %105, float %106, i64 0
  br label %111

; <label>:108:                                    ; preds = %99
  %109 = tail call float @llvm.fmuladd.f32(float %74, float %60, float %100) #47
  %110 = insertelement <2 x float> %102, float %109, i64 0
  br label %111

; <label>:111:                                    ; preds = %108, %103
  %112 = phi <2 x float> [ %107, %103 ], [ %110, %108 ]
  %113 = extractelement <2 x float> %112, i64 1
  %114 = extractelement <2 x float> %112, i64 0
  %115 = fadd float %113, %114
  %116 = fsub float %115, %113
  %117 = fsub float %114, %116
  %118 = fsub float %71, %115
  %119 = fsub float %71, %118
  %120 = fsub float %119, %115
  %121 = fadd float %73, %120
  %122 = fsub float %121, %117
  %123 = fadd float %118, %122
  %124 = fmul float %17, %123
  %125 = fadd float %17, %74
  %126 = fsub float %125, %17
  %127 = fsub float %74, %126
  %128 = fadd float %127, %124
  %129 = fadd float %125, %128
  %130 = fsub float %129, %125
  %131 = fsub float %128, %130
  %132 = tail call float @llvm.amdgcn.ldexp.f32(float %129, i32 -2) #47
  %133 = tail call float @llvm.amdgcn.ldexp.f32(float %131, i32 -2) #47
  %134 = fadd float %16, %132
  %135 = fsub float %134, %16
  %136 = fsub float %132, %135
  %137 = fadd float %60, %133
  %138 = fadd float %136, %137
  %139 = fadd float %134, %138
  %140 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %141 = icmp eq i8 %140, 0
  %142 = fcmp ogt float %2, 0x40565A9F80000000
  %143 = and i1 %142, %141
  %144 = select i1 %143, float 0x7FF0000000000000, float %139
  ret float %144
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected <2 x float> @__ocmlpriv_epexpep_f32(<2 x float>) local_unnamed_addr #28 {
  %2 = extractelement <2 x float> %0, i64 1
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.rint.f32(float %3)
  %5 = tail call float @__ocml_fmuladd_f32(float %4, float 0xBFE62E4000000000, float %2) #21
  %6 = extractelement <2 x float> %0, i64 0
  %7 = fadd float %6, %5
  %8 = fsub float %7, %5
  %9 = fsub float %6, %8
  %10 = fmul float %4, 0x3EB7F78000000000
  %11 = fsub float %7, %10
  %12 = fsub float %7, %11
  %13 = fsub float %12, %10
  %14 = fadd float %9, %13
  %15 = fadd float %11, %14
  %16 = fsub float %15, %11
  %17 = fsub float %14, %16
  %18 = fmul float %4, 0x3DD473DE60000000
  %19 = fsub float %15, %18
  %20 = fsub float %15, %19
  %21 = fsub float %20, %18
  %22 = fadd float %17, %21
  %23 = fadd float %19, %22
  %24 = fsub float %23, %19
  %25 = fsub float %22, %24
  %26 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3F56850E40000000, float 0x3F8123BCC0000000) #21
  %27 = tail call float @__ocml_fmuladd_f32(float %23, float %26, float 0x3FA555B980000000) #21
  %28 = tail call float @__ocml_fmuladd_f32(float %23, float %27, float 0x3FC55548E0000000) #21
  %29 = tail call float @__ocml_fmuladd_f32(float %23, float %28, float 0x3FDFFFFF80000000) #21
  %30 = fmul float %23, %23
  %31 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %32 = icmp sgt i32 %31, 899
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %1
  %34 = fsub float -0.000000e+00, %30
  %35 = tail call float @llvm.fma.f32(float %23, float %23, float %34) #47
  %36 = insertelement <2 x float> undef, float %35, i32 0
  %37 = insertelement <2 x float> %36, float %30, i32 1
  br label %64

; <label>:38:                                     ; preds = %1
  switch i32 %31, label %39 [
    i32 801, label %49
    i32 701, label %49
  ]

; <label>:39:                                     ; preds = %38
  %40 = bitcast float %23 to i32
  %41 = and i32 %40, -4096
  %42 = bitcast i32 %41 to float
  %43 = fsub float %23, %42
  %44 = fsub float -0.000000e+00, %30
  %45 = tail call float @llvm.fmuladd.f32(float %42, float %42, float %44) #47
  %46 = fmul float %42, 2.000000e+00
  %47 = tail call float @llvm.fmuladd.f32(float %46, float %43, float %45) #47
  %48 = tail call float @llvm.fmuladd.f32(float %43, float %43, float %47) #47
  br label %52

; <label>:49:                                     ; preds = %38, %38
  %50 = fsub float -0.000000e+00, %30
  %51 = tail call float @llvm.fma.f32(float %23, float %23, float %50) #47
  br label %52

; <label>:52:                                     ; preds = %49, %39
  %53 = phi float [ %51, %49 ], [ %48, %39 ]
  %54 = insertelement <2 x float> undef, float %53, i32 0
  %55 = insertelement <2 x float> %54, float %30, i32 1
  switch i32 %31, label %56 [
    i32 801, label %64
    i32 701, label %64
  ]

; <label>:56:                                     ; preds = %52
  %57 = fmul float %23, %25
  %58 = tail call float @llvm.fmuladd.f32(float %57, float 2.000000e+00, float %53) #47
  %59 = tail call float @llvm.fmuladd.f32(float %25, float %25, float %58) #47
  %60 = fadd float %30, %59
  %61 = fsub float %60, %30
  %62 = fsub float %59, %61
  %63 = fmul float %29, %60
  br label %80

; <label>:64:                                     ; preds = %52, %52, %33
  %65 = phi <2 x float> [ %55, %52 ], [ %55, %52 ], [ %37, %33 ]
  %66 = fmul float %25, 2.000000e+00
  %67 = extractelement <2 x float> %65, i64 0
  %68 = tail call float @llvm.fma.f32(float %23, float %66, float %67) #47
  %69 = tail call float @llvm.fma.f32(float %25, float %25, float %68) #47
  %70 = extractelement <2 x float> %65, i64 1
  %71 = fadd float %70, %69
  %72 = fsub float %71, %70
  %73 = fsub float %69, %72
  %74 = fmul float %29, %71
  br i1 %32, label %75, label %80

; <label>:75:                                     ; preds = %64
  %76 = fsub float -0.000000e+00, %74
  %77 = tail call float @llvm.fma.f32(float %71, float %29, float %76) #47
  %78 = insertelement <2 x float> undef, float %77, i32 0
  %79 = insertelement <2 x float> %78, float %74, i32 1
  br label %105

; <label>:80:                                     ; preds = %64, %56
  %81 = phi float [ %63, %56 ], [ %74, %64 ]
  %82 = phi float [ %62, %56 ], [ %73, %64 ]
  %83 = phi float [ %60, %56 ], [ %71, %64 ]
  switch i32 %31, label %84 [
    i32 801, label %98
    i32 701, label %98
  ]

; <label>:84:                                     ; preds = %80
  %85 = bitcast float %83 to i32
  %86 = and i32 %85, -4096
  %87 = bitcast i32 %86 to float
  %88 = fsub float %83, %87
  %89 = bitcast float %29 to i32
  %90 = and i32 %89, -4096
  %91 = bitcast i32 %90 to float
  %92 = fsub float %29, %91
  %93 = fsub float -0.000000e+00, %81
  %94 = tail call float @llvm.fmuladd.f32(float %87, float %91, float %93) #47
  %95 = tail call float @llvm.fmuladd.f32(float %87, float %92, float %94) #47
  %96 = tail call float @llvm.fmuladd.f32(float %88, float %91, float %95) #47
  %97 = tail call float @llvm.fmuladd.f32(float %88, float %92, float %96) #47
  br label %101

; <label>:98:                                     ; preds = %80, %80
  %99 = fsub float -0.000000e+00, %81
  %100 = tail call float @llvm.fma.f32(float %83, float %29, float %99) #47
  br label %101

; <label>:101:                                    ; preds = %98, %84
  %102 = phi float [ %100, %98 ], [ %97, %84 ]
  %103 = insertelement <2 x float> undef, float %102, i32 0
  %104 = insertelement <2 x float> %103, float %81, i32 1
  switch i32 %31, label %111 [
    i32 801, label %105
    i32 701, label %105
  ]

; <label>:105:                                    ; preds = %101, %101, %75
  %106 = phi float [ %82, %101 ], [ %82, %101 ], [ %73, %75 ]
  %107 = phi float [ %102, %101 ], [ %102, %101 ], [ %77, %75 ]
  %108 = phi <2 x float> [ %104, %101 ], [ %104, %101 ], [ %79, %75 ]
  %109 = tail call float @llvm.fma.f32(float %106, float %29, float %107) #47
  %110 = insertelement <2 x float> %108, float %109, i64 0
  br label %114

; <label>:111:                                    ; preds = %101
  %112 = tail call float @llvm.fmuladd.f32(float %82, float %29, float %102) #47
  %113 = insertelement <2 x float> %104, float %112, i64 0
  br label %114

; <label>:114:                                    ; preds = %111, %105
  %115 = phi <2 x float> [ %110, %105 ], [ %113, %111 ]
  %116 = extractelement <2 x float> %115, i64 1
  %117 = extractelement <2 x float> %115, i64 0
  %118 = fadd float %116, %117
  %119 = fsub float %118, %116
  %120 = fsub float %117, %119
  %121 = fadd float %23, %118
  %122 = fsub float %121, %23
  %123 = fsub float %118, %122
  %124 = fadd float %25, %120
  %125 = fadd float %123, %124
  %126 = fadd float %121, %125
  %127 = fsub float %126, %121
  %128 = fsub float %125, %127
  %129 = fadd float %126, 1.000000e+00
  %130 = fadd float %129, -1.000000e+00
  %131 = fsub float %126, %130
  %132 = fadd float %128, %131
  %133 = fadd float %129, %132
  %134 = fsub float %133, %129
  %135 = fsub float %132, %134
  %136 = fptosi float %4 to i32
  %137 = tail call float @llvm.amdgcn.ldexp.f32(float %133, i32 %136) #47
  %138 = tail call float @llvm.amdgcn.ldexp.f32(float %135, i32 %136) #47
  %139 = insertelement <2 x float> undef, float %138, i32 0
  %140 = insertelement <2 x float> %139, float %137, i32 1
  ret <2 x float> %140
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_erfinv_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fcmp olt float %2, 3.750000e-01
  br i1 %3, label %4, label %12

; <label>:4:                                      ; preds = %1
  %5 = fmul float %0, %0
  %6 = tail call float @__ocml_fmuladd_f32(float %5, float 0x3FC48B6CA0000000, float 0xBF9A2930A0000000) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %5, float %6, float 0x3FB65B0B40000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %5, float %7, float 0x3FB5581AE0000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %5, float %8, float 0x3FC05AA560000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %5, float %9, float 0x3FCDB27480000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %5, float %10, float 0x3FEC5BF8A0000000) #21
  br label %87

; <label>:12:                                     ; preds = %1
  %13 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %14 = icmp sgt i32 %13, 899
  br i1 %14, label %16, label %15

; <label>:15:                                     ; preds = %12
  switch i32 %13, label %19 [
    i32 801, label %16
    i32 701, label %16
  ]

; <label>:16:                                     ; preds = %15, %15, %12
  %17 = fsub float -0.000000e+00, %2
  %18 = tail call float @llvm.fma.f32(float %17, float %2, float 1.000000e+00)
  br label %23

; <label>:19:                                     ; preds = %15
  %20 = fsub float 1.000000e+00, %2
  %21 = fadd float %2, 1.000000e+00
  %22 = fmul float %20, %21
  br label %23

; <label>:23:                                     ; preds = %19, %16
  %24 = phi float [ %18, %16 ], [ %22, %19 ]
  %25 = tail call float @__ocml_log_f32(float %24) #21
  %26 = fcmp ogt float %25, -5.000000e+00
  br i1 %26, label %27, label %37

; <label>:27:                                     ; preds = %23
  %28 = fsub float -2.500000e+00, %25
  %29 = tail call float @__ocml_fmuladd_f32(float %28, float 0x3E5E2CB100000000, float 0x3E970966C0000000) #21
  %30 = tail call float @__ocml_fmuladd_f32(float %28, float %29, float 0xBECD8E6AE0000000) #21
  %31 = tail call float @__ocml_fmuladd_f32(float %28, float %30, float 0xBED26B5820000000) #21
  %32 = tail call float @__ocml_fmuladd_f32(float %28, float %31, float 0x3F2CA65B60000000) #21
  %33 = tail call float @__ocml_fmuladd_f32(float %28, float %32, float 0xBF548A8100000000) #21
  %34 = tail call float @__ocml_fmuladd_f32(float %28, float %33, float 0xBF711C9DE0000000) #21
  %35 = tail call float @__ocml_fmuladd_f32(float %28, float %34, float 0x3FCF91EC60000000) #21
  %36 = tail call float @__ocml_fmuladd_f32(float %28, float %35, float 0x3FF805C5E0000000) #21
  br label %87

; <label>:37:                                     ; preds = %23
  %38 = fcmp ogt float %25, 0xB9F0000000000000
  %39 = select i1 %38, float 0x41F0000000000000, float 1.000000e+00
  %40 = fmul float %25, %39
  %41 = fsub float -0.000000e+00, %40
  %42 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %61

; <label>:44:                                     ; preds = %37
  %45 = fcmp ogt float %40, -0.000000e+00
  %46 = tail call float @llvm.sqrt.f32(float %41)
  %47 = select i1 %45, float 0x7FF8000000000000, float %46
  %48 = bitcast float %47 to i32
  %49 = add nsw i32 %48, -1
  %50 = bitcast i32 %49 to float
  %51 = add nsw i32 %48, 1
  %52 = bitcast i32 %51 to float
  %53 = fsub float -0.000000e+00, %50
  %54 = tail call float @llvm.fma.f32(float %53, float %47, float %41)
  %55 = fsub float -0.000000e+00, %52
  %56 = tail call float @llvm.fma.f32(float %55, float %47, float %41)
  %57 = fcmp ole float %54, 0.000000e+00
  %58 = select i1 %57, float %50, float %47
  %59 = fcmp ogt float %56, 0.000000e+00
  %60 = select i1 %59, float %52, float %58
  br label %72

; <label>:61:                                     ; preds = %37
  %62 = tail call float @llvm.amdgcn.rsq.f32(float %41)
  %63 = fmul float %62, %41
  %64 = fmul float %62, 5.000000e-01
  %65 = fsub float -0.000000e+00, %64
  %66 = tail call float @llvm.fma.f32(float %65, float %63, float 5.000000e-01)
  %67 = tail call float @llvm.fma.f32(float %64, float %66, float %64)
  %68 = tail call float @llvm.fma.f32(float %63, float %66, float %63)
  %69 = fsub float -0.000000e+00, %68
  %70 = tail call float @llvm.fma.f32(float %69, float %68, float %41)
  %71 = tail call float @llvm.fma.f32(float %70, float %67, float %68)
  br label %72

; <label>:72:                                     ; preds = %61, %44
  %73 = phi float [ %71, %61 ], [ %60, %44 ]
  %74 = select i1 %38, float 0x3EF0000000000000, float 1.000000e+00
  %75 = fmul float %74, %73
  %76 = tail call i1 @llvm.amdgcn.class.f32(float %41, i32 608)
  %77 = select i1 %76, float %41, float %75
  %78 = fadd float %77, -3.000000e+00
  %79 = tail call float @__ocml_fmuladd_f32(float %78, float 0xBF2A3E1360000000, float 0x3F1A76AD60000000) #21
  %80 = tail call float @__ocml_fmuladd_f32(float %78, float %79, float 0x3F561B8E40000000) #21
  %81 = tail call float @__ocml_fmuladd_f32(float %78, float %80, float 0xBF6E17BCE0000000) #21
  %82 = tail call float @__ocml_fmuladd_f32(float %78, float %81, float 0x3F77824F60000000) #21
  %83 = tail call float @__ocml_fmuladd_f32(float %78, float %82, float 0xBF7F38BAE0000000) #21
  %84 = tail call float @__ocml_fmuladd_f32(float %78, float %83, float 0x3F8354AFC0000000) #21
  %85 = tail call float @__ocml_fmuladd_f32(float %78, float %84, float 0x3FF006DB60000000) #21
  %86 = tail call float @__ocml_fmuladd_f32(float %78, float %85, float 0x4006A9EFC0000000) #21
  br label %87

; <label>:87:                                     ; preds = %72, %27, %4
  %88 = phi float [ %11, %4 ], [ %36, %27 ], [ %86, %72 ]
  %89 = fmul float %2, %88
  %90 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %91 = icmp eq i8 %90, 0
  %92 = fcmp ogt float %2, 1.000000e+00
  %93 = select i1 %92, float 0x7FF8000000000000, float %89
  %94 = fcmp oeq float %2, 1.000000e+00
  %95 = select i1 %94, float 0x7FF0000000000000, float %93
  %96 = select i1 %91, float %95, float %89
  %97 = tail call float @llvm.copysign.f32(float %96, float %0)
  ret float %97
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.rsq.f32(float) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_sinpi_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %3 @__ocmlpriv_trigpired_f64(double %2) #21
  %4 = extractvalue %3 %3, 0
  %5 = extractvalue %3 %3, 1
  %6 = tail call %2 @__ocmlpriv_sincospired_f64(double %4) #21
  %7 = extractvalue %2 %6, 0
  %8 = extractvalue %2 %6, 1
  %9 = and i32 %5, 1
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, double %8, double %7
  %12 = bitcast double %11 to <2 x i32>
  %13 = icmp sgt i32 %5, 1
  %14 = select i1 %13, i32 -2147483648, i32 0
  %15 = bitcast double %0 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i64 1
  %17 = and i32 %16, -2147483648
  %18 = xor i32 %14, %17
  %19 = extractelement <2 x i32> %12, i64 1
  %20 = xor i32 %18, %19
  %21 = insertelement <2 x i32> %12, i32 %20, i64 1
  %22 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %23 = icmp eq i8 %22, 0
  %24 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %25 = and i1 %24, %23
  %26 = select i1 %25, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %21
  %27 = bitcast <2 x i32> %26 to double
  ret double %27
}

; Function Attrs: nounwind readnone
define linkonce_odr protected %3 @__ocmlpriv_trigpired_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, 5.000000e-01
  %3 = tail call double @llvm.amdgcn.fract.f64(double %2)
  %4 = tail call i1 @llvm.amdgcn.class.f64(double %2, i32 516)
  %5 = fmul double %3, 2.000000e+00
  %6 = select i1 %4, double 0.000000e+00, double %5
  %7 = fcmp ogt double %0, 1.000000e+00
  %8 = select i1 %7, double %6, double %0
  %9 = fmul double %8, 2.000000e+00
  %10 = tail call double @llvm.rint.f64(double %9)
  %11 = tail call double @llvm.fma.f64(double %10, double -5.000000e-01, double %8)
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 3
  %14 = insertvalue %3 undef, double %11, 0
  %15 = insertvalue %3 %14, i32 %13, 1
  ret %3 %15
}

; Function Attrs: nounwind readnone
define linkonce_odr protected %2 @__ocmlpriv_sincospired_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, %0
  %3 = tail call double @llvm.fma.f64(double %2, double 0x3F3E357EF99EB0BB, double 0xBF7E2FE76FDFFD2B)
  %4 = tail call double @llvm.fma.f64(double %2, double %3, double 0x3FB50782D5F14825)
  %5 = tail call double @llvm.fma.f64(double %2, double %4, double 0xBFE32D2CCDFE9424)
  %6 = tail call double @llvm.fma.f64(double %2, double %5, double 0x400466BC67754FFF)
  %7 = tail call double @llvm.fma.f64(double %2, double %6, double 0xC014ABBCE625BE09)
  %8 = fmul double %2, %0
  %9 = fmul double %8, %7
  %10 = tail call double @llvm.fma.f64(double %0, double 0x400921FB54442D18, double %9)
  %11 = tail call double @llvm.fma.f64(double %2, double 0xBF1B167302E21C33, double 0x3F5F9C89CA1D4F33)
  %12 = tail call double @llvm.fma.f64(double %2, double %11, double 0xBF9A6D1E7294BFF9)
  %13 = tail call double @llvm.fma.f64(double %2, double %12, double 0x3FCE1F5067B90B37)
  %14 = tail call double @llvm.fma.f64(double %2, double %13, double 0xBFF55D3C7E3C325B)
  %15 = tail call double @llvm.fma.f64(double %2, double %14, double 0x40103C1F081B5A67)
  %16 = tail call double @llvm.fma.f64(double %2, double %15, double 0xC013BD3CC9BE45DE)
  %17 = tail call double @llvm.fma.f64(double %2, double %16, double 1.000000e+00)
  %18 = insertvalue %2 undef, double %17, 0
  %19 = insertvalue %2 %18, double %10, 1
  ret %2 %19
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_expm1_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fadd float %4, -1.000000e+00
  %6 = fptrunc float %5 to half
  %7 = tail call half @llvm.fma.f16(half %0, half 0xH3155, half 0xH3800) #21
  %8 = fmul half %7, %0
  %9 = tail call half @llvm.fma.f16(half %0, half %8, half %0) #21
  %10 = tail call half @llvm.fabs.f16(half %0) #21
  %11 = fcmp olt half %10, 0xH2400
  %12 = select i1 %11, half %9, half %6
  ret half %12
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected half @__ocml_modf_f16(half, half addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = tail call half @llvm.trunc.f16(half %0) #21
  %4 = fsub half %0, %3
  %5 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %6 = select i1 %5, half 0xH0000, half %4
  store half %3, half addrspace(5)* %1, align 2, !tbaa !124
  %7 = tail call half @llvm.copysign.f16(half %6, half %0) #21
  ret half %7
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_fabs_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  ret float %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_sin_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %1 @__ocmlpriv_trigred_f64(double %2) #21
  %4 = extractvalue %1 %3, 0
  %5 = extractvalue %1 %3, 1
  %6 = extractvalue %1 %3, 2
  %7 = tail call %2 @__ocmlpriv_sincosred2_f64(double %5, double %4) #21
  %8 = extractvalue %2 %7, 0
  %9 = extractvalue %2 %7, 1
  %10 = and i32 %6, 1
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, double %8, double %9
  %13 = bitcast double %12 to <2 x i32>
  %14 = icmp sgt i32 %6, 1
  %15 = select i1 %14, i32 -2147483648, i32 0
  %16 = bitcast double %0 to <2 x i32>
  %17 = extractelement <2 x i32> %16, i64 1
  %18 = and i32 %17, -2147483648
  %19 = xor i32 %15, %18
  %20 = extractelement <2 x i32> %13, i64 1
  %21 = xor i32 %19, %20
  %22 = insertelement <2 x i32> %13, i32 %21, i64 1
  %23 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %24 = icmp eq i8 %23, 0
  %25 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %26 = and i1 %25, %24
  %27 = select i1 %26, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %22
  %28 = bitcast <2 x i32> %27 to double
  ret double %28
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_rsqrt_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.rsq.f64(double %0)
  %3 = fmul double %2, %0
  %4 = fsub double -0.000000e+00, %3
  %5 = tail call double @llvm.fma.f64(double %4, double %2, double 1.000000e+00)
  %6 = fmul double %2, %5
  %7 = tail call double @llvm.fma.f64(double %5, double 3.750000e-01, double 5.000000e-01)
  %8 = tail call double @llvm.fma.f64(double %6, double %7, double %2)
  %9 = tail call i1 @llvm.amdgcn.class.f64(double %2, i32 384)
  %10 = select i1 %9, double %8, double %2
  ret double %10
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_copysign_f32(float, float) local_unnamed_addr #29 {
  %3 = tail call float @llvm.copysign.f32(float %0, float %1)
  ret float %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_cbrt_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fpext half %2 to float
  %4 = tail call float @llvm.log2.f32(float %3)
  %5 = fmul float %4, 0x3FD5555560000000
  %6 = tail call float @llvm.exp2.f32(float %5)
  %7 = fptrunc float %6 to half
  %8 = tail call half @llvm.copysign.f16(half %7, half %0) #21
  %9 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 615) #21
  %10 = select i1 %9, half %0, half %8
  ret half %10
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_ldexp_f16(half, i32) local_unnamed_addr #28 {
  %3 = icmp sgt i32 %1, -32768
  %4 = select i1 %3, i32 %1, i32 -32768
  %5 = icmp slt i32 %4, 32767
  %6 = select i1 %5, i32 %4, i32 32767
  %7 = tail call half @llvm.amdgcn.ldexp.f16(half %0, i32 %6) #21
  ret half %7
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.amdgcn.ldexp.f16(half, i32) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_nearbyint_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.rint.f32(float %0)
  ret float %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_erfinv_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_erfinv_f32(float %2) #21
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_fmod_f32(float, float) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  %5 = tail call float @llvm.canonicalize.f32(float %0)
  %6 = tail call float @llvm.canonicalize.f32(float %1)
  %7 = select i1 %4, float %1, float %6
  %8 = select i1 %4, float %0, float %5
  %9 = tail call float @llvm.fabs.f32(float %8)
  %10 = tail call float @llvm.fabs.f32(float %7)
  %11 = fcmp ogt float %9, %10
  br i1 %11, label %12, label %106

; <label>:12:                                     ; preds = %2
  %13 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %9)
  %14 = tail call float @llvm.amdgcn.frexp.mant.f32(float %9)
  %15 = tail call float @llvm.amdgcn.ldexp.f32(float %14, i32 12)
  %16 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %10)
  %17 = add nsw i32 %16, -1
  %18 = tail call float @llvm.amdgcn.frexp.mant.f32(float %10)
  %19 = tail call float @llvm.amdgcn.ldexp.f32(float %18, i32 1)
  %20 = sub i32 %13, %16
  %21 = tail call float @llvm.amdgcn.rcp.f32(float %19)
  %22 = icmp sgt i32 %20, 12
  %23 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  br i1 %22, label %24, label %63

; <label>:24:                                     ; preds = %12
  %25 = icmp sgt i32 %23, 899
  %26 = bitcast float %19 to i32
  %27 = and i32 %26, -4096
  %28 = bitcast i32 %27 to float
  %29 = fsub float %19, %28
  br label %30

; <label>:30:                                     ; preds = %55, %24
  %31 = phi float [ %15, %24 ], [ %60, %55 ]
  %32 = phi i32 [ %20, %24 ], [ %61, %55 ]
  %33 = fmul float %21, %31
  %34 = tail call float @llvm.rint.f32(float %33)
  br i1 %25, label %36, label %35

; <label>:35:                                     ; preds = %30
  switch i32 %23, label %39 [
    i32 801, label %36
    i32 701, label %36
  ]

; <label>:36:                                     ; preds = %35, %35, %30
  %37 = fsub float -0.000000e+00, %34
  %38 = tail call float @llvm.fma.f32(float %37, float %19, float %31) #47
  br label %55

; <label>:39:                                     ; preds = %35
  %40 = bitcast float %34 to i32
  %41 = and i32 %40, -4096
  %42 = bitcast i32 %41 to float
  %43 = fsub float %34, %42
  %44 = fmul float %19, %34
  %45 = fsub float -0.000000e+00, %44
  %46 = tail call float @__ocml_fmuladd_f32(float %42, float %28, float %45) #21
  %47 = tail call float @__ocml_fmuladd_f32(float %42, float %29, float %46) #21
  %48 = tail call float @__ocml_fmuladd_f32(float %43, float %28, float %47) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %43, float %29, float %48) #21
  %50 = fsub float %31, %44
  %51 = fsub float %31, %50
  %52 = fsub float %51, %44
  %53 = fsub float %52, %49
  %54 = fadd float %50, %53
  br label %55

; <label>:55:                                     ; preds = %39, %36
  %56 = phi float [ %38, %36 ], [ %54, %39 ]
  %57 = fcmp olt float %56, 0.000000e+00
  %58 = fadd float %19, %56
  %59 = select i1 %57, float %58, float %56
  %60 = tail call float @llvm.amdgcn.ldexp.f32(float %59, i32 12)
  %61 = add nsw i32 %32, -12
  %62 = icmp sgt i32 %61, 12
  br i1 %62, label %30, label %63

; <label>:63:                                     ; preds = %55, %12
  %64 = phi i32 [ %20, %12 ], [ %61, %55 ]
  %65 = phi float [ %15, %12 ], [ %60, %55 ]
  %66 = add nsw i32 %64, -11
  %67 = tail call float @llvm.amdgcn.ldexp.f32(float %65, i32 %66)
  %68 = fmul float %21, %67
  %69 = tail call float @llvm.rint.f32(float %68)
  %70 = icmp sgt i32 %23, 899
  br i1 %70, label %72, label %71

; <label>:71:                                     ; preds = %63
  switch i32 %23, label %75 [
    i32 801, label %72
    i32 701, label %72
  ]

; <label>:72:                                     ; preds = %71, %71, %63
  %73 = fsub float -0.000000e+00, %69
  %74 = tail call float @llvm.fma.f32(float %73, float %19, float %67) #47
  br label %95

; <label>:75:                                     ; preds = %71
  %76 = bitcast float %69 to i32
  %77 = and i32 %76, -4096
  %78 = bitcast i32 %77 to float
  %79 = fsub float %69, %78
  %80 = bitcast float %19 to i32
  %81 = and i32 %80, -4096
  %82 = bitcast i32 %81 to float
  %83 = fsub float %19, %82
  %84 = fmul float %19, %69
  %85 = fsub float -0.000000e+00, %84
  %86 = tail call float @__ocml_fmuladd_f32(float %78, float %82, float %85) #21
  %87 = tail call float @__ocml_fmuladd_f32(float %78, float %83, float %86) #21
  %88 = tail call float @__ocml_fmuladd_f32(float %79, float %82, float %87) #21
  %89 = tail call float @__ocml_fmuladd_f32(float %79, float %83, float %88) #21
  %90 = fsub float %67, %84
  %91 = fsub float %67, %90
  %92 = fsub float %91, %84
  %93 = fsub float %92, %89
  %94 = fadd float %90, %93
  br label %95

; <label>:95:                                     ; preds = %75, %72
  %96 = phi float [ %74, %72 ], [ %94, %75 ]
  %97 = fcmp olt float %96, 0.000000e+00
  %98 = fadd float %19, %96
  %99 = select i1 %97, float %98, float %96
  %100 = tail call float @llvm.amdgcn.ldexp.f32(float %99, i32 %17)
  %101 = bitcast float %8 to i32
  %102 = and i32 %101, -2147483648
  %103 = bitcast float %100 to i32
  %104 = xor i32 %102, %103
  %105 = bitcast i32 %104 to float
  br label %110

; <label>:106:                                    ; preds = %2
  %107 = fcmp oeq float %9, %10
  %108 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %8)
  %109 = select i1 %107, float %108, float %8
  br label %110

; <label>:110:                                    ; preds = %106, %95
  %111 = phi float [ %105, %95 ], [ %109, %106 ]
  %112 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %113 = icmp eq i8 %112, 0
  %114 = fcmp oeq float %7, 0.000000e+00
  %115 = fcmp uno float %7, 0.000000e+00
  %116 = tail call i1 @llvm.amdgcn.class.f32(float %8, i32 519)
  %117 = or i1 %115, %116
  %118 = or i1 %114, %117
  %119 = and i1 %118, %113
  %120 = select i1 %119, float 0x7FF8000000000000, float %111
  ret float %120
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_trunc_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.trunc.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_log_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = tail call float @llvm.log2.f32(float %2)
  %4 = fmul float %3, 0x3FE62E4300000000
  %5 = fptrunc float %4 to half
  ret half %5
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_sinh_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fadd float %2, 0xBFE62E4300000000
  %4 = fsub float %3, %2
  %5 = fsub float %4, %3
  %6 = fadd float %2, %5
  %7 = fadd float %4, 0x3FE62E4300000000
  %8 = fsub float %6, %7
  %9 = fadd float %8, 0x3E205C6100000000
  %10 = fadd float %3, %9
  %11 = fsub float %10, %3
  %12 = fsub float %9, %11
  %13 = insertelement <2 x float> undef, float %12, i32 0
  %14 = insertelement <2 x float> %13, float %10, i32 1
  %15 = tail call <2 x float> @__ocmlpriv_epexpep_f32(<2 x float> %14) #21
  %16 = extractelement <2 x float> %15, i64 1
  %17 = tail call float @llvm.amdgcn.rcp.f32(float %16) #47
  %18 = fmul float %16, %17
  %19 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %20 = icmp sgt i32 %19, 899
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %1
  %22 = fsub float -0.000000e+00, %18
  %23 = tail call float @llvm.fma.f32(float %17, float %16, float %22) #47
  %24 = insertelement <2 x float> undef, float %23, i32 0
  %25 = insertelement <2 x float> %24, float %18, i32 1
  %26 = extractelement <2 x float> %15, i64 0
  br label %50

; <label>:27:                                     ; preds = %1
  switch i32 %19, label %28 [
    i32 801, label %42
    i32 701, label %42
  ]

; <label>:28:                                     ; preds = %27
  %29 = bitcast float %17 to i32
  %30 = and i32 %29, -4096
  %31 = bitcast i32 %30 to float
  %32 = fsub float %17, %31
  %33 = bitcast float %16 to i32
  %34 = and i32 %33, -4096
  %35 = bitcast i32 %34 to float
  %36 = fsub float %16, %35
  %37 = fsub float -0.000000e+00, %18
  %38 = tail call float @llvm.fmuladd.f32(float %31, float %35, float %37) #47
  %39 = tail call float @llvm.fmuladd.f32(float %31, float %36, float %38) #47
  %40 = tail call float @llvm.fmuladd.f32(float %32, float %35, float %39) #47
  %41 = tail call float @llvm.fmuladd.f32(float %32, float %36, float %40) #47
  br label %45

; <label>:42:                                     ; preds = %27, %27
  %43 = fsub float -0.000000e+00, %18
  %44 = tail call float @llvm.fma.f32(float %17, float %16, float %43) #47
  br label %45

; <label>:45:                                     ; preds = %42, %28
  %46 = phi float [ %44, %42 ], [ %41, %28 ]
  %47 = insertelement <2 x float> undef, float %46, i32 0
  %48 = insertelement <2 x float> %47, float %18, i32 1
  %49 = extractelement <2 x float> %15, i64 0
  switch i32 %19, label %56 [
    i32 801, label %50
    i32 701, label %50
  ]

; <label>:50:                                     ; preds = %45, %45, %21
  %51 = phi float [ %46, %45 ], [ %46, %45 ], [ %23, %21 ]
  %52 = phi float [ %49, %45 ], [ %49, %45 ], [ %26, %21 ]
  %53 = phi <2 x float> [ %48, %45 ], [ %48, %45 ], [ %25, %21 ]
  %54 = tail call float @llvm.fma.f32(float %17, float %52, float %51) #47
  %55 = insertelement <2 x float> %53, float %54, i64 0
  br label %59

; <label>:56:                                     ; preds = %45
  %57 = tail call float @llvm.fmuladd.f32(float %17, float %49, float %46) #47
  %58 = insertelement <2 x float> %48, float %57, i64 0
  br label %59

; <label>:59:                                     ; preds = %56, %50
  %60 = phi float [ %52, %50 ], [ %49, %56 ]
  %61 = phi <2 x float> [ %55, %50 ], [ %58, %56 ]
  %62 = extractelement <2 x float> %61, i64 1
  %63 = extractelement <2 x float> %61, i64 0
  %64 = fadd float %62, %63
  %65 = fsub float %64, %62
  %66 = fsub float %63, %65
  %67 = fsub float 1.000000e+00, %64
  %68 = fsub float 1.000000e+00, %67
  %69 = fsub float %68, %64
  %70 = fsub float %69, %66
  %71 = fadd float %67, %70
  %72 = fsub float %71, %67
  %73 = fsub float %70, %72
  %74 = fmul float %17, %71
  %75 = fmul float %16, %74
  br i1 %20, label %76, label %81

; <label>:76:                                     ; preds = %59
  %77 = fsub float -0.000000e+00, %75
  %78 = tail call float @llvm.fma.f32(float %74, float %16, float %77) #47
  %79 = insertelement <2 x float> undef, float %78, i32 0
  %80 = insertelement <2 x float> %79, float %75, i32 1
  br label %103

; <label>:81:                                     ; preds = %59
  switch i32 %19, label %82 [
    i32 801, label %96
    i32 701, label %96
  ]

; <label>:82:                                     ; preds = %81
  %83 = bitcast float %74 to i32
  %84 = and i32 %83, -4096
  %85 = bitcast i32 %84 to float
  %86 = fsub float %74, %85
  %87 = bitcast float %16 to i32
  %88 = and i32 %87, -4096
  %89 = bitcast i32 %88 to float
  %90 = fsub float %16, %89
  %91 = fsub float -0.000000e+00, %75
  %92 = tail call float @llvm.fmuladd.f32(float %85, float %89, float %91) #47
  %93 = tail call float @llvm.fmuladd.f32(float %85, float %90, float %92) #47
  %94 = tail call float @llvm.fmuladd.f32(float %86, float %89, float %93) #47
  %95 = tail call float @llvm.fmuladd.f32(float %86, float %90, float %94) #47
  br label %99

; <label>:96:                                     ; preds = %81, %81
  %97 = fsub float -0.000000e+00, %75
  %98 = tail call float @llvm.fma.f32(float %74, float %16, float %97) #47
  br label %99

; <label>:99:                                     ; preds = %96, %82
  %100 = phi float [ %98, %96 ], [ %95, %82 ]
  %101 = insertelement <2 x float> undef, float %100, i32 0
  %102 = insertelement <2 x float> %101, float %75, i32 1
  switch i32 %19, label %108 [
    i32 801, label %103
    i32 701, label %103
  ]

; <label>:103:                                    ; preds = %99, %99, %76
  %104 = phi float [ %100, %99 ], [ %100, %99 ], [ %78, %76 ]
  %105 = phi <2 x float> [ %102, %99 ], [ %102, %99 ], [ %80, %76 ]
  %106 = tail call float @llvm.fma.f32(float %74, float %60, float %104) #47
  %107 = insertelement <2 x float> %105, float %106, i64 0
  br label %111

; <label>:108:                                    ; preds = %99
  %109 = tail call float @llvm.fmuladd.f32(float %74, float %60, float %100) #47
  %110 = insertelement <2 x float> %102, float %109, i64 0
  br label %111

; <label>:111:                                    ; preds = %108, %103
  %112 = phi <2 x float> [ %107, %103 ], [ %110, %108 ]
  %113 = extractelement <2 x float> %112, i64 1
  %114 = extractelement <2 x float> %112, i64 0
  %115 = fadd float %113, %114
  %116 = fsub float %115, %113
  %117 = fsub float %114, %116
  %118 = fsub float %71, %115
  %119 = fsub float %71, %118
  %120 = fsub float %119, %115
  %121 = fadd float %73, %120
  %122 = fsub float %121, %117
  %123 = fadd float %118, %122
  %124 = fmul float %17, %123
  %125 = fadd float %17, %74
  %126 = fsub float %125, %17
  %127 = fsub float %74, %126
  %128 = fadd float %127, %124
  %129 = fadd float %125, %128
  %130 = fsub float %129, %125
  %131 = fsub float %128, %130
  %132 = tail call float @llvm.amdgcn.ldexp.f32(float %129, i32 -2) #47
  %133 = tail call float @llvm.amdgcn.ldexp.f32(float %131, i32 -2) #47
  %134 = fsub float %16, %132
  %135 = fsub float %16, %134
  %136 = fsub float %135, %132
  %137 = fadd float %60, %136
  %138 = fsub float %137, %133
  %139 = fadd float %134, %138
  %140 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %141 = icmp eq i8 %140, 0
  %142 = fcmp ogt float %2, 0x40565A9F80000000
  %143 = and i1 %142, %141
  %144 = select i1 %143, float 0x7FF0000000000000, float %139
  %145 = fcmp olt float %2, 0x3F30000000000000
  %146 = select i1 %145, float %2, float %144
  %147 = tail call float @llvm.copysign.f32(float %146, float %0)
  ret float %147
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected float @__ocml_nan_f32(i32) local_unnamed_addr #31 {
  %2 = and i32 %0, 1048575
  %3 = or i32 %2, 2143289344
  %4 = bitcast i32 %3 to float
  ret float %4
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected half @__ocml_frexp_f16(half, i32 addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = tail call signext i16 @llvm.amdgcn.frexp.exp.i16.f16(half %0) #21
  %4 = sext i16 %3 to i32
  %5 = tail call half @llvm.amdgcn.frexp.mant.f16(half %0) #21
  %6 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %7 = select i1 %6, i32 0, i32 %4
  store i32 %7, i32 addrspace(5)* %1, align 4, !tbaa !120
  %8 = select i1 %6, half %0, half %5
  ret half %8
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.amdgcn.frexp.exp.i16.f16(half) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.amdgcn.frexp.mant.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_acosh_f32(float) local_unnamed_addr #28 {
  %2 = fcmp oge float %0, 0x43F0000000000000
  %3 = select i1 %2, float 0x3BF0000000000000, float 1.000000e+00
  %4 = fmul float %3, %0
  %5 = fmul float %4, %4
  %6 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %7 = icmp sgt i32 %6, 899
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %1
  switch i32 %6, label %12 [
    i32 801, label %9
    i32 701, label %9
  ]

; <label>:9:                                      ; preds = %8, %8, %1
  %10 = fsub float -0.000000e+00, %5
  %11 = tail call float @llvm.fma.f32(float %4, float %4, float %10) #47
  br label %22

; <label>:12:                                     ; preds = %8
  %13 = bitcast float %4 to i32
  %14 = and i32 %13, -4096
  %15 = bitcast i32 %14 to float
  %16 = fsub float %4, %15
  %17 = fsub float -0.000000e+00, %5
  %18 = tail call float @llvm.fmuladd.f32(float %15, float %15, float %17) #47
  %19 = fmul float %15, 2.000000e+00
  %20 = tail call float @llvm.fmuladd.f32(float %19, float %16, float %18) #47
  %21 = tail call float @llvm.fmuladd.f32(float %16, float %16, float %20) #47
  br label %22

; <label>:22:                                     ; preds = %12, %9
  %23 = phi float [ %11, %9 ], [ %21, %12 ]
  %24 = select i1 %2, float 0x37F0000000000000, float 1.000000e+00
  %25 = fsub float %5, %24
  %26 = fsub float %25, %5
  %27 = fsub float %25, %26
  %28 = fsub float %5, %27
  %29 = fadd float %24, %26
  %30 = fsub float %28, %29
  %31 = fadd float %23, %30
  %32 = fadd float %25, %31
  %33 = fsub float %32, %25
  %34 = fsub float %31, %33
  %35 = fcmp olt float %32, 0.000000e+00
  %36 = tail call float @llvm.sqrt.f32(float %32) #47
  %37 = select i1 %35, float 0x7FF8000000000000, float %36
  %38 = fmul float %37, %37
  br i1 %7, label %40, label %39

; <label>:39:                                     ; preds = %22
  switch i32 %6, label %43 [
    i32 801, label %40
    i32 701, label %40
  ]

; <label>:40:                                     ; preds = %39, %39, %22
  %41 = fsub float -0.000000e+00, %38
  %42 = tail call float @llvm.fma.f32(float %37, float %37, float %41) #47
  br label %53

; <label>:43:                                     ; preds = %39
  %44 = bitcast float %37 to i32
  %45 = and i32 %44, -4096
  %46 = bitcast i32 %45 to float
  %47 = fsub float %37, %46
  %48 = fsub float -0.000000e+00, %38
  %49 = tail call float @llvm.fmuladd.f32(float %46, float %46, float %48) #47
  %50 = fmul float %46, 2.000000e+00
  %51 = tail call float @llvm.fmuladd.f32(float %50, float %47, float %49) #47
  %52 = tail call float @llvm.fmuladd.f32(float %47, float %47, float %51) #47
  br label %53

; <label>:53:                                     ; preds = %43, %40
  %54 = phi float [ %42, %40 ], [ %52, %43 ]
  %55 = fsub float %32, %38
  %56 = fsub float %32, %55
  %57 = fsub float %56, %38
  %58 = fadd float %34, %57
  %59 = fsub float %58, %54
  %60 = fadd float %55, %59
  %61 = fmul float %37, 2.000000e+00
  %62 = tail call float @llvm.amdgcn.rcp.f32(float %61) #47
  %63 = fmul float %62, %60
  %64 = fadd float %37, %63
  %65 = fsub float %64, %37
  %66 = fsub float %63, %65
  %67 = fadd float %4, %64
  %68 = fsub float %67, %4
  %69 = fsub float %67, %68
  %70 = fsub float %4, %69
  %71 = fsub float %64, %68
  %72 = fadd float %71, %70
  %73 = fadd float %66, %72
  %74 = fadd float %67, %73
  %75 = fsub float %74, %67
  %76 = fsub float %73, %75
  %77 = insertelement <2 x float> undef, float %76, i32 0
  %78 = insertelement <2 x float> %77, float %74, i32 1
  %79 = tail call float @__ocmlpriv_lnep_f32(<2 x float> %78) #21
  %80 = select i1 %2, float 0x40462E4300000000, float 0.000000e+00
  %81 = fadd float %80, %79
  %82 = fcmp oeq float %0, 1.000000e+00
  %83 = select i1 %82, float 0.000000e+00, float %81
  %84 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %85 = icmp eq i8 %84, 0
  %86 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 512)
  %87 = select i1 %86, float %0, float %83
  %88 = fcmp olt float %0, 1.000000e+00
  %89 = select i1 %88, float 0x7FF8000000000000, float %87
  %90 = select i1 %85, float %89, float %83
  ret float %90
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocmlpriv_lnep_f32(<2 x float>) local_unnamed_addr #28 {
  %2 = extractelement <2 x float> %0, i64 1
  %3 = tail call float @llvm.amdgcn.frexp.mant.f32(float %2)
  %4 = fcmp olt float %3, 0x3FE5555560000000
  %5 = zext i1 %4 to i32
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %2)
  %7 = sub nsw i32 %6, %5
  %8 = sub nsw i32 0, %7
  %9 = tail call float @llvm.amdgcn.ldexp.f32(float %2, i32 %8) #47
  %10 = extractelement <2 x float> %0, i64 0
  %11 = tail call float @llvm.amdgcn.ldexp.f32(float %10, i32 %8) #47
  %12 = fadd float %9, -1.000000e+00
  %13 = fsub float %12, %9
  %14 = fsub float %12, %13
  %15 = fsub float %9, %14
  %16 = fadd float %13, 1.000000e+00
  %17 = fsub float %15, %16
  %18 = fadd float %11, %17
  %19 = fadd float %12, %18
  %20 = fsub float %19, %12
  %21 = fsub float %18, %20
  %22 = fadd float %9, 1.000000e+00
  %23 = fsub float %22, %9
  %24 = fsub float %22, %23
  %25 = fsub float %9, %24
  %26 = fsub float 1.000000e+00, %23
  %27 = fadd float %26, %25
  %28 = fadd float %11, %27
  %29 = fadd float %22, %28
  %30 = fsub float %29, %22
  %31 = fsub float %28, %30
  %32 = tail call float @llvm.amdgcn.rcp.f32(float %29) #47
  %33 = fmul float %19, %32
  %34 = fmul float %29, %33
  %35 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %36 = icmp sgt i32 %35, 899
  br i1 %36, label %37, label %42

; <label>:37:                                     ; preds = %1
  %38 = fsub float -0.000000e+00, %34
  %39 = tail call float @llvm.fma.f32(float %33, float %29, float %38) #47
  %40 = insertelement <2 x float> undef, float %39, i32 0
  %41 = insertelement <2 x float> %40, float %34, i32 1
  br label %64

; <label>:42:                                     ; preds = %1
  switch i32 %35, label %43 [
    i32 801, label %57
    i32 701, label %57
  ]

; <label>:43:                                     ; preds = %42
  %44 = bitcast float %33 to i32
  %45 = and i32 %44, -4096
  %46 = bitcast i32 %45 to float
  %47 = fsub float %33, %46
  %48 = bitcast float %29 to i32
  %49 = and i32 %48, -4096
  %50 = bitcast i32 %49 to float
  %51 = fsub float %29, %50
  %52 = fsub float -0.000000e+00, %34
  %53 = tail call float @llvm.fmuladd.f32(float %46, float %50, float %52) #47
  %54 = tail call float @llvm.fmuladd.f32(float %46, float %51, float %53) #47
  %55 = tail call float @llvm.fmuladd.f32(float %47, float %50, float %54) #47
  %56 = tail call float @llvm.fmuladd.f32(float %47, float %51, float %55) #47
  br label %60

; <label>:57:                                     ; preds = %42, %42
  %58 = fsub float -0.000000e+00, %34
  %59 = tail call float @llvm.fma.f32(float %33, float %29, float %58) #47
  br label %60

; <label>:60:                                     ; preds = %57, %43
  %61 = phi float [ %59, %57 ], [ %56, %43 ]
  %62 = insertelement <2 x float> undef, float %61, i32 0
  %63 = insertelement <2 x float> %62, float %34, i32 1
  switch i32 %35, label %69 [
    i32 801, label %64
    i32 701, label %64
  ]

; <label>:64:                                     ; preds = %60, %60, %37
  %65 = phi float [ %61, %60 ], [ %61, %60 ], [ %39, %37 ]
  %66 = phi <2 x float> [ %63, %60 ], [ %63, %60 ], [ %41, %37 ]
  %67 = tail call float @llvm.fma.f32(float %33, float %31, float %65) #47
  %68 = insertelement <2 x float> %66, float %67, i64 0
  br label %72

; <label>:69:                                     ; preds = %60
  %70 = tail call float @llvm.fmuladd.f32(float %33, float %31, float %61) #47
  %71 = insertelement <2 x float> %63, float %70, i64 0
  br label %72

; <label>:72:                                     ; preds = %69, %64
  %73 = phi <2 x float> [ %68, %64 ], [ %71, %69 ]
  %74 = extractelement <2 x float> %73, i64 1
  %75 = extractelement <2 x float> %73, i64 0
  %76 = fadd float %74, %75
  %77 = fsub float %76, %74
  %78 = fsub float %75, %77
  %79 = fsub float %19, %76
  %80 = fsub float %19, %79
  %81 = fsub float %80, %76
  %82 = fadd float %21, %81
  %83 = fsub float %82, %78
  %84 = fadd float %79, %83
  %85 = fsub float %84, %79
  %86 = fsub float %83, %85
  %87 = fmul float %32, %84
  %88 = fmul float %29, %87
  br i1 %36, label %89, label %94

; <label>:89:                                     ; preds = %72
  %90 = fsub float -0.000000e+00, %88
  %91 = tail call float @llvm.fma.f32(float %87, float %29, float %90) #47
  %92 = insertelement <2 x float> undef, float %91, i32 0
  %93 = insertelement <2 x float> %92, float %88, i32 1
  br label %116

; <label>:94:                                     ; preds = %72
  switch i32 %35, label %95 [
    i32 801, label %109
    i32 701, label %109
  ]

; <label>:95:                                     ; preds = %94
  %96 = bitcast float %87 to i32
  %97 = and i32 %96, -4096
  %98 = bitcast i32 %97 to float
  %99 = fsub float %87, %98
  %100 = bitcast float %29 to i32
  %101 = and i32 %100, -4096
  %102 = bitcast i32 %101 to float
  %103 = fsub float %29, %102
  %104 = fsub float -0.000000e+00, %88
  %105 = tail call float @llvm.fmuladd.f32(float %98, float %102, float %104) #47
  %106 = tail call float @llvm.fmuladd.f32(float %98, float %103, float %105) #47
  %107 = tail call float @llvm.fmuladd.f32(float %99, float %102, float %106) #47
  %108 = tail call float @llvm.fmuladd.f32(float %99, float %103, float %107) #47
  br label %112

; <label>:109:                                    ; preds = %94, %94
  %110 = fsub float -0.000000e+00, %88
  %111 = tail call float @llvm.fma.f32(float %87, float %29, float %110) #47
  br label %112

; <label>:112:                                    ; preds = %109, %95
  %113 = phi float [ %111, %109 ], [ %108, %95 ]
  %114 = insertelement <2 x float> undef, float %113, i32 0
  %115 = insertelement <2 x float> %114, float %88, i32 1
  switch i32 %35, label %121 [
    i32 801, label %116
    i32 701, label %116
  ]

; <label>:116:                                    ; preds = %112, %112, %89
  %117 = phi float [ %113, %112 ], [ %113, %112 ], [ %91, %89 ]
  %118 = phi <2 x float> [ %115, %112 ], [ %115, %112 ], [ %93, %89 ]
  %119 = tail call float @llvm.fma.f32(float %87, float %31, float %117) #47
  %120 = insertelement <2 x float> %118, float %119, i64 0
  br label %124

; <label>:121:                                    ; preds = %112
  %122 = tail call float @llvm.fmuladd.f32(float %87, float %31, float %113) #47
  %123 = insertelement <2 x float> %115, float %122, i64 0
  br label %124

; <label>:124:                                    ; preds = %121, %116
  %125 = phi <2 x float> [ %120, %116 ], [ %123, %121 ]
  %126 = extractelement <2 x float> %125, i64 1
  %127 = extractelement <2 x float> %125, i64 0
  %128 = fadd float %126, %127
  %129 = fsub float %128, %126
  %130 = fsub float %127, %129
  %131 = fsub float %84, %128
  %132 = fsub float %84, %131
  %133 = fsub float %132, %128
  %134 = fadd float %86, %133
  %135 = fsub float %134, %130
  %136 = fadd float %131, %135
  %137 = fmul float %32, %136
  %138 = fadd float %33, %87
  %139 = fsub float %138, %33
  %140 = fsub float %87, %139
  %141 = fadd float %140, %137
  %142 = fadd float %138, %141
  %143 = fsub float %142, %138
  %144 = fsub float %141, %143
  %145 = fmul float %142, %142
  br i1 %36, label %146, label %151

; <label>:146:                                    ; preds = %124
  %147 = fsub float -0.000000e+00, %145
  %148 = tail call float @llvm.fma.f32(float %142, float %142, float %147) #47
  %149 = insertelement <2 x float> undef, float %148, i32 0
  %150 = insertelement <2 x float> %149, float %145, i32 1
  br label %169

; <label>:151:                                    ; preds = %124
  switch i32 %35, label %152 [
    i32 801, label %162
    i32 701, label %162
  ]

; <label>:152:                                    ; preds = %151
  %153 = bitcast float %142 to i32
  %154 = and i32 %153, -4096
  %155 = bitcast i32 %154 to float
  %156 = fsub float %142, %155
  %157 = fsub float -0.000000e+00, %145
  %158 = tail call float @llvm.fmuladd.f32(float %155, float %155, float %157) #47
  %159 = fmul float %155, 2.000000e+00
  %160 = tail call float @llvm.fmuladd.f32(float %159, float %156, float %158) #47
  %161 = tail call float @llvm.fmuladd.f32(float %156, float %156, float %160) #47
  br label %165

; <label>:162:                                    ; preds = %151, %151
  %163 = fsub float -0.000000e+00, %145
  %164 = tail call float @llvm.fma.f32(float %142, float %142, float %163) #47
  br label %165

; <label>:165:                                    ; preds = %162, %152
  %166 = phi float [ %164, %162 ], [ %161, %152 ]
  %167 = insertelement <2 x float> undef, float %166, i32 0
  %168 = insertelement <2 x float> %167, float %145, i32 1
  switch i32 %35, label %176 [
    i32 801, label %169
    i32 701, label %169
  ]

; <label>:169:                                    ; preds = %165, %165, %146
  %170 = phi <2 x float> [ %168, %165 ], [ %168, %165 ], [ %150, %146 ]
  %171 = fmul float %144, 2.000000e+00
  %172 = extractelement <2 x float> %170, i64 0
  %173 = tail call float @llvm.fma.f32(float %142, float %171, float %172) #47
  %174 = tail call float @llvm.fma.f32(float %144, float %144, float %173) #47
  %175 = insertelement <2 x float> %170, float %174, i64 0
  br label %181

; <label>:176:                                    ; preds = %165
  %177 = fmul float %142, %144
  %178 = tail call float @llvm.fmuladd.f32(float %177, float 2.000000e+00, float %166) #47
  %179 = tail call float @llvm.fmuladd.f32(float %144, float %144, float %178) #47
  %180 = insertelement <2 x float> %168, float %179, i64 0
  br label %181

; <label>:181:                                    ; preds = %176, %169
  %182 = phi <2 x float> [ %175, %169 ], [ %180, %176 ]
  %183 = extractelement <2 x float> %182, i64 1
  %184 = extractelement <2 x float> %182, i64 0
  %185 = fadd float %183, %184
  %186 = fsub float %185, %183
  %187 = fsub float %184, %186
  %188 = tail call float @__ocml_fmuladd_f32(float %185, float 0x3FCED89C20000000, float 0x3FD23E9880000000) #21
  %189 = tail call float @__ocml_fmuladd_f32(float %185, float %188, float 0x3FD999BDE0000000) #21
  %190 = sitofp i32 %7 to float
  %191 = fmul float %190, 0x3FE62E4300000000
  br i1 %36, label %192, label %197

; <label>:192:                                    ; preds = %181
  %193 = fsub float -0.000000e+00, %191
  %194 = tail call float @llvm.fma.f32(float %190, float 0x3FE62E4300000000, float %193) #47
  %195 = insertelement <2 x float> undef, float %194, i32 0
  %196 = insertelement <2 x float> %195, float %191, i32 1
  br label %215

; <label>:197:                                    ; preds = %181
  switch i32 %35, label %198 [
    i32 801, label %208
    i32 701, label %208
  ]

; <label>:198:                                    ; preds = %197
  %199 = bitcast float %190 to i32
  %200 = and i32 %199, -4096
  %201 = bitcast i32 %200 to float
  %202 = fsub float %190, %201
  %203 = fsub float -0.000000e+00, %191
  %204 = tail call float @llvm.fmuladd.f32(float %201, float 0x3FE62E0000000000, float %203) #47
  %205 = tail call float @llvm.fmuladd.f32(float %202, float 0x3FE62E0000000000, float %204) #47
  %206 = tail call float @llvm.fmuladd.f32(float %201, float 0x3F00C00000000000, float %205) #47
  %207 = tail call float @llvm.fmuladd.f32(float %202, float 0x3F00C00000000000, float %206) #47
  br label %211

; <label>:208:                                    ; preds = %197, %197
  %209 = fsub float -0.000000e+00, %191
  %210 = tail call float @llvm.fma.f32(float %190, float 0x3FE62E4300000000, float %209) #47
  br label %211

; <label>:211:                                    ; preds = %208, %198
  %212 = phi float [ %210, %208 ], [ %207, %198 ]
  %213 = insertelement <2 x float> undef, float %212, i32 0
  %214 = insertelement <2 x float> %213, float %191, i32 1
  switch i32 %35, label %220 [
    i32 801, label %215
    i32 701, label %215
  ]

; <label>:215:                                    ; preds = %211, %211, %192
  %216 = phi float [ %212, %211 ], [ %212, %211 ], [ %194, %192 ]
  %217 = phi <2 x float> [ %214, %211 ], [ %214, %211 ], [ %196, %192 ]
  %218 = tail call float @llvm.fma.f32(float %190, float 0xBE205C6100000000, float %216) #47
  %219 = insertelement <2 x float> %217, float %218, i64 0
  br label %223

; <label>:220:                                    ; preds = %211
  %221 = tail call float @llvm.fmuladd.f32(float %190, float 0xBE205C6100000000, float %212) #47
  %222 = insertelement <2 x float> %214, float %221, i64 0
  br label %223

; <label>:223:                                    ; preds = %220, %215
  %224 = phi <2 x float> [ %219, %215 ], [ %222, %220 ]
  %225 = extractelement <2 x float> %224, i64 1
  %226 = extractelement <2 x float> %224, i64 0
  %227 = fadd float %225, %226
  %228 = fsub float %227, %225
  %229 = fsub float %226, %228
  %230 = tail call float @llvm.amdgcn.ldexp.f32(float %142, i32 1) #47
  %231 = tail call float @llvm.amdgcn.ldexp.f32(float %144, i32 1) #47
  %232 = fmul float %142, %185
  br i1 %36, label %233, label %239

; <label>:233:                                    ; preds = %223
  %234 = fsub float -0.000000e+00, %232
  %235 = tail call float @llvm.fma.f32(float %185, float %142, float %234) #47
  %236 = insertelement <2 x float> undef, float %235, i32 0
  %237 = insertelement <2 x float> %236, float %232, i32 1
  %238 = fmul float %142, %187
  br label %269

; <label>:239:                                    ; preds = %223
  switch i32 %35, label %240 [
    i32 801, label %254
    i32 701, label %254
  ]

; <label>:240:                                    ; preds = %239
  %241 = bitcast float %185 to i32
  %242 = and i32 %241, -4096
  %243 = bitcast i32 %242 to float
  %244 = fsub float %185, %243
  %245 = bitcast float %142 to i32
  %246 = and i32 %245, -4096
  %247 = bitcast i32 %246 to float
  %248 = fsub float %142, %247
  %249 = fsub float -0.000000e+00, %232
  %250 = tail call float @llvm.fmuladd.f32(float %243, float %247, float %249) #47
  %251 = tail call float @llvm.fmuladd.f32(float %243, float %248, float %250) #47
  %252 = tail call float @llvm.fmuladd.f32(float %244, float %247, float %251) #47
  %253 = tail call float @llvm.fmuladd.f32(float %244, float %248, float %252) #47
  br label %257

; <label>:254:                                    ; preds = %239, %239
  %255 = fsub float -0.000000e+00, %232
  %256 = tail call float @llvm.fma.f32(float %185, float %142, float %255) #47
  br label %257

; <label>:257:                                    ; preds = %254, %240
  %258 = phi float [ %256, %254 ], [ %253, %240 ]
  %259 = insertelement <2 x float> undef, float %258, i32 0
  %260 = insertelement <2 x float> %259, float %232, i32 1
  %261 = fmul float %142, %187
  switch i32 %35, label %262 [
    i32 801, label %269
    i32 701, label %269
  ]

; <label>:262:                                    ; preds = %257
  %263 = tail call float @llvm.fmuladd.f32(float %185, float %144, float %261) #47
  %264 = fadd float %263, %258
  %265 = fadd float %232, %264
  %266 = fsub float %265, %232
  %267 = fsub float %264, %266
  %268 = fmul float %185, %189
  br label %285

; <label>:269:                                    ; preds = %257, %257, %233
  %270 = phi float [ %261, %257 ], [ %261, %257 ], [ %238, %233 ]
  %271 = phi <2 x float> [ %260, %257 ], [ %260, %257 ], [ %237, %233 ]
  %272 = tail call float @llvm.fma.f32(float %185, float %144, float %270) #47
  %273 = extractelement <2 x float> %271, i64 0
  %274 = fadd float %272, %273
  %275 = extractelement <2 x float> %271, i64 1
  %276 = fadd float %275, %274
  %277 = fsub float %276, %275
  %278 = fsub float %274, %277
  %279 = fmul float %185, %189
  br i1 %36, label %280, label %285

; <label>:280:                                    ; preds = %269
  %281 = fsub float -0.000000e+00, %279
  %282 = tail call float @llvm.fma.f32(float %185, float %189, float %281) #47
  %283 = insertelement <2 x float> undef, float %282, i32 0
  %284 = insertelement <2 x float> %283, float %279, i32 1
  br label %310

; <label>:285:                                    ; preds = %269, %262
  %286 = phi float [ %268, %262 ], [ %279, %269 ]
  %287 = phi float [ %267, %262 ], [ %278, %269 ]
  %288 = phi float [ %265, %262 ], [ %276, %269 ]
  switch i32 %35, label %289 [
    i32 801, label %303
    i32 701, label %303
  ]

; <label>:289:                                    ; preds = %285
  %290 = bitcast float %185 to i32
  %291 = and i32 %290, -4096
  %292 = bitcast i32 %291 to float
  %293 = fsub float %185, %292
  %294 = bitcast float %189 to i32
  %295 = and i32 %294, -4096
  %296 = bitcast i32 %295 to float
  %297 = fsub float %189, %296
  %298 = fsub float -0.000000e+00, %286
  %299 = tail call float @llvm.fmuladd.f32(float %292, float %296, float %298) #47
  %300 = tail call float @llvm.fmuladd.f32(float %292, float %297, float %299) #47
  %301 = tail call float @llvm.fmuladd.f32(float %293, float %296, float %300) #47
  %302 = tail call float @llvm.fmuladd.f32(float %293, float %297, float %301) #47
  br label %306

; <label>:303:                                    ; preds = %285, %285
  %304 = fsub float -0.000000e+00, %286
  %305 = tail call float @llvm.fma.f32(float %185, float %189, float %304) #47
  br label %306

; <label>:306:                                    ; preds = %303, %289
  %307 = phi float [ %305, %303 ], [ %302, %289 ]
  %308 = insertelement <2 x float> undef, float %307, i32 0
  %309 = insertelement <2 x float> %308, float %286, i32 1
  switch i32 %35, label %317 [
    i32 801, label %310
    i32 701, label %310
  ]

; <label>:310:                                    ; preds = %306, %306, %280
  %311 = phi float [ %287, %306 ], [ %287, %306 ], [ %278, %280 ]
  %312 = phi float [ %288, %306 ], [ %288, %306 ], [ %276, %280 ]
  %313 = phi float [ %307, %306 ], [ %307, %306 ], [ %282, %280 ]
  %314 = phi <2 x float> [ %309, %306 ], [ %309, %306 ], [ %284, %280 ]
  %315 = tail call float @llvm.fma.f32(float %187, float %189, float %313) #47
  %316 = insertelement <2 x float> %314, float %315, i64 0
  br label %320

; <label>:317:                                    ; preds = %306
  %318 = tail call float @llvm.fmuladd.f32(float %187, float %189, float %307) #47
  %319 = insertelement <2 x float> %309, float %318, i64 0
  br label %320

; <label>:320:                                    ; preds = %317, %310
  %321 = phi float [ %311, %310 ], [ %287, %317 ]
  %322 = phi float [ %312, %310 ], [ %288, %317 ]
  %323 = phi <2 x float> [ %316, %310 ], [ %319, %317 ]
  %324 = extractelement <2 x float> %323, i64 1
  %325 = extractelement <2 x float> %323, i64 0
  %326 = fadd float %324, %325
  %327 = fsub float %326, %324
  %328 = fsub float %325, %327
  %329 = fadd float %326, 0x3FE5555540000000
  %330 = fadd float %329, 0xBFE5555540000000
  %331 = fsub float %326, %330
  %332 = fadd float %328, 0x3E2E720200000000
  %333 = fadd float %331, %332
  %334 = fadd float %329, %333
  %335 = fsub float %334, %329
  %336 = fsub float %333, %335
  %337 = fmul float %322, %334
  br i1 %36, label %338, label %344

; <label>:338:                                    ; preds = %320
  %339 = fsub float -0.000000e+00, %337
  %340 = tail call float @llvm.fma.f32(float %322, float %334, float %339) #47
  %341 = insertelement <2 x float> undef, float %340, i32 0
  %342 = insertelement <2 x float> %341, float %337, i32 1
  %343 = fmul float %321, %334
  br label %367

; <label>:344:                                    ; preds = %320
  switch i32 %35, label %345 [
    i32 801, label %359
    i32 701, label %359
  ]

; <label>:345:                                    ; preds = %344
  %346 = bitcast float %322 to i32
  %347 = and i32 %346, -4096
  %348 = bitcast i32 %347 to float
  %349 = fsub float %322, %348
  %350 = bitcast float %334 to i32
  %351 = and i32 %350, -4096
  %352 = bitcast i32 %351 to float
  %353 = fsub float %334, %352
  %354 = fsub float -0.000000e+00, %337
  %355 = tail call float @llvm.fmuladd.f32(float %348, float %352, float %354) #47
  %356 = tail call float @llvm.fmuladd.f32(float %348, float %353, float %355) #47
  %357 = tail call float @llvm.fmuladd.f32(float %349, float %352, float %356) #47
  %358 = tail call float @llvm.fmuladd.f32(float %349, float %353, float %357) #47
  br label %362

; <label>:359:                                    ; preds = %344, %344
  %360 = fsub float -0.000000e+00, %337
  %361 = tail call float @llvm.fma.f32(float %322, float %334, float %360) #47
  br label %362

; <label>:362:                                    ; preds = %359, %345
  %363 = phi float [ %361, %359 ], [ %358, %345 ]
  %364 = insertelement <2 x float> undef, float %363, i32 0
  %365 = insertelement <2 x float> %364, float %337, i32 1
  %366 = fmul float %321, %334
  switch i32 %35, label %371 [
    i32 801, label %367
    i32 701, label %367
  ]

; <label>:367:                                    ; preds = %362, %362, %338
  %368 = phi float [ %366, %362 ], [ %366, %362 ], [ %343, %338 ]
  %369 = phi <2 x float> [ %365, %362 ], [ %365, %362 ], [ %342, %338 ]
  %370 = tail call float @llvm.fma.f32(float %322, float %336, float %368) #47
  br label %373

; <label>:371:                                    ; preds = %362
  %372 = tail call float @llvm.fmuladd.f32(float %322, float %336, float %366) #47
  br label %373

; <label>:373:                                    ; preds = %371, %367
  %374 = phi <2 x float> [ %369, %367 ], [ %365, %371 ]
  %375 = phi float [ %370, %367 ], [ %372, %371 ]
  %376 = extractelement <2 x float> %374, i64 0
  %377 = fadd float %375, %376
  %378 = extractelement <2 x float> %374, i64 1
  %379 = fadd float %378, %377
  %380 = fsub float %379, %378
  %381 = fsub float %377, %380
  %382 = fadd float %230, %379
  %383 = fsub float %382, %230
  %384 = fsub float %379, %383
  %385 = fadd float %231, %381
  %386 = fadd float %384, %385
  %387 = fadd float %382, %386
  %388 = fsub float %387, %382
  %389 = fsub float %386, %388
  %390 = fadd float %227, %387
  %391 = fsub float %390, %227
  %392 = fsub float %390, %391
  %393 = fsub float %227, %392
  %394 = fsub float %387, %391
  %395 = fadd float %394, %393
  %396 = fadd float %229, %389
  %397 = fsub float %396, %229
  %398 = fsub float %396, %397
  %399 = fsub float %229, %398
  %400 = fsub float %389, %397
  %401 = fadd float %400, %399
  %402 = fadd float %396, %395
  %403 = fadd float %390, %402
  %404 = fsub float %403, %390
  %405 = fsub float %402, %404
  %406 = fadd float %401, %405
  %407 = fadd float %403, %406
  ret float %407
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_scalb_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.maxnum.f16(half %1, half 0xHD400) #21
  %4 = tail call half @llvm.minnum.f16(half %3, half 0xH5400) #21
  %5 = tail call half @llvm.rint.f16(half %4) #21
  %6 = fptosi half %5 to i32
  %7 = tail call half @__ocml_ldexp_f16(half %0, i32 %6) #21
  %8 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %21

; <label>:10:                                     ; preds = %2
  %11 = fcmp uno half %0, %1
  %12 = fcmp oeq half %0, 0xH0000
  %13 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 512) #21
  %14 = and i1 %12, %13
  %15 = or i1 %11, %14
  %16 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %17 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 4) #21
  %18 = and i1 %16, %17
  %19 = or i1 %18, %15
  %20 = select i1 %19, half 0xH7E00, half %7
  br label %21

; <label>:21:                                     ; preds = %10, %2
  %22 = phi half [ %7, %2 ], [ %20, %10 ]
  ret half %22
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.minnum.f16(half, half) #25

; Function Attrs: nounwind readnone speculatable
declare half @llvm.rint.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_tan_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  %5 = tail call [2 x i32] @__ocmlpriv_trigred_f32(float %4) #21
  %6 = extractvalue [2 x i32] %5, 0
  %7 = extractvalue [2 x i32] %5, 1
  %8 = bitcast i32 %6 to float
  %9 = and i32 %7, 1
  %10 = tail call float @__ocmlpriv_tanred_f32(float %8, i32 %9) #21
  %11 = bitcast float %10 to i32
  %12 = and i32 %2, -2147483648
  %13 = xor i32 %12, %11
  %14 = bitcast i32 %13 to float
  %15 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %16 = icmp eq i8 %15, 0
  %17 = icmp ugt i32 %3, 2139095039
  %18 = and i1 %17, %16
  %19 = select i1 %18, float 0x7FF8000000000000, float %14
  ret float %19
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_trigred_f32(float) local_unnamed_addr #28 {
  %2 = fcmp olt float %0, 1.310720e+05
  br i1 %2, label %3, label %5

; <label>:3:                                      ; preds = %1
  %4 = tail call [2 x i32] @__ocmlpriv_trigredsmall_f32(float %0) #21
  br label %7

; <label>:5:                                      ; preds = %1
  %6 = tail call [2 x i32] @__ocmlpriv_trigredlarge_f32(float %0) #21
  br label %7

; <label>:7:                                      ; preds = %5, %3
  %8 = phi [2 x i32] [ %6, %5 ], [ %4, %3 ]
  ret [2 x i32] %8
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocmlpriv_tanred_f32(float, i32) local_unnamed_addr #28 {
  %3 = fmul float %0, %0
  %4 = tail call float @__ocml_fmuladd_f32(float %3, float 0xBF919DBA60000000, float 0x3FD8A8B0E0000000) #21
  %5 = tail call float @__ocml_fmuladd_f32(float %3, float 0x3F92E29000000000, float 0xBFE07266E0000000) #21
  %6 = tail call float @__ocml_fmuladd_f32(float %3, float %5, float 0x3FF27E84A0000000) #21
  %7 = fmul float %3, %0
  %8 = tail call float @llvm.amdgcn.rcp.f32(float %6)
  %9 = fmul float %4, %8
  %10 = tail call float @__ocml_fmuladd_f32(float %7, float %9, float %0) #21
  %11 = tail call float @llvm.amdgcn.rcp.f32(float %10)
  %12 = fsub float -0.000000e+00, %11
  %13 = icmp eq i32 %1, 0
  %14 = select i1 %13, float %10, float %12
  ret float %14
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_trigredsmall_f32(float) local_unnamed_addr #28 {
  %2 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %3 = icmp sgt i32 %2, 899
  br i1 %3, label %5, label %4

; <label>:4:                                      ; preds = %1
  switch i32 %2, label %11 [
    i32 801, label %5
    i32 701, label %5
  ]

; <label>:5:                                      ; preds = %4, %4, %1
  %6 = fmul float %0, 0x3FE45F3060000000
  %7 = tail call float @llvm.rint.f32(float %6) #47
  %8 = tail call float @llvm.fma.f32(float %7, float 0xBFF921FB40000000, float %0) #47
  %9 = tail call float @llvm.fma.f32(float %7, float 0xBE74442D00000000, float %8) #47
  %10 = tail call float @llvm.fma.f32(float %7, float 0xBCF8469880000000, float %9) #47
  br label %41

; <label>:11:                                     ; preds = %4
  %12 = fmul float %0, 0x3FE45F3060000000
  %13 = tail call float @llvm.rint.f32(float %12) #47
  %14 = bitcast float %13 to i32
  %15 = and i32 %14, -4096
  %16 = bitcast i32 %15 to float
  %17 = fsub float %13, %16
  %18 = fmul float %13, 0x3FF921FB40000000
  %19 = fsub float -0.000000e+00, %18
  %20 = tail call float @__ocml_fmuladd_f32(float %16, float 0x3FF9200000000000, float %19) #21
  %21 = tail call float @__ocml_fmuladd_f32(float %16, float 0x3F3FB40000000000, float %20) #21
  %22 = tail call float @__ocml_fmuladd_f32(float %17, float 0x3FF9200000000000, float %21) #21
  %23 = tail call float @__ocml_fmuladd_f32(float %17, float 0x3F3FB40000000000, float %22) #21
  %24 = fsub float %0, %18
  %25 = fsub float %0, %24
  %26 = fsub float %25, %18
  %27 = fsub float %26, %23
  %28 = fadd float %24, %27
  %29 = fmul float %13, 0x3E74442D00000000
  %30 = fsub float -0.000000e+00, %29
  %31 = tail call float @__ocml_fmuladd_f32(float %16, float 0x3E74440000000000, float %30) #21
  %32 = tail call float @__ocml_fmuladd_f32(float %16, float 0x3D86800000000000, float %31) #21
  %33 = tail call float @__ocml_fmuladd_f32(float %17, float 0x3E74440000000000, float %32) #21
  %34 = tail call float @__ocml_fmuladd_f32(float %17, float 0x3D86800000000000, float %33) #21
  %35 = fsub float %28, %29
  %36 = fsub float %28, %35
  %37 = fsub float %36, %29
  %38 = fsub float %37, %34
  %39 = fadd float %35, %38
  %40 = tail call float @__ocml_fmuladd_f32(float 0xBCF8469880000000, float %13, float %39) #21
  br label %41

; <label>:41:                                     ; preds = %11, %5
  %42 = phi float [ %10, %5 ], [ %40, %11 ]
  %43 = phi float [ %7, %5 ], [ %13, %11 ]
  %44 = fptosi float %43 to i32
  %45 = bitcast float %42 to i32
  %46 = and i32 %44, 3
  %47 = insertvalue [2 x i32] undef, i32 %45, 0
  %48 = insertvalue [2 x i32] %47, i32 %46, 1
  ret [2 x i32] %48
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_trigredlarge_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = lshr i32 %2, 23
  %4 = and i32 %2, 8388607
  %5 = or i32 %4, 8388608
  %6 = mul i32 %5, -28220501
  %7 = zext i32 %5 to i64
  %8 = mul nuw nsw i64 %7, 4266746795
  %9 = lshr i64 %8, 32
  %10 = trunc i64 %9 to i32
  %11 = mul i32 %5, 1011060801
  %12 = add i32 %11, %10
  %13 = mul nuw nsw i64 %7, 1011060801
  %14 = lshr i64 %13, 32
  %15 = trunc i64 %14 to i32
  %16 = icmp ult i32 %12, %10
  %17 = zext i1 %16 to i32
  %18 = add nuw nsw i32 %17, %15
  %19 = mul i32 %5, -614296167
  %20 = add i32 %18, %19
  %21 = mul nuw nsw i64 %7, 3680671129
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp ult i32 %20, %18
  %25 = zext i1 %24 to i32
  %26 = add nuw nsw i32 %25, %23
  %27 = mul i32 %5, -181084736
  %28 = add i32 %26, %27
  %29 = mul nuw nsw i64 %7, 4113882560
  %30 = lshr i64 %29, 32
  %31 = trunc i64 %30 to i32
  %32 = icmp ult i32 %28, %26
  %33 = zext i1 %32 to i32
  %34 = add nuw nsw i32 %33, %31
  %35 = mul i32 %5, -64530479
  %36 = add i32 %34, %35
  %37 = mul nuw nsw i64 %7, 4230436817
  %38 = lshr i64 %37, 32
  %39 = trunc i64 %38 to i32
  %40 = icmp ult i32 %36, %34
  %41 = zext i1 %40 to i32
  %42 = add nuw nsw i32 %41, %39
  %43 = mul i32 %5, 1313084713
  %44 = add i32 %42, %43
  %45 = mul nuw nsw i64 %7, 1313084713
  %46 = lshr i64 %45, 32
  %47 = trunc i64 %46 to i32
  %48 = icmp ult i32 %44, %42
  %49 = zext i1 %48 to i32
  %50 = add nuw nsw i32 %49, %47
  %51 = mul i32 %5, -1560706194
  %52 = add i32 %50, %51
  %53 = mul nuw nsw i64 %7, 2734261102
  %54 = lshr i64 %53, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp ult i32 %52, %50
  %57 = zext i1 %56 to i32
  %58 = add nuw nsw i32 %57, %55
  %59 = add nsw i32 %3, -120
  %60 = icmp ugt i32 %59, 31
  %61 = select i1 %60, i32 %52, i32 %58
  %62 = select i1 %60, i32 %44, i32 %52
  %63 = select i1 %60, i32 %36, i32 %44
  %64 = select i1 %60, i32 %28, i32 %36
  %65 = select i1 %60, i32 %20, i32 %28
  %66 = select i1 %60, i32 %12, i32 %20
  %67 = select i1 %60, i32 %6, i32 %12
  %68 = select i1 %60, i32 32, i32 0
  %69 = sub nsw i32 %59, %68
  %70 = icmp ugt i32 %69, 31
  %71 = select i1 %70, i32 %62, i32 %61
  %72 = select i1 %70, i32 %63, i32 %62
  %73 = select i1 %70, i32 %64, i32 %63
  %74 = select i1 %70, i32 %65, i32 %64
  %75 = select i1 %70, i32 %66, i32 %65
  %76 = select i1 %70, i32 %67, i32 %66
  %77 = select i1 %70, i32 32, i32 0
  %78 = sub nsw i32 %69, %77
  %79 = icmp ugt i32 %78, 31
  %80 = select i1 %79, i32 %72, i32 %71
  %81 = select i1 %79, i32 %73, i32 %72
  %82 = select i1 %79, i32 %74, i32 %73
  %83 = select i1 %79, i32 %75, i32 %74
  %84 = select i1 %79, i32 %76, i32 %75
  %85 = select i1 %79, i32 32, i32 0
  %86 = sub nsw i32 %78, %85
  %87 = icmp ugt i32 %86, 31
  %88 = select i1 %87, i32 %81, i32 %80
  %89 = select i1 %87, i32 %82, i32 %81
  %90 = select i1 %87, i32 %83, i32 %82
  %91 = select i1 %87, i32 %84, i32 %83
  %92 = select i1 %87, i32 32, i32 0
  %93 = sub nsw i32 %86, %92
  %94 = icmp ne i32 %93, 0
  %95 = sub nsw i32 32, %93
  %96 = tail call i32 @llvm.amdgcn.alignbit(i32 %88, i32 %89, i32 %95) #21
  %97 = tail call i32 @llvm.amdgcn.alignbit(i32 %89, i32 %90, i32 %95) #21
  %98 = tail call i32 @llvm.amdgcn.alignbit(i32 %90, i32 %91, i32 %95) #21
  %99 = select i1 %94, i32 %96, i32 %88
  %100 = select i1 %94, i32 %97, i32 %89
  %101 = select i1 %94, i32 %98, i32 %90
  %102 = lshr i32 %99, 29
  %103 = tail call i32 @llvm.amdgcn.alignbit(i32 %99, i32 %100, i32 30) #21
  %104 = tail call i32 @llvm.amdgcn.alignbit(i32 %100, i32 %101, i32 30) #21
  %105 = tail call i32 @llvm.amdgcn.alignbit(i32 %101, i32 %91, i32 30) #21
  %106 = and i32 %102, 1
  %107 = shl i32 %102, 31
  %108 = ashr exact i32 %107, 31
  %109 = xor i32 %108, %103
  %110 = xor i32 %108, %104
  %111 = xor i32 %108, %105
  %112 = tail call i32 @llvm.ctlz.i32(i32 %109, i1 false), !range !143
  %113 = sub nsw i32 31, %112
  %114 = tail call i32 @llvm.amdgcn.alignbit(i32 %109, i32 %110, i32 %113) #21
  %115 = tail call i32 @llvm.amdgcn.alignbit(i32 %110, i32 %111, i32 %113) #21
  %116 = shl nuw nsw i32 %112, 23
  %117 = sub nsw i32 1056964608, %116
  %118 = or i32 %117, %107
  %119 = lshr i32 %114, 9
  %120 = or i32 %118, %119
  %121 = bitcast i32 %120 to float
  %122 = tail call i32 @llvm.amdgcn.alignbit(i32 %114, i32 %115, i32 9) #21
  %123 = tail call i32 @llvm.ctlz.i32(i32 %122, i1 false), !range !143
  %124 = sub nsw i32 31, %123
  %125 = tail call i32 @llvm.amdgcn.alignbit(i32 %122, i32 %115, i32 %124) #21
  %126 = add nuw nsw i32 %123, %112
  %127 = shl nuw nsw i32 %126, 23
  %128 = sub nsw i32 855638016, %127
  %129 = or i32 %128, %107
  %130 = lshr i32 %125, 9
  %131 = or i32 %129, %130
  %132 = bitcast i32 %131 to float
  %133 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %134 = icmp sgt i32 %133, 899
  br i1 %134, label %136, label %135

; <label>:135:                                    ; preds = %1
  switch i32 %133, label %142 [
    i32 801, label %136
    i32 701, label %136
  ]

; <label>:136:                                    ; preds = %135, %135, %1
  %137 = fmul float %121, 0x3FF921FB40000000
  %138 = fsub float -0.000000e+00, %137
  %139 = tail call float @llvm.fma.f32(float %121, float 0x3FF921FB40000000, float %138)
  %140 = tail call float @llvm.fma.f32(float %121, float 0x3E74442D00000000, float %139)
  %141 = tail call float @llvm.fma.f32(float %132, float 0x3FF921FB40000000, float %140)
  br label %155

; <label>:142:                                    ; preds = %135
  %143 = and i32 %120, -1073745920
  %144 = bitcast i32 %143 to float
  %145 = fsub float %121, %144
  %146 = fmul float %121, 0x3FF921FB40000000
  %147 = fsub float -0.000000e+00, %146
  %148 = tail call float @__ocml_fmuladd_f32(float %144, float 0x3FF9200000000000, float %147) #21
  %149 = tail call float @__ocml_fmuladd_f32(float %144, float 0x3F3FB40000000000, float %148) #21
  %150 = tail call float @__ocml_fmuladd_f32(float %145, float 0x3FF9200000000000, float %149) #21
  %151 = tail call float @__ocml_fmuladd_f32(float %145, float 0x3F3FB40000000000, float %150) #21
  %152 = fmul float %121, 0x3E74442D00000000
  %153 = tail call float @__ocml_fmuladd_f32(float %132, float 0x3FF921FB40000000, float %152) #21
  %154 = fadd float %151, %153
  br label %155

; <label>:155:                                    ; preds = %142, %136
  %156 = phi float [ %141, %136 ], [ %154, %142 ]
  %157 = phi float [ %137, %136 ], [ %146, %142 ]
  %158 = fadd float %156, %157
  %159 = bitcast float %158 to i32
  %160 = lshr i32 %99, 30
  %161 = add nuw nsw i32 %106, %160
  %162 = and i32 %161, 3
  %163 = insertvalue [2 x i32] undef, i32 %159, 0
  %164 = insertvalue [2 x i32] %163, i32 %162, 1
  ret [2 x i32] %164
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.alignbit(i32, i32, i32) #25

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocml_isinf_f16(half) local_unnamed_addr #28 {
  %2 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_exp_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fptrunc float %4 to half
  ret half %5
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_erfcinv_f64(double) local_unnamed_addr #28 {
  %2 = fcmp ogt double %0, 6.250000e-01
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = fsub double 1.000000e+00, %0
  %5 = tail call double @__ocml_erfinv_f64(double %4) #21
  br label %154

; <label>:6:                                      ; preds = %1
  %7 = fcmp ogt double %0, 0x3F50000000000000
  br i1 %7, label %8, label %37

; <label>:8:                                      ; preds = %6
  %9 = fsub double 2.000000e+00, %0
  %10 = fmul double %9, %0
  %11 = tail call double @__ocml_log_f64(double %10) #21
  %12 = fsub double -3.125000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %12, double 0x3BA1267A785A1166, double 0xBC0A6581051DD484)
  %14 = tail call double @llvm.fma.f64(double %12, double %13, double 0x3C32B2956FC047A4)
  %15 = tail call double @llvm.fma.f64(double %12, double %14, double 0x3C6AD835AED5CC07)
  %16 = tail call double @llvm.fma.f64(double %12, double %15, double 0xBCA25E0612EAE68F)
  %17 = tail call double @llvm.fma.f64(double %12, double %16, double 0x3C6A0CAB63F02A91)
  %18 = tail call double @llvm.fma.f64(double %12, double %17, double 0x3CFD9227AF501ADB)
  %19 = tail call double @llvm.fma.f64(double %12, double %18, double 0xBD26C3AD559A9B4E)
  %20 = tail call double @llvm.fma.f64(double %12, double %19, double 0xBD36CAFA36036318)
  %21 = tail call double @llvm.fma.f64(double %12, double %20, double 0x3D872879641E158F)
  %22 = tail call double @llvm.fma.f64(double %12, double %21, double 0xBDAC89D755F7FFF8)
  %23 = tail call double @llvm.fma.f64(double %12, double %22, double 0xBDCDC51171DDAE3A)
  %24 = tail call double @llvm.fma.f64(double %12, double %23, double 0x3E120F512744AE65)
  %25 = tail call double @llvm.fma.f64(double %12, double %24, double 0xBE31A9E5F4BCFCD8)
  %26 = tail call double @llvm.fma.f64(double %12, double %25, double 0xBE5F36CE926B83E8)
  %27 = tail call double @llvm.fma.f64(double %12, double %26, double 0x3E9C6B4F6C7CFA1E)
  %28 = tail call double @llvm.fma.f64(double %12, double %27, double 0xBEB6E8A53E0C2026)
  %29 = tail call double @llvm.fma.f64(double %12, double %28, double 0xBEED1D1F7BF4570B)
  %30 = tail call double @llvm.fma.f64(double %12, double %29, double 0x3F2879C2A20CC3E2)
  %31 = tail call double @llvm.fma.f64(double %12, double %30, double 0xBF48457694844D14)
  %32 = tail call double @llvm.fma.f64(double %12, double %31, double 0xBF78B6C33114EDAD)
  %33 = tail call double @llvm.fma.f64(double %12, double %32, double 0x3FCEBD80D9B13E14)
  %34 = tail call double @llvm.fma.f64(double %12, double %33, double 0x3FFA755E7C99AE86)
  %35 = fsub double -0.000000e+00, %0
  %36 = tail call double @llvm.fma.f64(double %35, double %34, double %34)
  br label %154

; <label>:37:                                     ; preds = %6
  %38 = tail call double @__ocml_log_f64(double %0) #21
  %39 = fcmp ogt double %38, 0x9000000000000000
  %40 = select i1 %39, double 0x4FF0000000000000, double 1.000000e+00
  %41 = fmul double %38, %40
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.amdgcn.rsq.f64(double %42)
  %44 = fmul double %43, %42
  %45 = fmul double %43, 5.000000e-01
  %46 = fsub double -0.000000e+00, %45
  %47 = tail call double @llvm.fma.f64(double %46, double %44, double 5.000000e-01)
  %48 = tail call double @llvm.fma.f64(double %45, double %47, double %45)
  %49 = tail call double @llvm.fma.f64(double %44, double %47, double %44)
  %50 = fsub double -0.000000e+00, %49
  %51 = tail call double @llvm.fma.f64(double %50, double %49, double %42)
  %52 = tail call double @llvm.fma.f64(double %51, double %48, double %49)
  %53 = fsub double -0.000000e+00, %52
  %54 = tail call double @llvm.fma.f64(double %53, double %52, double %42)
  %55 = tail call double @llvm.fma.f64(double %54, double %48, double %52)
  %56 = select i1 %39, double 0x37F0000000000000, double 1.000000e+00
  %57 = fmul double %56, %55
  %58 = fcmp oeq double %41, -0.000000e+00
  %59 = fcmp oeq double %41, 0xFFF0000000000000
  %60 = or i1 %58, %59
  %61 = select i1 %60, double %42, double %57
  %62 = fdiv double 1.000000e+00, %61
  %63 = fcmp ogt double %0, 0x3EC0000000000000
  br i1 %63, label %64, label %76

; <label>:64:                                     ; preds = %37
  %65 = tail call double @llvm.fma.f64(double %62, double 0x4038B3CFC98A5212, double 0xC05907BCDAB54A4E)
  %66 = tail call double @llvm.fma.f64(double %62, double %65, double 0x4067659CF8216D7D)
  %67 = tail call double @llvm.fma.f64(double %62, double %66, double 0xC06AC222777F664D)
  %68 = tail call double @llvm.fma.f64(double %62, double %67, double 0x4064F2F8E33151AC)
  %69 = tail call double @llvm.fma.f64(double %62, double %68, double 0xC057D7D1EB301C4C)
  %70 = tail call double @llvm.fma.f64(double %62, double %69, double 0x40448E630C1C77E7)
  %71 = tail call double @llvm.fma.f64(double %62, double %70, double 0xC02C63E7D0E327F6)
  %72 = tail call double @llvm.fma.f64(double %62, double %71, double 0x401225B286AEB0DF)
  %73 = tail call double @llvm.fma.f64(double %62, double %72, double 0xBFF82A4ACC22B05D)
  %74 = tail call double @llvm.fma.f64(double %62, double %73, double 0xBFA0A88271680E57)
  %75 = tail call double @llvm.fma.f64(double %62, double %74, double 0x3FF001F6ACEBB122)
  br label %151

; <label>:76:                                     ; preds = %37
  %77 = fcmp ogt double %0, 0x3D70000000000000
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %76
  %79 = tail call double @llvm.fma.f64(double %62, double 0x4080FDCB40BF066D, double 0xC09870DDEAA832DB)
  %80 = tail call double @llvm.fma.f64(double %62, double %79, double 0x40A035C39E0428C4)
  %81 = tail call double @llvm.fma.f64(double %62, double %80, double 0xC09A4D3C54A3EC14)
  %82 = tail call double @llvm.fma.f64(double %62, double %81, double 0x408D382AEE6EFAE8)
  %83 = tail call double @llvm.fma.f64(double %62, double %82, double 0xC0779F9E26565BC1)
  %84 = tail call double @llvm.fma.f64(double %62, double %83, double 0x405D00E058CE9ABA)
  %85 = tail call double @llvm.fma.f64(double %62, double %84, double 0xC03C7D1E01821EB3)
  %86 = tail call double @llvm.fma.f64(double %62, double %85, double 0x4019D930BA7A3111)
  %87 = tail call double @llvm.fma.f64(double %62, double %86, double 0xBFFAF47941DD2BAA)
  %88 = tail call double @llvm.fma.f64(double %62, double %87, double 0xBF9787ECC823998B)
  %89 = tail call double @llvm.fma.f64(double %62, double %88, double 0x3FF000FAE5FB73E3)
  br label %151

; <label>:90:                                     ; preds = %76
  %91 = fcmp ogt double %0, 0x3AD0000000000000
  br i1 %91, label %92, label %104

; <label>:92:                                     ; preds = %90
  %93 = tail call double @llvm.fma.f64(double %62, double 0x40CC9E5B8E31C18E, double 0xC0DC866153B1BCE6)
  %94 = tail call double @llvm.fma.f64(double %62, double %93, double 0x40DA386B3B4FB25C)
  %95 = tail call double @llvm.fma.f64(double %62, double %94, double 0xC0CD7BF378E7B5FB)
  %96 = tail call double @llvm.fma.f64(double %62, double %95, double 0x40B6B416DE0A7A75)
  %97 = tail call double @llvm.fma.f64(double %62, double %96, double 0xC099757C1CF44E90)
  %98 = tail call double @llvm.fma.f64(double %62, double %97, double 0x4075B56EDEDBAA8C)
  %99 = tail call double @llvm.fma.f64(double %62, double %98, double 0xC04DA79924B4D155)
  %100 = tail call double @llvm.fma.f64(double %62, double %99, double 0x4022BA25315D612B)
  %101 = tail call double @llvm.fma.f64(double %62, double %100, double 0xBFFDE5808FBD786D)
  %102 = tail call double @llvm.fma.f64(double %62, double %101, double 0xBF904E014B9FC507)
  %103 = tail call double @llvm.fma.f64(double %62, double %102, double 0x3FF000788DF1C89F)
  br label %151

; <label>:104:                                    ; preds = %90
  %105 = fcmp ogt double %0, 0x3370000000000000
  br i1 %105, label %106, label %118

; <label>:106:                                    ; preds = %104
  %107 = tail call double @llvm.fma.f64(double %62, double 0x411FF518AAE00301, double 0xC125781EF98C6AA9)
  %108 = tail call double @llvm.fma.f64(double %62, double %107, double 0x411A9511B21C7715)
  %109 = tail call double @llvm.fma.f64(double %62, double %108, double 0xC1041D8F1455B21E)
  %110 = tail call double @llvm.fma.f64(double %62, double %109, double 0x40E4D4A3D4025A4C)
  %111 = tail call double @llvm.fma.f64(double %62, double %110, double 0xC0BF640FE7077996)
  %112 = tail call double @llvm.fma.f64(double %62, double %111, double 0x4091FAF674F42181)
  %113 = tail call double @llvm.fma.f64(double %62, double %112, double 0xC06080C5CD81D791)
  %114 = tail call double @llvm.fma.f64(double %62, double %113, double 0x402C0AE370098EF4)
  %115 = tail call double @llvm.fma.f64(double %62, double %114, double 0xC0008EBD67DC005A)
  %116 = tail call double @llvm.fma.f64(double %62, double %115, double 0xBF85CF3329E72289)
  %117 = tail call double @llvm.fma.f64(double %62, double %116, double 0x3FF00035E75F27E2)
  br label %151

; <label>:118:                                    ; preds = %104
  %119 = fcmp ogt double %0, 0x26F0000000000000
  br i1 %119, label %120, label %131

; <label>:120:                                    ; preds = %118
  %121 = tail call double @llvm.fma.f64(double %62, double 0xC13D554F00BF9D81, double 0x4138456711FF3627)
  %122 = tail call double @llvm.fma.f64(double %62, double %121, double 0xC1226C90ACC5DAAF)
  %123 = tail call double @llvm.fma.f64(double %62, double %122, double 0x410106501CDEF815)
  %124 = tail call double @llvm.fma.f64(double %62, double %123, double 0xC0D57A4C95601C04)
  %125 = tail call double @llvm.fma.f64(double %62, double %124, double 0x40A3CA627CBAEDE6)
  %126 = tail call double @llvm.fma.f64(double %62, double %125, double 0xC06C716E091922FB)
  %127 = tail call double @llvm.fma.f64(double %62, double %126, double 0x403292F8F6E8BC75)
  %128 = tail call double @llvm.fma.f64(double %62, double %127, double 0xC001B469C212BD5F)
  %129 = tail call double @llvm.fma.f64(double %62, double %128, double 0xBF804977FB6D0462)
  %130 = tail call double @llvm.fma.f64(double %62, double %129, double 0x3FF0001DC9F52F8A)
  br label %151

; <label>:131:                                    ; preds = %118
  %132 = fcmp ogt double %0, 0x7B0000000000000
  br i1 %132, label %133, label %144

; <label>:133:                                    ; preds = %131
  %134 = tail call double @llvm.fma.f64(double %62, double 0xC1821913925F3A73, double 0x4174AA2FBA282B9B)
  %135 = tail call double @llvm.fma.f64(double %62, double %134, double 0xC155A2A3F9742896)
  %136 = tail call double @llvm.fma.f64(double %62, double %135, double 0x412B8EE3895772E8)
  %137 = tail call double @llvm.fma.f64(double %62, double %136, double 0xC0F7F2CE0B036BE4)
  %138 = tail call double @llvm.fma.f64(double %62, double %137, double 0x40BE62AB1BCBB738)
  %139 = tail call double @llvm.fma.f64(double %62, double %138, double 0xC07E0ED2965D2A06)
  %140 = tail call double @llvm.fma.f64(double %62, double %139, double 0x403B0C16705263E5)
  %141 = tail call double @llvm.fma.f64(double %62, double %140, double 0xC00334F9A732ECC7)
  %142 = tail call double @llvm.fma.f64(double %62, double %141, double 0xBF765F60412F9578)
  %143 = tail call double @llvm.fma.f64(double %62, double %142, double 0x3FF0000E0BDA43B5)
  br label %151

; <label>:144:                                    ; preds = %131
  %145 = tail call double @llvm.fma.f64(double %62, double 0xC0AE3D70F1FDC7BE, double 0x40928D9ACD5B9596)
  %146 = tail call double @llvm.fma.f64(double %62, double %145, double 0xC06554C1CE591414)
  %147 = tail call double @llvm.fma.f64(double %62, double %146, double 0x40315B1E5A1FE7F5)
  %148 = tail call double @llvm.fma.f64(double %62, double %147, double 0xC001AA8E6F616C69)
  %149 = tail call double @llvm.fma.f64(double %62, double %148, double 0xBF7F6803B3B4D6CC)
  %150 = tail call double @llvm.fma.f64(double %62, double %149, double 0x3FF00019AC5BED2A)
  br label %151

; <label>:151:                                    ; preds = %144, %133, %120, %106, %92, %78, %64
  %152 = phi double [ %75, %64 ], [ %89, %78 ], [ %103, %92 ], [ %117, %106 ], [ %130, %120 ], [ %143, %133 ], [ %150, %144 ]
  %153 = fmul double %61, %152
  br label %154

; <label>:154:                                    ; preds = %151, %8, %3
  %155 = phi double [ %5, %3 ], [ %36, %8 ], [ %153, %151 ]
  %156 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %167

; <label>:158:                                    ; preds = %154
  %159 = fcmp olt double %0, 0.000000e+00
  %160 = fcmp ogt double %0, 2.000000e+00
  %161 = or i1 %159, %160
  %162 = select i1 %161, double 0x7FF8000000000000, double %155
  %163 = fcmp oeq double %0, 0.000000e+00
  %164 = select i1 %163, double 0x7FF0000000000000, double %162
  %165 = fcmp oeq double %0, 2.000000e+00
  %166 = select i1 %165, double 0xFFF0000000000000, double %164
  br label %167

; <label>:167:                                    ; preds = %158, %154
  %168 = phi double [ %155, %154 ], [ %166, %158 ]
  ret double %168
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_rcbrt_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fpext half %2 to float
  %4 = tail call float @llvm.log2.f32(float %3)
  %5 = fmul float %4, 0xBFD5555560000000
  %6 = tail call float @llvm.exp2.f32(float %5)
  %7 = fptrunc float %6 to half
  %8 = tail call half @llvm.amdgcn.rcp.f16(half %0) #21
  %9 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 615) #21
  %10 = select i1 %9, half %8, half %7
  %11 = tail call half @llvm.copysign.f16(half %10, half %0) #21
  ret half %11
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_cos_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  %5 = tail call [2 x i32] @__ocmlpriv_trigred_f32(float %4) #21
  %6 = extractvalue [2 x i32] %5, 0
  %7 = extractvalue [2 x i32] %5, 1
  %8 = bitcast i32 %6 to float
  %9 = tail call [2 x i32] @__ocmlpriv_sincosred_f32(float %8) #21
  %10 = extractvalue [2 x i32] %9, 0
  %11 = extractvalue [2 x i32] %9, 1
  %12 = bitcast i32 %10 to float
  %13 = fsub float -0.000000e+00, %12
  %14 = and i32 %7, 1
  %15 = icmp eq i32 %14, 0
  %16 = bitcast float %13 to i32
  %17 = select i1 %15, i32 %11, i32 %16
  %18 = icmp sgt i32 %7, 1
  %19 = select i1 %18, i32 -2147483648, i32 0
  %20 = xor i32 %17, %19
  %21 = bitcast i32 %20 to float
  %22 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %23 = icmp eq i8 %22, 0
  %24 = icmp ugt i32 %3, 2139095039
  %25 = and i1 %24, %23
  %26 = select i1 %25, float 0x7FF8000000000000, float %21
  ret float %26
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected [2 x i32] @__ocmlpriv_sincosred_f32(float) local_unnamed_addr #28 {
  %2 = fmul float %0, %0
  %3 = tail call float @__ocml_fmuladd_f32(float %2, float 0xBF29833040000000, float 0x3F81103880000000) #21
  %4 = tail call float @__ocml_fmuladd_f32(float %2, float %3, float 0xBFC55553A0000000) #21
  %5 = fmul float %2, %4
  %6 = tail call float @__ocml_fmuladd_f32(float %0, float %5, float %0) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %2, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %2, float %7, float 0x3FA5557EE0000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %2, float %8, float 0xBFE0000080000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %2, float %9, float 1.000000e+00) #21
  %11 = bitcast float %10 to i32
  %12 = bitcast float %6 to i32
  %13 = insertvalue [2 x i32] undef, i32 %12, 0
  %14 = insertvalue [2 x i32] %13, i32 %11, 1
  ret [2 x i32] %14
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_asin_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = tail call float @__ocml_fmuladd_f32(float %2, float -5.000000e-01, float 5.000000e-01) #21
  %4 = fmul float %0, %0
  %5 = fcmp oge float %2, 5.000000e-01
  %6 = select i1 %5, float %3, float %4
  %7 = tail call float @__ocml_fmuladd_f32(float %6, float 0x3FA38434E0000000, float 0x3F8BF8BB40000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %6, float %7, float 0x3FA0698780000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %6, float %8, float 0x3FA6C83620000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %6, float %9, float 0x3FB3337900000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %6, float %10, float 0x3FC5555580000000) #21
  %12 = fmul float %6, %11
  %13 = fcmp olt float %6, 0.000000e+00
  %14 = tail call float @llvm.sqrt.f32(float %6)
  %15 = select i1 %13, float 0x7FF8000000000000, float %14
  %16 = tail call float @__ocml_fmuladd_f32(float %15, float %12, float %15) #21
  %17 = fmul float %16, -2.000000e+00
  %18 = tail call float @__ocml_fmuladd_f32(float 0x3FEDDCB020000000, float 0x3FFAEE9D60000000, float %17) #21
  %19 = tail call float @__ocml_fmuladd_f32(float %2, float %12, float %2) #21
  %20 = fcmp olt float %2, 5.000000e-01
  %21 = select i1 %20, float %19, float %18
  %22 = tail call float @llvm.copysign.f32(float %21, float %0)
  ret float %22
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_tgamma_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fcmp ogt float %2, 0x3F899999A0000000
  br i1 %3, label %4, label %56

; <label>:4:                                      ; preds = %1
  %5 = fcmp olt float %0, 1.000000e+00
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %4
  %7 = fadd float %2, 3.000000e+00
  %8 = tail call float @__ocml_fmuladd_f32(float %7, float %2, float 2.000000e+00) #21
  %9 = fmul float %2, %8
  br label %19

; <label>:10:                                     ; preds = %4
  %11 = fcmp olt float %2, 2.000000e+00
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %10
  %13 = tail call float @__ocml_fmuladd_f32(float %2, float %2, float %2) #21
  %14 = fadd float %2, 2.000000e+00
  br label %19

; <label>:15:                                     ; preds = %10
  %16 = fcmp olt float %2, 3.000000e+00
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %15
  %18 = fadd float %2, 1.000000e+00
  br label %19

; <label>:19:                                     ; preds = %17, %15, %12, %6
  %20 = phi float [ %9, %6 ], [ %13, %12 ], [ %2, %17 ], [ 1.000000e+00, %15 ]
  %21 = phi float [ %7, %6 ], [ %14, %12 ], [ %18, %17 ], [ %2, %15 ]
  %22 = tail call float @__ocml_fmuladd_f32(float %21, float 5.000000e-01, float -2.500000e-01) #21
  %23 = tail call float @__ocml_powr_f32(float %21, float %22) #21
  %24 = fsub float -0.000000e+00, %21
  %25 = tail call float @__ocml_exp_f32(float %24) #21
  %26 = tail call float @llvm.amdgcn.rcp.f32(float %21)
  %27 = tail call float @__ocml_fmuladd_f32(float %26, float 0xBF65F72680000000, float 0x3F6C71C720000000) #21
  %28 = tail call float @__ocml_fmuladd_f32(float %26, float %27, float 0x3FB5555560000000) #21
  %29 = fmul float %26, %28
  %30 = fcmp ogt float %0, 0.000000e+00
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %19
  %32 = fmul float %25, 0x40040D9320000000
  %33 = fmul float %23, %32
  %34 = fmul float %23, %33
  %35 = tail call float @llvm.amdgcn.rcp.f32(float %20)
  %36 = fmul float %35, %34
  %37 = tail call float @__ocml_fmuladd_f32(float %36, float %29, float %36) #21
  %38 = fcmp ogt float %0, 0x40418521E0000000
  %39 = select i1 %38, float 0x7FF0000000000000, float %37
  br label %69

; <label>:40:                                     ; preds = %19
  %41 = tail call float @__ocml_sinpi_f32(float %0) #21
  %42 = fmul float %41, %0
  %43 = fmul float %25, %42
  %44 = fmul float %23, %43
  %45 = fmul float %23, %44
  %46 = fmul float %20, 0xBFF40D9320000000
  %47 = tail call float @__ocml_fmuladd_f32(float %45, float %29, float %45) #21
  %48 = fdiv float %46, %47, !fpmath !142
  %49 = fcmp olt float %0, -4.200000e+01
  %50 = select i1 %49, float 0.000000e+00, float %48
  %51 = tail call float @llvm.amdgcn.fract.f32(float %0)
  %52 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %53 = select i1 %52, float 0.000000e+00, float %51
  %54 = fcmp oeq float %53, 0.000000e+00
  %55 = select i1 %54, float 0x7FF8000000000000, float %50
  br label %69

; <label>:56:                                     ; preds = %1
  %57 = tail call float @__ocml_fmuladd_f32(float %2, float 0x3FEEA48A80000000, float 0xBFED0887E0000000) #21
  %58 = tail call float @__ocml_fmuladd_f32(float %2, float %57, float 0x3FEFA657C0000000) #21
  %59 = tail call float @__ocml_fmuladd_f32(float %2, float %58, float 0xBFE2788D00000000) #21
  %60 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 448)
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %56
  %62 = fdiv float 1.000000e+00, %2, !fpmath !142
  %63 = fadd float %62, %59
  br label %69

; <label>:64:                                     ; preds = %56
  %65 = tail call float @__ocml_fmuladd_f32(float %2, float %59, float 1.000000e+00) #21
  %66 = tail call float @__ocml_sinpi_f32(float %0) #21
  %67 = fmul float %65, %66
  %68 = fdiv float 0x400921FB60000000, %67, !fpmath !142
  br label %69

; <label>:69:                                     ; preds = %64, %61, %40, %31
  %70 = phi float [ %39, %31 ], [ %55, %40 ], [ %63, %61 ], [ %68, %64 ]
  ret float %70
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_powr_f32(float, float) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  %5 = tail call float @llvm.canonicalize.f32(float %0)
  %6 = select i1 %4, float %0, float %5
  %7 = tail call float @llvm.fabs.f32(float %6)
  %8 = tail call <2 x float> @__ocmlpriv_epln_f32(float %7) #21
  %9 = extractelement <2 x float> %8, i64 1
  %10 = fmul float %9, %1
  %11 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %12 = icmp sgt i32 %11, 899
  br i1 %12, label %13, label %19

; <label>:13:                                     ; preds = %2
  %14 = fsub float -0.000000e+00, %10
  %15 = tail call float @llvm.fma.f32(float %1, float %9, float %14) #47
  %16 = insertelement <2 x float> undef, float %15, i32 0
  %17 = insertelement <2 x float> %16, float %10, i32 1
  %18 = extractelement <2 x float> %8, i64 0
  br label %42

; <label>:19:                                     ; preds = %2
  switch i32 %11, label %20 [
    i32 801, label %34
    i32 701, label %34
  ]

; <label>:20:                                     ; preds = %19
  %21 = bitcast float %1 to i32
  %22 = and i32 %21, -4096
  %23 = bitcast i32 %22 to float
  %24 = fsub float %1, %23
  %25 = bitcast float %9 to i32
  %26 = and i32 %25, -4096
  %27 = bitcast i32 %26 to float
  %28 = fsub float %9, %27
  %29 = fsub float -0.000000e+00, %10
  %30 = tail call float @llvm.fmuladd.f32(float %23, float %27, float %29) #47
  %31 = tail call float @llvm.fmuladd.f32(float %23, float %28, float %30) #47
  %32 = tail call float @llvm.fmuladd.f32(float %24, float %27, float %31) #47
  %33 = tail call float @llvm.fmuladd.f32(float %24, float %28, float %32) #47
  br label %37

; <label>:34:                                     ; preds = %19, %19
  %35 = fsub float -0.000000e+00, %10
  %36 = tail call float @llvm.fma.f32(float %1, float %9, float %35) #47
  br label %37

; <label>:37:                                     ; preds = %34, %20
  %38 = phi float [ %36, %34 ], [ %33, %20 ]
  %39 = insertelement <2 x float> undef, float %38, i32 0
  %40 = insertelement <2 x float> %39, float %10, i32 1
  %41 = extractelement <2 x float> %8, i64 0
  switch i32 %11, label %48 [
    i32 801, label %42
    i32 701, label %42
  ]

; <label>:42:                                     ; preds = %37, %37, %13
  %43 = phi float [ %38, %37 ], [ %38, %37 ], [ %15, %13 ]
  %44 = phi float [ %41, %37 ], [ %41, %37 ], [ %18, %13 ]
  %45 = phi <2 x float> [ %40, %37 ], [ %40, %37 ], [ %17, %13 ]
  %46 = tail call float @llvm.fma.f32(float %1, float %44, float %43) #47
  %47 = insertelement <2 x float> %45, float %46, i64 0
  br label %51

; <label>:48:                                     ; preds = %37
  %49 = tail call float @llvm.fmuladd.f32(float %1, float %41, float %38) #47
  %50 = insertelement <2 x float> %40, float %49, i64 0
  br label %51

; <label>:51:                                     ; preds = %48, %42
  %52 = phi <2 x float> [ %47, %42 ], [ %50, %48 ]
  %53 = extractelement <2 x float> %52, i64 1
  %54 = extractelement <2 x float> %52, i64 0
  %55 = fadd float %53, %54
  %56 = fsub float %55, %53
  %57 = fsub float %54, %56
  %58 = tail call i1 @llvm.amdgcn.class.f32(float %53, i32 516) #47
  %59 = select i1 %58, float %53, float %55
  %60 = tail call i1 @llvm.amdgcn.class.f32(float %59, i32 516) #47
  %61 = select i1 %60, float 0.000000e+00, float %57
  %62 = insertelement <2 x float> undef, float %61, i32 0
  %63 = insertelement <2 x float> %62, float %59, i32 1
  %64 = tail call float @__ocmlpriv_expep_f32(<2 x float> %63) #21
  %65 = tail call float @llvm.fabs.f32(float %1)
  %66 = tail call float @llvm.trunc.f32(float %65)
  %67 = fcmp oeq float %65, %66
  %68 = zext i1 %67 to i32
  %69 = fmul float %66, 5.000000e-01
  %70 = tail call float @llvm.amdgcn.fract.f32(float %69)
  %71 = tail call i1 @llvm.amdgcn.class.f32(float %69, i32 516)
  %72 = select i1 %71, float 0.000000e+00, float %70
  %73 = fcmp oeq float %72, 0.000000e+00
  %74 = and i1 %67, %73
  %75 = zext i1 %74 to i32
  %76 = add nuw nsw i32 %75, %68
  %77 = icmp eq i32 %76, 1
  %78 = fcmp olt float %6, 0.000000e+00
  %79 = and i1 %77, %78
  %80 = select i1 %79, float -0.000000e+00, float 0.000000e+00
  %81 = tail call float @llvm.copysign.f32(float %64, float %80)
  %82 = fcmp oeq float %6, 0.000000e+00
  %83 = fcmp oeq float %7, 1.000000e+00
  %84 = fcmp oeq float %1, 0.000000e+00
  %85 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 960)
  %86 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %134

; <label>:88:                                     ; preds = %51
  %89 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 384)
  %90 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 512)
  %91 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 4)
  %92 = fcmp uno float %65, 0.000000e+00
  %93 = tail call i1 @llvm.amdgcn.class.f32(float %65, i32 512)
  %94 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 960)
  %95 = fcmp uno float %6, 0.000000e+00
  %96 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 512)
  %97 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 384)
  %98 = fcmp ogt float %7, 1.000000e+00
  %99 = fcmp olt float %7, 1.000000e+00
  %100 = fcmp une float %6, 0.000000e+00
  %101 = and i1 %91, %99
  %102 = select i1 %101, float 0x7FF0000000000000, float %81
  %103 = and i1 %90, %99
  %104 = select i1 %103, float 0.000000e+00, float %102
  %105 = and i1 %89, %83
  %106 = select i1 %105, float 1.000000e+00, float %104
  %107 = and i1 %93, %83
  %108 = select i1 %107, float 0x7FF8000000000000, float %106
  %109 = and i1 %91, %98
  %110 = select i1 %109, float 0.000000e+00, float %108
  %111 = and i1 %90, %98
  %112 = select i1 %111, float 0x7FF0000000000000, float %110
  %113 = and i1 %84, %97
  %114 = select i1 %113, float 1.000000e+00, float %112
  %115 = xor i1 %85, true
  %116 = and i1 %96, %115
  %117 = select i1 %116, float 0.000000e+00, float %114
  %118 = or i1 %90, %85
  %119 = and i1 %118, %96
  %120 = select i1 %119, float 0x7FF0000000000000, float %117
  %121 = and i1 %84, %96
  %122 = select i1 %121, float 0x7FF8000000000000, float %120
  %123 = and i1 %82, %115
  %124 = select i1 %123, float 0x7FF0000000000000, float %122
  %125 = and i1 %85, %82
  %126 = select i1 %125, float 0.000000e+00, float %124
  %127 = and i1 %84, %82
  %128 = xor i1 %94, true
  %129 = and i1 %100, %128
  %130 = or i1 %129, %127
  %131 = select i1 %130, float 0x7FF8000000000000, float %126
  %132 = select i1 %95, float %6, float %131
  %133 = select i1 %92, float %1, float %132
  br label %139

; <label>:134:                                    ; preds = %51
  %135 = or i1 %84, %83
  %136 = select i1 %135, float 1.000000e+00, float %81
  %137 = and i1 %85, %82
  %138 = select i1 %137, float 0.000000e+00, float %136
  br label %139

; <label>:139:                                    ; preds = %134, %88
  %140 = phi float [ %138, %134 ], [ %133, %88 ]
  ret float %140
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected <2 x float> @__ocmlpriv_epln_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.amdgcn.frexp.mant.f32(float %0)
  %3 = fcmp olt float %2, 0x3FE5555560000000
  %4 = zext i1 %3 to i32
  %5 = tail call float @llvm.amdgcn.ldexp.f32(float %2, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %0)
  %7 = sub nsw i32 %6, %4
  %8 = fadd float %5, -1.000000e+00
  %9 = fadd float %5, 1.000000e+00
  %10 = fsub float %9, %5
  %11 = fsub float %9, %10
  %12 = fsub float %5, %11
  %13 = fsub float 1.000000e+00, %10
  %14 = fadd float %13, %12
  %15 = tail call float @llvm.amdgcn.rcp.f32(float %9) #47
  %16 = fmul float %8, %15
  %17 = fmul float %9, %16
  %18 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %19 = icmp sgt i32 %18, 899
  br i1 %19, label %20, label %25

; <label>:20:                                     ; preds = %1
  %21 = fsub float -0.000000e+00, %17
  %22 = tail call float @llvm.fma.f32(float %16, float %9, float %21) #47
  %23 = insertelement <2 x float> undef, float %22, i32 0
  %24 = insertelement <2 x float> %23, float %17, i32 1
  br label %47

; <label>:25:                                     ; preds = %1
  switch i32 %18, label %26 [
    i32 801, label %40
    i32 701, label %40
  ]

; <label>:26:                                     ; preds = %25
  %27 = bitcast float %16 to i32
  %28 = and i32 %27, -4096
  %29 = bitcast i32 %28 to float
  %30 = fsub float %16, %29
  %31 = bitcast float %9 to i32
  %32 = and i32 %31, -4096
  %33 = bitcast i32 %32 to float
  %34 = fsub float %9, %33
  %35 = fsub float -0.000000e+00, %17
  %36 = tail call float @llvm.fmuladd.f32(float %29, float %33, float %35) #47
  %37 = tail call float @llvm.fmuladd.f32(float %29, float %34, float %36) #47
  %38 = tail call float @llvm.fmuladd.f32(float %30, float %33, float %37) #47
  %39 = tail call float @llvm.fmuladd.f32(float %30, float %34, float %38) #47
  br label %43

; <label>:40:                                     ; preds = %25, %25
  %41 = fsub float -0.000000e+00, %17
  %42 = tail call float @llvm.fma.f32(float %16, float %9, float %41) #47
  br label %43

; <label>:43:                                     ; preds = %40, %26
  %44 = phi float [ %42, %40 ], [ %39, %26 ]
  %45 = insertelement <2 x float> undef, float %44, i32 0
  %46 = insertelement <2 x float> %45, float %17, i32 1
  switch i32 %18, label %52 [
    i32 801, label %47
    i32 701, label %47
  ]

; <label>:47:                                     ; preds = %43, %43, %20
  %48 = phi float [ %44, %43 ], [ %44, %43 ], [ %22, %20 ]
  %49 = phi <2 x float> [ %46, %43 ], [ %46, %43 ], [ %24, %20 ]
  %50 = tail call float @llvm.fma.f32(float %16, float %14, float %48) #47
  %51 = insertelement <2 x float> %49, float %50, i64 0
  br label %55

; <label>:52:                                     ; preds = %43
  %53 = tail call float @llvm.fmuladd.f32(float %16, float %14, float %44) #47
  %54 = insertelement <2 x float> %46, float %53, i64 0
  br label %55

; <label>:55:                                     ; preds = %52, %47
  %56 = phi <2 x float> [ %51, %47 ], [ %54, %52 ]
  %57 = extractelement <2 x float> %56, i64 1
  %58 = extractelement <2 x float> %56, i64 0
  %59 = fadd float %57, %58
  %60 = fsub float %59, %57
  %61 = fsub float %58, %60
  %62 = fsub float %8, %59
  %63 = fsub float %8, %62
  %64 = fsub float %63, %59
  %65 = fsub float %64, %61
  %66 = fadd float %62, %65
  %67 = fmul float %15, %66
  %68 = fadd float %16, %67
  %69 = fsub float %68, %16
  %70 = fsub float %67, %69
  %71 = fmul float %68, %68
  br i1 %19, label %72, label %77

; <label>:72:                                     ; preds = %55
  %73 = fsub float -0.000000e+00, %71
  %74 = tail call float @llvm.fma.f32(float %68, float %68, float %73) #47
  %75 = insertelement <2 x float> undef, float %74, i32 0
  %76 = insertelement <2 x float> %75, float %71, i32 1
  br label %95

; <label>:77:                                     ; preds = %55
  switch i32 %18, label %78 [
    i32 801, label %88
    i32 701, label %88
  ]

; <label>:78:                                     ; preds = %77
  %79 = bitcast float %68 to i32
  %80 = and i32 %79, -4096
  %81 = bitcast i32 %80 to float
  %82 = fsub float %68, %81
  %83 = fsub float -0.000000e+00, %71
  %84 = tail call float @llvm.fmuladd.f32(float %81, float %81, float %83) #47
  %85 = fmul float %81, 2.000000e+00
  %86 = tail call float @llvm.fmuladd.f32(float %85, float %82, float %84) #47
  %87 = tail call float @llvm.fmuladd.f32(float %82, float %82, float %86) #47
  br label %91

; <label>:88:                                     ; preds = %77, %77
  %89 = fsub float -0.000000e+00, %71
  %90 = tail call float @llvm.fma.f32(float %68, float %68, float %89) #47
  br label %91

; <label>:91:                                     ; preds = %88, %78
  %92 = phi float [ %90, %88 ], [ %87, %78 ]
  %93 = insertelement <2 x float> undef, float %92, i32 0
  %94 = insertelement <2 x float> %93, float %71, i32 1
  switch i32 %18, label %102 [
    i32 801, label %95
    i32 701, label %95
  ]

; <label>:95:                                     ; preds = %91, %91, %72
  %96 = phi <2 x float> [ %94, %91 ], [ %94, %91 ], [ %76, %72 ]
  %97 = fmul float %70, 2.000000e+00
  %98 = extractelement <2 x float> %96, i64 0
  %99 = tail call float @llvm.fma.f32(float %68, float %97, float %98) #47
  %100 = tail call float @llvm.fma.f32(float %70, float %70, float %99) #47
  %101 = insertelement <2 x float> %96, float %100, i64 0
  br label %107

; <label>:102:                                    ; preds = %91
  %103 = fmul float %68, %70
  %104 = tail call float @llvm.fmuladd.f32(float %103, float 2.000000e+00, float %92) #47
  %105 = tail call float @llvm.fmuladd.f32(float %70, float %70, float %104) #47
  %106 = insertelement <2 x float> %94, float %105, i64 0
  br label %107

; <label>:107:                                    ; preds = %102, %95
  %108 = phi <2 x float> [ %101, %95 ], [ %106, %102 ]
  %109 = extractelement <2 x float> %108, i64 1
  %110 = extractelement <2 x float> %108, i64 0
  %111 = fadd float %109, %110
  %112 = fsub float %111, %109
  %113 = fsub float %110, %112
  %114 = tail call float @__ocml_fmuladd_f32(float %111, float 0x3FCED89C20000000, float 0x3FD23E9880000000) #21
  %115 = tail call float @__ocml_fmuladd_f32(float %111, float %114, float 0x3FD999BDE0000000) #21
  %116 = sitofp i32 %7 to float
  %117 = fmul float %116, 0x3FE62E4300000000
  br i1 %19, label %118, label %123

; <label>:118:                                    ; preds = %107
  %119 = fsub float -0.000000e+00, %117
  %120 = tail call float @llvm.fma.f32(float %116, float 0x3FE62E4300000000, float %119) #47
  %121 = insertelement <2 x float> undef, float %120, i32 0
  %122 = insertelement <2 x float> %121, float %117, i32 1
  br label %141

; <label>:123:                                    ; preds = %107
  switch i32 %18, label %124 [
    i32 801, label %134
    i32 701, label %134
  ]

; <label>:124:                                    ; preds = %123
  %125 = bitcast float %116 to i32
  %126 = and i32 %125, -4096
  %127 = bitcast i32 %126 to float
  %128 = fsub float %116, %127
  %129 = fsub float -0.000000e+00, %117
  %130 = tail call float @llvm.fmuladd.f32(float %127, float 0x3FE62E0000000000, float %129) #47
  %131 = tail call float @llvm.fmuladd.f32(float %128, float 0x3FE62E0000000000, float %130) #47
  %132 = tail call float @llvm.fmuladd.f32(float %127, float 0x3F00C00000000000, float %131) #47
  %133 = tail call float @llvm.fmuladd.f32(float %128, float 0x3F00C00000000000, float %132) #47
  br label %137

; <label>:134:                                    ; preds = %123, %123
  %135 = fsub float -0.000000e+00, %117
  %136 = tail call float @llvm.fma.f32(float %116, float 0x3FE62E4300000000, float %135) #47
  br label %137

; <label>:137:                                    ; preds = %134, %124
  %138 = phi float [ %136, %134 ], [ %133, %124 ]
  %139 = insertelement <2 x float> undef, float %138, i32 0
  %140 = insertelement <2 x float> %139, float %117, i32 1
  switch i32 %18, label %146 [
    i32 801, label %141
    i32 701, label %141
  ]

; <label>:141:                                    ; preds = %137, %137, %118
  %142 = phi float [ %138, %137 ], [ %138, %137 ], [ %120, %118 ]
  %143 = phi <2 x float> [ %140, %137 ], [ %140, %137 ], [ %122, %118 ]
  %144 = tail call float @llvm.fma.f32(float %116, float 0xBE205C6100000000, float %142) #47
  %145 = insertelement <2 x float> %143, float %144, i64 0
  br label %149

; <label>:146:                                    ; preds = %137
  %147 = tail call float @llvm.fmuladd.f32(float %116, float 0xBE205C6100000000, float %138) #47
  %148 = insertelement <2 x float> %140, float %147, i64 0
  br label %149

; <label>:149:                                    ; preds = %146, %141
  %150 = phi <2 x float> [ %145, %141 ], [ %148, %146 ]
  %151 = extractelement <2 x float> %150, i64 1
  %152 = extractelement <2 x float> %150, i64 0
  %153 = fadd float %151, %152
  %154 = fsub float %153, %151
  %155 = fsub float %152, %154
  %156 = tail call float @llvm.amdgcn.ldexp.f32(float %68, i32 1) #47
  %157 = tail call float @llvm.amdgcn.ldexp.f32(float %70, i32 1) #47
  %158 = fmul float %68, %111
  br i1 %19, label %159, label %165

; <label>:159:                                    ; preds = %149
  %160 = fsub float -0.000000e+00, %158
  %161 = tail call float @llvm.fma.f32(float %111, float %68, float %160) #47
  %162 = insertelement <2 x float> undef, float %161, i32 0
  %163 = insertelement <2 x float> %162, float %158, i32 1
  %164 = fmul float %68, %113
  br label %195

; <label>:165:                                    ; preds = %149
  switch i32 %18, label %166 [
    i32 801, label %180
    i32 701, label %180
  ]

; <label>:166:                                    ; preds = %165
  %167 = bitcast float %111 to i32
  %168 = and i32 %167, -4096
  %169 = bitcast i32 %168 to float
  %170 = fsub float %111, %169
  %171 = bitcast float %68 to i32
  %172 = and i32 %171, -4096
  %173 = bitcast i32 %172 to float
  %174 = fsub float %68, %173
  %175 = fsub float -0.000000e+00, %158
  %176 = tail call float @llvm.fmuladd.f32(float %169, float %173, float %175) #47
  %177 = tail call float @llvm.fmuladd.f32(float %169, float %174, float %176) #47
  %178 = tail call float @llvm.fmuladd.f32(float %170, float %173, float %177) #47
  %179 = tail call float @llvm.fmuladd.f32(float %170, float %174, float %178) #47
  br label %183

; <label>:180:                                    ; preds = %165, %165
  %181 = fsub float -0.000000e+00, %158
  %182 = tail call float @llvm.fma.f32(float %111, float %68, float %181) #47
  br label %183

; <label>:183:                                    ; preds = %180, %166
  %184 = phi float [ %182, %180 ], [ %179, %166 ]
  %185 = insertelement <2 x float> undef, float %184, i32 0
  %186 = insertelement <2 x float> %185, float %158, i32 1
  %187 = fmul float %68, %113
  switch i32 %18, label %188 [
    i32 801, label %195
    i32 701, label %195
  ]

; <label>:188:                                    ; preds = %183
  %189 = tail call float @llvm.fmuladd.f32(float %111, float %70, float %187) #47
  %190 = fadd float %189, %184
  %191 = fadd float %158, %190
  %192 = fsub float %191, %158
  %193 = fsub float %190, %192
  %194 = fmul float %111, %115
  br label %211

; <label>:195:                                    ; preds = %183, %183, %159
  %196 = phi float [ %187, %183 ], [ %187, %183 ], [ %164, %159 ]
  %197 = phi <2 x float> [ %186, %183 ], [ %186, %183 ], [ %163, %159 ]
  %198 = tail call float @llvm.fma.f32(float %111, float %70, float %196) #47
  %199 = extractelement <2 x float> %197, i64 0
  %200 = fadd float %198, %199
  %201 = extractelement <2 x float> %197, i64 1
  %202 = fadd float %201, %200
  %203 = fsub float %202, %201
  %204 = fsub float %200, %203
  %205 = fmul float %111, %115
  br i1 %19, label %206, label %211

; <label>:206:                                    ; preds = %195
  %207 = fsub float -0.000000e+00, %205
  %208 = tail call float @llvm.fma.f32(float %111, float %115, float %207) #47
  %209 = insertelement <2 x float> undef, float %208, i32 0
  %210 = insertelement <2 x float> %209, float %205, i32 1
  br label %236

; <label>:211:                                    ; preds = %195, %188
  %212 = phi float [ %194, %188 ], [ %205, %195 ]
  %213 = phi float [ %193, %188 ], [ %204, %195 ]
  %214 = phi float [ %191, %188 ], [ %202, %195 ]
  switch i32 %18, label %215 [
    i32 801, label %229
    i32 701, label %229
  ]

; <label>:215:                                    ; preds = %211
  %216 = bitcast float %111 to i32
  %217 = and i32 %216, -4096
  %218 = bitcast i32 %217 to float
  %219 = fsub float %111, %218
  %220 = bitcast float %115 to i32
  %221 = and i32 %220, -4096
  %222 = bitcast i32 %221 to float
  %223 = fsub float %115, %222
  %224 = fsub float -0.000000e+00, %212
  %225 = tail call float @llvm.fmuladd.f32(float %218, float %222, float %224) #47
  %226 = tail call float @llvm.fmuladd.f32(float %218, float %223, float %225) #47
  %227 = tail call float @llvm.fmuladd.f32(float %219, float %222, float %226) #47
  %228 = tail call float @llvm.fmuladd.f32(float %219, float %223, float %227) #47
  br label %232

; <label>:229:                                    ; preds = %211, %211
  %230 = fsub float -0.000000e+00, %212
  %231 = tail call float @llvm.fma.f32(float %111, float %115, float %230) #47
  br label %232

; <label>:232:                                    ; preds = %229, %215
  %233 = phi float [ %231, %229 ], [ %228, %215 ]
  %234 = insertelement <2 x float> undef, float %233, i32 0
  %235 = insertelement <2 x float> %234, float %212, i32 1
  switch i32 %18, label %243 [
    i32 801, label %236
    i32 701, label %236
  ]

; <label>:236:                                    ; preds = %232, %232, %206
  %237 = phi float [ %213, %232 ], [ %213, %232 ], [ %204, %206 ]
  %238 = phi float [ %214, %232 ], [ %214, %232 ], [ %202, %206 ]
  %239 = phi float [ %233, %232 ], [ %233, %232 ], [ %208, %206 ]
  %240 = phi <2 x float> [ %235, %232 ], [ %235, %232 ], [ %210, %206 ]
  %241 = tail call float @llvm.fma.f32(float %113, float %115, float %239) #47
  %242 = insertelement <2 x float> %240, float %241, i64 0
  br label %246

; <label>:243:                                    ; preds = %232
  %244 = tail call float @llvm.fmuladd.f32(float %113, float %115, float %233) #47
  %245 = insertelement <2 x float> %235, float %244, i64 0
  br label %246

; <label>:246:                                    ; preds = %243, %236
  %247 = phi float [ %237, %236 ], [ %213, %243 ]
  %248 = phi float [ %238, %236 ], [ %214, %243 ]
  %249 = phi <2 x float> [ %242, %236 ], [ %245, %243 ]
  %250 = extractelement <2 x float> %249, i64 1
  %251 = extractelement <2 x float> %249, i64 0
  %252 = fadd float %250, %251
  %253 = fsub float %252, %250
  %254 = fsub float %251, %253
  %255 = fadd float %252, 0x3FE5555540000000
  %256 = fadd float %255, 0xBFE5555540000000
  %257 = fsub float %252, %256
  %258 = fadd float %254, 0x3E2E720200000000
  %259 = fadd float %257, %258
  %260 = fadd float %255, %259
  %261 = fsub float %260, %255
  %262 = fsub float %259, %261
  %263 = fmul float %248, %260
  br i1 %19, label %264, label %270

; <label>:264:                                    ; preds = %246
  %265 = fsub float -0.000000e+00, %263
  %266 = tail call float @llvm.fma.f32(float %248, float %260, float %265) #47
  %267 = insertelement <2 x float> undef, float %266, i32 0
  %268 = insertelement <2 x float> %267, float %263, i32 1
  %269 = fmul float %247, %260
  br label %293

; <label>:270:                                    ; preds = %246
  switch i32 %18, label %271 [
    i32 801, label %285
    i32 701, label %285
  ]

; <label>:271:                                    ; preds = %270
  %272 = bitcast float %248 to i32
  %273 = and i32 %272, -4096
  %274 = bitcast i32 %273 to float
  %275 = fsub float %248, %274
  %276 = bitcast float %260 to i32
  %277 = and i32 %276, -4096
  %278 = bitcast i32 %277 to float
  %279 = fsub float %260, %278
  %280 = fsub float -0.000000e+00, %263
  %281 = tail call float @llvm.fmuladd.f32(float %274, float %278, float %280) #47
  %282 = tail call float @llvm.fmuladd.f32(float %274, float %279, float %281) #47
  %283 = tail call float @llvm.fmuladd.f32(float %275, float %278, float %282) #47
  %284 = tail call float @llvm.fmuladd.f32(float %275, float %279, float %283) #47
  br label %288

; <label>:285:                                    ; preds = %270, %270
  %286 = fsub float -0.000000e+00, %263
  %287 = tail call float @llvm.fma.f32(float %248, float %260, float %286) #47
  br label %288

; <label>:288:                                    ; preds = %285, %271
  %289 = phi float [ %287, %285 ], [ %284, %271 ]
  %290 = insertelement <2 x float> undef, float %289, i32 0
  %291 = insertelement <2 x float> %290, float %263, i32 1
  %292 = fmul float %247, %260
  switch i32 %18, label %297 [
    i32 801, label %293
    i32 701, label %293
  ]

; <label>:293:                                    ; preds = %288, %288, %264
  %294 = phi float [ %292, %288 ], [ %292, %288 ], [ %269, %264 ]
  %295 = phi <2 x float> [ %291, %288 ], [ %291, %288 ], [ %268, %264 ]
  %296 = tail call float @llvm.fma.f32(float %248, float %262, float %294) #47
  br label %299

; <label>:297:                                    ; preds = %288
  %298 = tail call float @llvm.fmuladd.f32(float %248, float %262, float %292) #47
  br label %299

; <label>:299:                                    ; preds = %297, %293
  %300 = phi <2 x float> [ %295, %293 ], [ %291, %297 ]
  %301 = phi float [ %296, %293 ], [ %298, %297 ]
  %302 = extractelement <2 x float> %300, i64 0
  %303 = fadd float %301, %302
  %304 = extractelement <2 x float> %300, i64 1
  %305 = fadd float %304, %303
  %306 = fsub float %305, %304
  %307 = fsub float %303, %306
  %308 = fadd float %156, %305
  %309 = fsub float %308, %156
  %310 = fsub float %305, %309
  %311 = fadd float %157, %307
  %312 = fadd float %310, %311
  %313 = fadd float %308, %312
  %314 = fsub float %313, %308
  %315 = fsub float %312, %314
  %316 = fadd float %153, %313
  %317 = fsub float %316, %153
  %318 = fsub float %316, %317
  %319 = fsub float %153, %318
  %320 = fsub float %313, %317
  %321 = fadd float %320, %319
  %322 = fadd float %155, %315
  %323 = fsub float %322, %155
  %324 = fsub float %322, %323
  %325 = fsub float %155, %324
  %326 = fsub float %315, %323
  %327 = fadd float %326, %325
  %328 = fadd float %322, %321
  %329 = fadd float %316, %328
  %330 = fsub float %329, %316
  %331 = fsub float %328, %330
  %332 = fadd float %327, %331
  %333 = fadd float %329, %332
  %334 = fsub float %333, %329
  %335 = fsub float %332, %334
  %336 = insertelement <2 x float> undef, float %335, i32 0
  %337 = insertelement <2 x float> %336, float %333, i32 1
  ret <2 x float> %337
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocmlpriv_expep_f32(<2 x float>) local_unnamed_addr #28 {
  %2 = extractelement <2 x float> %0, i64 1
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.rint.f32(float %3)
  %5 = fmul float %4, 0x3FE62E4000000000
  %6 = fsub float %2, %5
  %7 = fsub float %6, %2
  %8 = fsub float %6, %7
  %9 = fsub float %2, %8
  %10 = fadd float %5, %7
  %11 = fsub float %9, %10
  %12 = extractelement <2 x float> %0, i64 0
  %13 = fadd float %12, %11
  %14 = fadd float %6, %13
  %15 = fsub float %14, %6
  %16 = fsub float %13, %15
  %17 = fmul float %4, 0x3EB7F78000000000
  %18 = fsub float %14, %17
  %19 = fsub float %14, %18
  %20 = fsub float %19, %17
  %21 = fadd float %16, %20
  %22 = fadd float %18, %21
  %23 = fsub float %22, %18
  %24 = fsub float %21, %23
  %25 = fmul float %4, 0x3DD473DE60000000
  %26 = fsub float %22, %25
  %27 = fsub float %22, %26
  %28 = fsub float %27, %25
  %29 = fadd float %24, %28
  %30 = fadd float %26, %29
  %31 = fsub float %30, %26
  %32 = fsub float %29, %31
  %33 = tail call float @__ocml_fmuladd_f32(float %30, float 0x3F56850E40000000, float 0x3F8123BCC0000000) #21
  %34 = tail call float @__ocml_fmuladd_f32(float %30, float %33, float 0x3FA555B980000000) #21
  %35 = tail call float @__ocml_fmuladd_f32(float %30, float %34, float 0x3FC55548E0000000) #21
  %36 = tail call float @__ocml_fmuladd_f32(float %30, float %35, float 0x3FDFFFFF80000000) #21
  %37 = fmul float %30, %30
  %38 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %39 = icmp sgt i32 %38, 899
  br i1 %39, label %40, label %45

; <label>:40:                                     ; preds = %1
  %41 = fsub float -0.000000e+00, %37
  %42 = tail call float @llvm.fma.f32(float %30, float %30, float %41) #47
  %43 = insertelement <2 x float> undef, float %42, i32 0
  %44 = insertelement <2 x float> %43, float %37, i32 1
  br label %71

; <label>:45:                                     ; preds = %1
  switch i32 %38, label %46 [
    i32 801, label %56
    i32 701, label %56
  ]

; <label>:46:                                     ; preds = %45
  %47 = bitcast float %30 to i32
  %48 = and i32 %47, -4096
  %49 = bitcast i32 %48 to float
  %50 = fsub float %30, %49
  %51 = fsub float -0.000000e+00, %37
  %52 = tail call float @llvm.fmuladd.f32(float %49, float %49, float %51) #47
  %53 = fmul float %49, 2.000000e+00
  %54 = tail call float @llvm.fmuladd.f32(float %53, float %50, float %52) #47
  %55 = tail call float @llvm.fmuladd.f32(float %50, float %50, float %54) #47
  br label %59

; <label>:56:                                     ; preds = %45, %45
  %57 = fsub float -0.000000e+00, %37
  %58 = tail call float @llvm.fma.f32(float %30, float %30, float %57) #47
  br label %59

; <label>:59:                                     ; preds = %56, %46
  %60 = phi float [ %58, %56 ], [ %55, %46 ]
  %61 = insertelement <2 x float> undef, float %60, i32 0
  %62 = insertelement <2 x float> %61, float %37, i32 1
  switch i32 %38, label %63 [
    i32 801, label %71
    i32 701, label %71
  ]

; <label>:63:                                     ; preds = %59
  %64 = fmul float %30, %32
  %65 = tail call float @llvm.fmuladd.f32(float %64, float 2.000000e+00, float %60) #47
  %66 = tail call float @llvm.fmuladd.f32(float %32, float %32, float %65) #47
  %67 = fadd float %37, %66
  %68 = fsub float %67, %37
  %69 = fsub float %66, %68
  %70 = fmul float %36, %67
  br label %87

; <label>:71:                                     ; preds = %59, %59, %40
  %72 = phi <2 x float> [ %62, %59 ], [ %62, %59 ], [ %44, %40 ]
  %73 = fmul float %32, 2.000000e+00
  %74 = extractelement <2 x float> %72, i64 0
  %75 = tail call float @llvm.fma.f32(float %30, float %73, float %74) #47
  %76 = tail call float @llvm.fma.f32(float %32, float %32, float %75) #47
  %77 = extractelement <2 x float> %72, i64 1
  %78 = fadd float %77, %76
  %79 = fsub float %78, %77
  %80 = fsub float %76, %79
  %81 = fmul float %36, %78
  br i1 %39, label %82, label %87

; <label>:82:                                     ; preds = %71
  %83 = fsub float -0.000000e+00, %81
  %84 = tail call float @llvm.fma.f32(float %78, float %36, float %83) #47
  %85 = insertelement <2 x float> undef, float %84, i32 0
  %86 = insertelement <2 x float> %85, float %81, i32 1
  br label %112

; <label>:87:                                     ; preds = %71, %63
  %88 = phi float [ %70, %63 ], [ %81, %71 ]
  %89 = phi float [ %69, %63 ], [ %80, %71 ]
  %90 = phi float [ %67, %63 ], [ %78, %71 ]
  switch i32 %38, label %91 [
    i32 801, label %105
    i32 701, label %105
  ]

; <label>:91:                                     ; preds = %87
  %92 = bitcast float %90 to i32
  %93 = and i32 %92, -4096
  %94 = bitcast i32 %93 to float
  %95 = fsub float %90, %94
  %96 = bitcast float %36 to i32
  %97 = and i32 %96, -4096
  %98 = bitcast i32 %97 to float
  %99 = fsub float %36, %98
  %100 = fsub float -0.000000e+00, %88
  %101 = tail call float @llvm.fmuladd.f32(float %94, float %98, float %100) #47
  %102 = tail call float @llvm.fmuladd.f32(float %94, float %99, float %101) #47
  %103 = tail call float @llvm.fmuladd.f32(float %95, float %98, float %102) #47
  %104 = tail call float @llvm.fmuladd.f32(float %95, float %99, float %103) #47
  br label %108

; <label>:105:                                    ; preds = %87, %87
  %106 = fsub float -0.000000e+00, %88
  %107 = tail call float @llvm.fma.f32(float %90, float %36, float %106) #47
  br label %108

; <label>:108:                                    ; preds = %105, %91
  %109 = phi float [ %107, %105 ], [ %104, %91 ]
  %110 = insertelement <2 x float> undef, float %109, i32 0
  %111 = insertelement <2 x float> %110, float %88, i32 1
  switch i32 %38, label %118 [
    i32 801, label %112
    i32 701, label %112
  ]

; <label>:112:                                    ; preds = %108, %108, %82
  %113 = phi float [ %89, %108 ], [ %89, %108 ], [ %80, %82 ]
  %114 = phi float [ %109, %108 ], [ %109, %108 ], [ %84, %82 ]
  %115 = phi <2 x float> [ %111, %108 ], [ %111, %108 ], [ %86, %82 ]
  %116 = tail call float @llvm.fma.f32(float %113, float %36, float %114) #47
  %117 = insertelement <2 x float> %115, float %116, i64 0
  br label %121

; <label>:118:                                    ; preds = %108
  %119 = tail call float @llvm.fmuladd.f32(float %89, float %36, float %109) #47
  %120 = insertelement <2 x float> %111, float %119, i64 0
  br label %121

; <label>:121:                                    ; preds = %118, %112
  %122 = phi <2 x float> [ %117, %112 ], [ %120, %118 ]
  %123 = extractelement <2 x float> %122, i64 1
  %124 = extractelement <2 x float> %122, i64 0
  %125 = fadd float %123, %124
  %126 = fsub float %125, %123
  %127 = fsub float %124, %126
  %128 = fadd float %30, %125
  %129 = fsub float %128, %30
  %130 = fsub float %125, %129
  %131 = fadd float %32, %127
  %132 = fadd float %130, %131
  %133 = fadd float %128, %132
  %134 = fadd float %133, 1.000000e+00
  %135 = fptosi float %4 to i32
  %136 = tail call float @llvm.amdgcn.ldexp.f32(float %134, i32 %135)
  %137 = fcmp ogt float %2, 8.900000e+01
  %138 = select i1 %137, float 0x7FF0000000000000, float %136
  %139 = fcmp olt float %2, -1.040000e+02
  %140 = select i1 %139, float 0.000000e+00, float %138
  ret float %140
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_fabs_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  ret double %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_trunc_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.trunc.f16(half %0) #21
  ret half %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_erf_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fcmp olt float %2, 1.000000e+00
  br i1 %3, label %4, label %13

; <label>:4:                                      ; preds = %1
  %5 = fmul float %0, %0
  %6 = tail call float @__ocml_fmuladd_f32(float %5, float 0x3F1496A320000000, float 0xBF4A3F7000000000) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %5, float %6, float 0x3F75405B20000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %5, float %7, float 0xBF9B7F90E0000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %5, float %8, float 0x3FBCE2CF80000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %5, float %9, float 0xBFD81273E0000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %5, float %10, float 0x3FF20DD740000000) #21
  %12 = fmul float %2, %11
  br label %51

; <label>:13:                                     ; preds = %1
  %14 = fcmp olt float %2, 1.750000e+00
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %13
  %16 = fadd float %2, -1.000000e+00
  %17 = tail call float @__ocml_fmuladd_f32(float %16, float 0x3F956793A0000000, float 0xBFB3F1E8A0000000) #21
  %18 = tail call float @__ocml_fmuladd_f32(float %16, float %17, float 0x3FB254D820000000) #21
  %19 = tail call float @__ocml_fmuladd_f32(float %16, float %18, float 0x3FC1ABE800000000) #21
  %20 = tail call float @__ocml_fmuladd_f32(float %16, float %19, float 0xBFDA90F700000000) #21
  %21 = tail call float @__ocml_fmuladd_f32(float %16, float %20, float 0x3FDA912240000000) #21
  %22 = tail call float @__ocml_fmuladd_f32(float %16, float %21, float 0x3FEAF767A0000000) #21
  br label %51

; <label>:23:                                     ; preds = %13
  %24 = fcmp olt float %2, 2.500000e+00
  br i1 %24, label %25, label %33

; <label>:25:                                     ; preds = %23
  %26 = fadd float %2, -1.750000e+00
  %27 = tail call float @__ocml_fmuladd_f32(float %26, float 0xBF56C72760000000, float 0x3F8F0807E0000000) #21
  %28 = tail call float @__ocml_fmuladd_f32(float %26, float %27, float 0xBFAA904880000000) #21
  %29 = tail call float @__ocml_fmuladd_f32(float %26, float %28, float 0x3FB74F3880000000) #21
  %30 = tail call float @__ocml_fmuladd_f32(float %26, float %29, float 0xBFB7AB6AA0000000) #21
  %31 = tail call float @__ocml_fmuladd_f32(float %26, float %30, float 0x3FAB05EA00000000) #21
  %32 = tail call float @__ocml_fmuladd_f32(float %26, float %31, float 0x3FEF92D060000000) #21
  br label %51

; <label>:33:                                     ; preds = %23
  %34 = fcmp olt float %2, 3.937500e+00
  br i1 %34, label %35, label %48

; <label>:35:                                     ; preds = %33
  %36 = fadd float %2, -2.500000e+00
  %37 = tail call float @__ocml_fmuladd_f32(float %36, float 0x3EFB944820000000, float 0xBF29D07100000000) #21
  %38 = tail call float @__ocml_fmuladd_f32(float %36, float %37, float 0xBF3B43CB60000000) #21
  %39 = tail call float @__ocml_fmuladd_f32(float %36, float %38, float 0x3F801DB880000000) #21
  %40 = tail call float @__ocml_fmuladd_f32(float %36, float %39, float 0xBF5E85A320000000) #21
  %41 = tail call float @__ocml_fmuladd_f32(float %36, float %40, float 0xBFCA49BAE0000000) #21
  %42 = tail call float @__ocml_fmuladd_f32(float %36, float %41, float 0x3FE3A50E20000000) #21
  %43 = fmul float %42, %42
  %44 = fmul float %43, %43
  %45 = fmul float %44, %44
  %46 = fsub float -0.000000e+00, %45
  %47 = tail call float @__ocml_fmuladd_f32(float %46, float %45, float 1.000000e+00) #21
  br label %51

; <label>:48:                                     ; preds = %33
  %49 = fcmp uno float %0, 0.000000e+00
  %50 = select i1 %49, float %0, float 1.000000e+00
  br label %51

; <label>:51:                                     ; preds = %48, %35, %25, %15, %4
  %52 = phi float [ %12, %4 ], [ %22, %15 ], [ %32, %25 ], [ %47, %35 ], [ %50, %48 ]
  %53 = tail call float @llvm.copysign.f32(float %52, float %0)
  ret float %53
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_round_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.trunc.f16(half %0) #21
  %3 = fsub half %0, %2
  %4 = tail call half @llvm.fabs.f16(half %3) #21
  %5 = tail call half @llvm.copysign.f16(half 0xH3C00, half %0) #21
  %6 = fcmp oge half %4, 0xH3800
  %7 = select i1 %6, half %5, half 0xH0000
  %8 = fadd half %2, %7
  ret half %8
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_lgamma_f32(float) local_unnamed_addr #28 {
  %2 = alloca i32, align 4, addrspace(5)
  %3 = bitcast i32 addrspace(5)* %2 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %3) #47
  %4 = call float @__ocml_lgamma_r_f32(float %0, i32 addrspace(5)* %2) #52
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %3) #47
  ret float %4
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_exp2_f32(float) local_unnamed_addr #29 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = tail call float @llvm.exp2.f32(float %0)
  br label %13

; <label>:6:                                      ; preds = %1
  %7 = fcmp olt float %0, -1.260000e+02
  %8 = select i1 %7, float 6.400000e+01, float 0.000000e+00
  %9 = fadd float %8, %0
  %10 = tail call float @llvm.exp2.f32(float %9)
  %11 = select i1 %7, float 0x3BF0000000000000, float 1.000000e+00
  %12 = fmul float %11, %10
  br label %13

; <label>:13:                                     ; preds = %6, %4
  %14 = phi float [ %5, %4 ], [ %12, %6 ]
  ret float %14
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_rsqrt_f32(float) local_unnamed_addr #29 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = tail call float @llvm.amdgcn.rsq.f32(float %0)
  br label %15

; <label>:6:                                      ; preds = %1
  %7 = fcmp olt float %0, 0x39B0000000000000
  %8 = fpext float %0 to double
  %9 = select i1 %7, double 0x4630000000000000, double 1.000000e+00
  %10 = fmul double %9, %8
  %11 = fptrunc double %10 to float
  %12 = tail call float @llvm.amdgcn.rsq.f32(float %11)
  %13 = select i1 %7, float 0x4310000000000000, float 1.000000e+00
  %14 = fmul float %13, %12
  br label %15

; <label>:15:                                     ; preds = %6, %4
  %16 = phi float [ %5, %4 ], [ %14, %6 ]
  ret float %16
}

; Function Attrs: nounwind writeonly
define linkonce_odr protected float @__ocml_frexp_f32(float, i32 addrspace(5)* nocapture) local_unnamed_addr #32 {
  %3 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %0)
  %4 = tail call float @llvm.amdgcn.frexp.mant.f32(float %0)
  %5 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 519)
  %6 = select i1 %5, i32 0, i32 %3
  store i32 %6, i32 addrspace(5)* %1, align 4, !tbaa !120
  %7 = select i1 %5, float %0, float %4
  ret float %7
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocml_isnormal_f16(half) local_unnamed_addr #28 {
  %2 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 264) #21
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_signbit_f64(double) local_unnamed_addr #31 {
  %2 = bitcast double %0 to <2 x i32>
  %3 = extractelement <2 x i32> %2, i64 1
  %4 = lshr i32 %3, 31
  ret i32 %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_sinpi_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigpired_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = tail call i32 @__ocmlpriv_sincospired_f16(half %5) #21
  %7 = lshr i32 %6, 16
  %8 = and i32 %3, 65536
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 %6, i32 %7
  %11 = icmp sgt i32 %3, 131071
  %12 = select i1 %11, i32 32768, i32 0
  %13 = bitcast half %0 to i16
  %14 = and i16 %13, -32768
  %15 = zext i16 %14 to i32
  %16 = xor i32 %12, %15
  %17 = xor i32 %16, %10
  %18 = trunc i32 %17 to i16
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %22 = and i1 %21, %20
  %23 = bitcast i16 %18 to half
  %24 = select i1 %22, half 0xH7E00, half %23
  ret half %24
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocmlpriv_trigpired_f16(half) local_unnamed_addr #28 {
  %2 = fmul half %0, 0xH3800
  %3 = tail call half @llvm.amdgcn.fract.f16(half %2) #21
  %4 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %2, i32 516) #21
  %5 = fmul half %3, 0xH4000
  %6 = select i1 %4, half 0xH0000, half %5
  %7 = fcmp ogt half %0, 0xH3C00
  %8 = select i1 %7, half %6, half %0
  %9 = fmul half %8, 0xH4000
  %10 = tail call half @llvm.rint.f16(half %9) #21
  %11 = tail call half @llvm.fma.f16(half %10, half 0xHB800, half %8) #21
  %12 = fptosi half %10 to i16
  %13 = and i16 %12, 3
  %14 = bitcast half %11 to i16
  %15 = zext i16 %13 to i32
  %16 = shl nuw nsw i32 %15, 16
  %17 = zext i16 %14 to i32
  %18 = or i32 %16, %17
  ret i32 %18
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocmlpriv_sincospired_f16(half) local_unnamed_addr #28 {
  %2 = fmul half %0, %0
  %3 = tail call half @llvm.fma.f16(half %2, half 0xH3EE1, half 0xHC51B) #21
  %4 = fmul half %2, %0
  %5 = fmul half %4, %3
  %6 = tail call half @llvm.fma.f16(half %0, half 0xH4248, half %5) #21
  %7 = tail call half @llvm.fma.f16(half %2, half 0xH43EC, half 0xHC4EF) #21
  %8 = tail call half @llvm.fma.f16(half %2, half %7, half 0xH3C00) #21
  %9 = bitcast half %6 to i16
  %10 = bitcast half %8 to i16
  %11 = zext i16 %10 to i32
  %12 = shl nuw i32 %11, 16
  %13 = zext i16 %9 to i32
  %14 = or i32 %12, %13
  ret i32 %14
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fmod_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.fabs.f16(half %0) #21
  %4 = fpext half %3 to float
  %5 = tail call half @llvm.fabs.f16(half %1) #21
  %6 = fpext half %5 to float
  %7 = fcmp ogt half %3, %5
  br i1 %7, label %8, label %51

; <label>:8:                                      ; preds = %2
  %9 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %4)
  %10 = tail call float @llvm.amdgcn.frexp.mant.f32(float %4)
  %11 = tail call float @llvm.amdgcn.ldexp.f32(float %10, i32 11)
  %12 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %6)
  %13 = add nsw i32 %12, -1
  %14 = tail call float @llvm.amdgcn.frexp.mant.f32(float %6)
  %15 = tail call float @llvm.amdgcn.ldexp.f32(float %14, i32 1)
  %16 = sub i32 %9, %12
  %17 = tail call float @llvm.amdgcn.rcp.f32(float %15)
  %18 = icmp sgt i32 %16, 11
  br i1 %18, label %19, label %32

; <label>:19:                                     ; preds = %19, %8
  %20 = phi float [ %29, %19 ], [ %11, %8 ]
  %21 = phi i32 [ %30, %19 ], [ %16, %8 ]
  %22 = fmul float %17, %20
  %23 = tail call float @llvm.rint.f32(float %22)
  %24 = fsub float -0.000000e+00, %23
  %25 = tail call float @__ocml_fmuladd_f32(float %24, float %15, float %20) #21
  %26 = fcmp olt float %25, 0.000000e+00
  %27 = fadd float %15, %25
  %28 = select i1 %26, float %27, float %25
  %29 = tail call float @llvm.amdgcn.ldexp.f32(float %28, i32 11)
  %30 = add nsw i32 %21, -11
  %31 = icmp sgt i32 %30, 11
  br i1 %31, label %19, label %32

; <label>:32:                                     ; preds = %19, %8
  %33 = phi i32 [ %16, %8 ], [ %30, %19 ]
  %34 = phi float [ %11, %8 ], [ %29, %19 ]
  %35 = add nsw i32 %33, -10
  %36 = tail call float @llvm.amdgcn.ldexp.f32(float %34, i32 %35)
  %37 = fmul float %17, %36
  %38 = tail call float @llvm.rint.f32(float %37)
  %39 = fsub float -0.000000e+00, %38
  %40 = tail call float @__ocml_fmuladd_f32(float %39, float %15, float %36) #21
  %41 = fcmp olt float %40, 0.000000e+00
  %42 = fadd float %15, %40
  %43 = select i1 %41, float %42, float %40
  %44 = tail call float @llvm.amdgcn.ldexp.f32(float %43, i32 %13)
  %45 = fptrunc float %44 to half
  %46 = bitcast half %45 to i16
  %47 = bitcast half %0 to i16
  %48 = and i16 %47, -32768
  %49 = xor i16 %48, %46
  %50 = bitcast i16 %49 to half
  br label %55

; <label>:51:                                     ; preds = %2
  %52 = fcmp oeq half %3, %5
  %53 = tail call half @llvm.copysign.f16(half 0xH0000, half %0) #21
  %54 = select i1 %52, half %53, half %0
  br label %55

; <label>:55:                                     ; preds = %51, %32
  %56 = phi half [ %50, %32 ], [ %54, %51 ]
  %57 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %58 = icmp eq i8 %57, 0
  %59 = fcmp oeq half %1, 0xH0000
  %60 = fcmp uno half %1, 0xH0000
  %61 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %62 = or i1 %61, %60
  %63 = or i1 %59, %62
  %64 = and i1 %63, %58
  %65 = select i1 %64, half 0xH7E00, half %56
  ret half %65
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_erf_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_erf_f32(float %2) #21
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocml_ilogb_f16(half) local_unnamed_addr #28 {
  %2 = tail call signext i16 @llvm.amdgcn.frexp.exp.i16.f16(half %0) #21
  %3 = sext i16 %2 to i32
  %4 = add nsw i32 %3, -1
  %5 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %6 = icmp eq i8 %5, 0
  %7 = fcmp uno half %0, 0xH0000
  %8 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %9 = or i1 %8, %7
  %10 = and i1 %9, %6
  %11 = select i1 %10, i32 2147483647, i32 %4
  %12 = fcmp oeq half %0, 0xH0000
  %13 = select i1 %12, i32 -2147483648, i32 %11
  ret i32 %13
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_log1p_f32(float) local_unnamed_addr #28 {
  %2 = fadd float %0, 1.000000e+00
  %3 = fadd float %2, -1.000000e+00
  %4 = fsub float %3, %2
  %5 = fadd float %4, 1.000000e+00
  %6 = fsub float %0, %3
  %7 = fadd float %6, %5
  %8 = insertelement <2 x float> undef, float %7, i32 0
  %9 = insertelement <2 x float> %8, float %2, i32 1
  %10 = tail call float @__ocmlpriv_lnep_f32(<2 x float> %9) #21
  %11 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %12 = icmp eq i8 %11, 0
  %13 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 512)
  %14 = select i1 %13, float %0, float %10
  %15 = fcmp olt float %0, -1.000000e+00
  %16 = select i1 %15, float 0x7FF8000000000000, float %14
  %17 = fcmp oeq float %0, -1.000000e+00
  %18 = select i1 %17, float 0xFFF0000000000000, float %16
  %19 = select i1 %12, float %18, float %10
  %20 = tail call float @llvm.fabs.f32(float %0)
  %21 = fcmp olt float %20, 0x3E70000000000000
  %22 = select i1 %21, float %0, float %19
  ret float %22
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_ceil_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.ceil.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.ceil.f16(half) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_exp10_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x400A934F00000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fptrunc float %4 to half
  ret half %5
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_scalbn_f16(half, i32) local_unnamed_addr #28 {
  %3 = tail call half @__ocml_ldexp_f16(half %0, i32 %1) #21
  ret half %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_asinh_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fpext half %2 to float
  %4 = tail call float @__ocml_fmuladd_f32(float %3, float %3, float 1.000000e+00) #21
  %5 = fcmp olt float %4, 0.000000e+00
  %6 = tail call float @llvm.sqrt.f32(float %4)
  %7 = select i1 %5, float 0x7FF8000000000000, float %6
  %8 = fadd float %7, %3
  %9 = tail call float @llvm.log2.f32(float %8)
  %10 = fmul float %9, 0x3FE62E4300000000
  %11 = fptrunc float %10 to half
  %12 = tail call half @llvm.copysign.f16(half %11, half %0) #21
  %13 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %14 = icmp eq i8 %13, 0
  %15 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %16 = and i1 %15, %14
  %17 = select i1 %16, half %0, half %12
  ret half %17
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_fmin_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.canonicalize.f64(double %0)
  %4 = tail call double @llvm.canonicalize.f64(double %1)
  %5 = tail call double @llvm.minnum.f64(double %3, double %4)
  ret double %5
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_isnan_f64(double) local_unnamed_addr #31 {
  %2 = fcmp uno double %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_pow_f32(float, float) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  %5 = tail call float @llvm.canonicalize.f32(float %0)
  %6 = select i1 %4, float %0, float %5
  %7 = tail call float @llvm.fabs.f32(float %6)
  %8 = tail call <2 x float> @__ocmlpriv_epln_f32(float %7) #21
  %9 = extractelement <2 x float> %8, i64 1
  %10 = fmul float %9, %1
  %11 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %12 = icmp sgt i32 %11, 899
  br i1 %12, label %13, label %19

; <label>:13:                                     ; preds = %2
  %14 = fsub float -0.000000e+00, %10
  %15 = tail call float @llvm.fma.f32(float %1, float %9, float %14) #47
  %16 = insertelement <2 x float> undef, float %15, i32 0
  %17 = insertelement <2 x float> %16, float %10, i32 1
  %18 = extractelement <2 x float> %8, i64 0
  br label %42

; <label>:19:                                     ; preds = %2
  switch i32 %11, label %20 [
    i32 801, label %34
    i32 701, label %34
  ]

; <label>:20:                                     ; preds = %19
  %21 = bitcast float %1 to i32
  %22 = and i32 %21, -4096
  %23 = bitcast i32 %22 to float
  %24 = fsub float %1, %23
  %25 = bitcast float %9 to i32
  %26 = and i32 %25, -4096
  %27 = bitcast i32 %26 to float
  %28 = fsub float %9, %27
  %29 = fsub float -0.000000e+00, %10
  %30 = tail call float @llvm.fmuladd.f32(float %23, float %27, float %29) #47
  %31 = tail call float @llvm.fmuladd.f32(float %23, float %28, float %30) #47
  %32 = tail call float @llvm.fmuladd.f32(float %24, float %27, float %31) #47
  %33 = tail call float @llvm.fmuladd.f32(float %24, float %28, float %32) #47
  br label %37

; <label>:34:                                     ; preds = %19, %19
  %35 = fsub float -0.000000e+00, %10
  %36 = tail call float @llvm.fma.f32(float %1, float %9, float %35) #47
  br label %37

; <label>:37:                                     ; preds = %34, %20
  %38 = phi float [ %36, %34 ], [ %33, %20 ]
  %39 = insertelement <2 x float> undef, float %38, i32 0
  %40 = insertelement <2 x float> %39, float %10, i32 1
  %41 = extractelement <2 x float> %8, i64 0
  switch i32 %11, label %48 [
    i32 801, label %42
    i32 701, label %42
  ]

; <label>:42:                                     ; preds = %37, %37, %13
  %43 = phi float [ %38, %37 ], [ %38, %37 ], [ %15, %13 ]
  %44 = phi float [ %41, %37 ], [ %41, %37 ], [ %18, %13 ]
  %45 = phi <2 x float> [ %40, %37 ], [ %40, %37 ], [ %17, %13 ]
  %46 = tail call float @llvm.fma.f32(float %1, float %44, float %43) #47
  %47 = insertelement <2 x float> %45, float %46, i64 0
  br label %51

; <label>:48:                                     ; preds = %37
  %49 = tail call float @llvm.fmuladd.f32(float %1, float %41, float %38) #47
  %50 = insertelement <2 x float> %40, float %49, i64 0
  br label %51

; <label>:51:                                     ; preds = %48, %42
  %52 = phi <2 x float> [ %47, %42 ], [ %50, %48 ]
  %53 = extractelement <2 x float> %52, i64 1
  %54 = extractelement <2 x float> %52, i64 0
  %55 = fadd float %53, %54
  %56 = fsub float %55, %53
  %57 = fsub float %54, %56
  %58 = tail call i1 @llvm.amdgcn.class.f32(float %53, i32 516) #47
  %59 = select i1 %58, float %53, float %55
  %60 = tail call i1 @llvm.amdgcn.class.f32(float %59, i32 516) #47
  %61 = select i1 %60, float 0.000000e+00, float %57
  %62 = insertelement <2 x float> undef, float %61, i32 0
  %63 = insertelement <2 x float> %62, float %59, i32 1
  %64 = tail call float @__ocmlpriv_expep_f32(<2 x float> %63) #21
  %65 = tail call float @llvm.fabs.f32(float %1)
  %66 = tail call float @llvm.trunc.f32(float %65)
  %67 = fcmp oeq float %65, %66
  %68 = zext i1 %67 to i32
  %69 = fmul float %66, 5.000000e-01
  %70 = tail call float @llvm.amdgcn.fract.f32(float %69)
  %71 = tail call i1 @llvm.amdgcn.class.f32(float %69, i32 516)
  %72 = select i1 %71, float 0.000000e+00, float %70
  %73 = fcmp oeq float %72, 0.000000e+00
  %74 = and i1 %67, %73
  %75 = zext i1 %74 to i32
  %76 = add nuw nsw i32 %75, %68
  %77 = icmp eq i32 %76, 1
  %78 = fcmp olt float %6, 0.000000e+00
  %79 = and i1 %77, %78
  %80 = select i1 %79, float -0.000000e+00, float 0.000000e+00
  %81 = tail call float @llvm.copysign.f32(float %64, float %80)
  %82 = fcmp oeq float %6, 0.000000e+00
  %83 = fcmp oeq float %1, 0.000000e+00
  %84 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 960)
  %85 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %145

; <label>:87:                                     ; preds = %51
  %88 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 512)
  %89 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 4)
  %90 = fcmp uno float %65, 0.000000e+00
  %91 = tail call i1 @llvm.amdgcn.class.f32(float %65, i32 512)
  %92 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 4)
  %93 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 960)
  %94 = fcmp uno float %6, 0.000000e+00
  %95 = tail call i1 @llvm.amdgcn.class.f32(float %6, i32 512)
  %96 = fcmp ogt float %7, 1.000000e+00
  %97 = fcmp olt float %7, 1.000000e+00
  %98 = xor i1 %93, true
  %99 = icmp eq i32 %76, 0
  %100 = and i1 %99, %98
  %101 = select i1 %100, float 0x7FF8000000000000, float %81
  %102 = and i1 %89, %97
  %103 = select i1 %102, float 0x7FF0000000000000, float %101
  %104 = and i1 %89, %96
  %105 = and i1 %88, %97
  %106 = or i1 %105, %104
  %107 = select i1 %106, float 0.000000e+00, float %103
  %108 = and i1 %88, %96
  %109 = select i1 %108, float 0x7FF0000000000000, float %107
  %110 = tail call float @llvm.copysign.f32(float 0x7FF0000000000000, float %6)
  %111 = xor i1 %84, true
  %112 = and i1 %82, %111
  %113 = and i1 %77, %112
  %114 = select i1 %113, float %110, float %109
  %115 = icmp ne i32 %76, 1
  %116 = and i1 %115, %112
  %117 = select i1 %116, float 0x7FF0000000000000, float %114
  %118 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %6)
  %119 = and i1 %84, %82
  %120 = and i1 %77, %119
  %121 = select i1 %120, float %118, float %117
  %122 = and i1 %115, %119
  %123 = select i1 %122, float 0.000000e+00, float %121
  %124 = and i1 %89, %82
  %125 = select i1 %124, float 0x7FF0000000000000, float %123
  %126 = fcmp oeq float %6, -1.000000e+00
  %127 = and i1 %91, %126
  %128 = select i1 %127, float 1.000000e+00, float %125
  %129 = and i1 %92, %111
  %130 = and i1 %77, %129
  %131 = select i1 %130, float -0.000000e+00, float %128
  %132 = and i1 %115, %129
  %133 = select i1 %132, float 0.000000e+00, float %131
  %134 = and i1 %84, %92
  %135 = and i1 %77, %134
  %136 = select i1 %135, float 0xFFF0000000000000, float %133
  %137 = and i1 %115, %134
  %138 = select i1 %137, float 0x7FF0000000000000, float %136
  %139 = and i1 %95, %111
  %140 = select i1 %139, float 0.000000e+00, float %138
  %141 = and i1 %84, %95
  %142 = select i1 %141, float 0x7FF0000000000000, float %140
  %143 = select i1 %94, float %6, float %142
  %144 = select i1 %90, float %1, float %143
  br label %160

; <label>:145:                                    ; preds = %51
  %146 = tail call float @llvm.copysign.f32(float 0x7FF0000000000000, float %6)
  %147 = xor i1 %84, true
  %148 = and i1 %82, %147
  %149 = and i1 %77, %148
  %150 = select i1 %149, float %146, float %81
  %151 = icmp ne i32 %76, 1
  %152 = and i1 %151, %148
  %153 = select i1 %152, float 0x7FF0000000000000, float %150
  %154 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %6)
  %155 = and i1 %84, %82
  %156 = and i1 %77, %155
  %157 = select i1 %156, float %154, float %153
  %158 = and i1 %151, %155
  %159 = select i1 %158, float 0.000000e+00, float %157
  br label %160

; <label>:160:                                    ; preds = %145, %87
  %161 = phi float [ %159, %145 ], [ %144, %87 ]
  %162 = fcmp oeq float %6, 1.000000e+00
  %163 = or i1 %83, %162
  %164 = select i1 %163, float 1.000000e+00, float %161
  ret float %164
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_nearbyint_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.rint.f64(double %0)
  ret double %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_remainder_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.fabs.f16(half %0) #21
  %4 = fpext half %3 to float
  %5 = tail call half @llvm.fabs.f16(half %1) #21
  %6 = fpext half %5 to float
  %7 = fcmp ogt half %3, %5
  br i1 %7, label %8, label %64

; <label>:8:                                      ; preds = %2
  %9 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %4)
  %10 = tail call float @llvm.amdgcn.frexp.mant.f32(float %4)
  %11 = tail call float @llvm.amdgcn.ldexp.f32(float %10, i32 11)
  %12 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %6)
  %13 = add nsw i32 %12, -1
  %14 = tail call float @llvm.amdgcn.frexp.mant.f32(float %6)
  %15 = tail call float @llvm.amdgcn.ldexp.f32(float %14, i32 1)
  %16 = sub i32 %9, %12
  %17 = tail call float @llvm.amdgcn.rcp.f32(float %15)
  %18 = icmp sgt i32 %16, 11
  br i1 %18, label %19, label %32

; <label>:19:                                     ; preds = %19, %8
  %20 = phi float [ %29, %19 ], [ %11, %8 ]
  %21 = phi i32 [ %30, %19 ], [ %16, %8 ]
  %22 = fmul float %17, %20
  %23 = tail call float @llvm.rint.f32(float %22)
  %24 = fsub float -0.000000e+00, %23
  %25 = tail call float @__ocml_fmuladd_f32(float %24, float %15, float %20) #21
  %26 = fcmp olt float %25, 0.000000e+00
  %27 = fadd float %15, %25
  %28 = select i1 %26, float %27, float %25
  %29 = tail call float @llvm.amdgcn.ldexp.f32(float %28, i32 11)
  %30 = add nsw i32 %21, -11
  %31 = icmp sgt i32 %30, 11
  br i1 %31, label %19, label %32

; <label>:32:                                     ; preds = %19, %8
  %33 = phi i32 [ %16, %8 ], [ %30, %19 ]
  %34 = phi float [ %11, %8 ], [ %29, %19 ]
  %35 = add nsw i32 %33, -10
  %36 = tail call float @llvm.amdgcn.ldexp.f32(float %34, i32 %35)
  %37 = fmul float %17, %36
  %38 = tail call float @llvm.rint.f32(float %37)
  %39 = fsub float -0.000000e+00, %38
  %40 = tail call float @__ocml_fmuladd_f32(float %39, float %15, float %36) #21
  %41 = fcmp olt float %40, 0.000000e+00
  %42 = zext i1 %41 to i32
  %43 = fadd float %15, %40
  %44 = select i1 %41, float %43, float %40
  %45 = fptosi float %38 to i32
  %46 = sub nsw i32 %45, %42
  %47 = fmul float %44, 2.000000e+00
  %48 = fcmp ogt float %47, %15
  %49 = zext i1 %48 to i32
  %50 = fcmp oeq float %47, %15
  %51 = zext i1 %50 to i32
  %52 = and i32 %46, %51
  %53 = or i32 %52, %49
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, float 0.000000e+00, float %15
  %56 = fsub float %44, %55
  %57 = tail call float @llvm.amdgcn.ldexp.f32(float %56, i32 %13)
  %58 = fptrunc float %57 to half
  %59 = bitcast half %58 to i16
  %60 = bitcast half %0 to i16
  %61 = and i16 %60, -32768
  %62 = xor i16 %61, %59
  %63 = bitcast i16 %62 to half
  br label %78

; <label>:64:                                     ; preds = %2
  %65 = bitcast half %0 to i16
  %66 = bitcast half %1 to i16
  %67 = xor i16 %66, %65
  %68 = icmp sgt i16 %67, -1
  %69 = select i1 %68, half 0xHBC00, half 0xH3C00
  %70 = tail call half @llvm.fma.f16(half %1, half %69, half %0) #21
  %71 = fcmp oeq half %3, %5
  br i1 %71, label %72, label %74

; <label>:72:                                     ; preds = %64
  %73 = tail call half @llvm.copysign.f16(half 0xH0000, half %0) #21
  br label %78

; <label>:74:                                     ; preds = %64
  %75 = fmul float %6, 5.000000e-01
  %76 = fcmp olt float %75, %4
  %77 = select i1 %76, half %70, half %0
  br label %78

; <label>:78:                                     ; preds = %74, %72, %32
  %79 = phi half [ %63, %32 ], [ %73, %72 ], [ %77, %74 ]
  %80 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %81 = icmp eq i8 %80, 0
  %82 = fcmp oeq half %1, 0xH0000
  %83 = fcmp uno half %1, 0xH0000
  %84 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %85 = or i1 %84, %83
  %86 = or i1 %82, %85
  %87 = and i1 %86, %81
  %88 = select i1 %87, half 0xH7E00, half %79
  ret half %88
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_rsqrt_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.amdgcn.rsq.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.amdgcn.rsq.f16(half) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_round_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.trunc.f64(double %0)
  %3 = fsub double %0, %2
  %4 = tail call double @llvm.fabs.f64(double %3)
  %5 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %0)
  %6 = fcmp oge double %4, 5.000000e-01
  %7 = select i1 %6, double %5, double 0.000000e+00
  %8 = fadd double %2, %7
  ret double %8
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fdim_f16(half, half) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %18

; <label>:5:                                      ; preds = %2
  %6 = tail call i32 @__ocml_isnan_f16(half %0) #21
  %7 = tail call i32 @__ocml_isnan_f16(half %1) #21
  %8 = or i32 %7, %6
  %9 = sub nsw i32 0, %8
  %10 = and i32 %9, 32256
  %11 = fcmp ogt half %0, %1
  %12 = fsub half %0, %1
  %13 = bitcast half %12 to i16
  %14 = zext i16 %13 to i32
  %15 = select i1 %11, i32 %14, i32 0
  %16 = or i32 %10, %15
  %17 = trunc i32 %16 to i16
  br label %23

; <label>:18:                                     ; preds = %2
  %19 = fcmp ogt half %0, %1
  %20 = fsub half %0, %1
  %21 = bitcast half %20 to i16
  %22 = select i1 %19, i16 %21, i16 0
  br label %23

; <label>:23:                                     ; preds = %18, %5
  %24 = phi i16 [ %22, %18 ], [ %17, %5 ]
  %25 = bitcast i16 %24 to half
  ret half %25
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_isnan_f16(half) local_unnamed_addr #31 {
  %2 = fcmp uno half %0, 0xH0000
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_exp10_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = tail call double @llvm.rint.f64(double %2)
  %4 = fmul double %0, 0x40026BB1BBB55516
  %5 = fsub double -0.000000e+00, %4
  %6 = tail call double @llvm.fma.f64(double %0, double 0x40026BB1BBB55516, double %5) #47
  %7 = tail call double @llvm.fma.f64(double %0, double 0xBCAF48AD494EA3E9, double %6) #47
  %8 = fadd double %4, %7
  %9 = fsub double %8, %4
  %10 = fsub double %7, %9
  %11 = fmul double %3, 0x3FE62E42FEFA3000
  %12 = fsub double %8, %11
  %13 = fsub double %12, %8
  %14 = fsub double %12, %13
  %15 = fsub double %8, %14
  %16 = fadd double %11, %13
  %17 = fsub double %15, %16
  %18 = fadd double %10, %17
  %19 = fadd double %12, %18
  %20 = fsub double %19, %12
  %21 = fsub double %18, %20
  %22 = fmul double %3, 0x3D53DE6AF278ECE6
  %23 = fsub double %19, %22
  %24 = fsub double %19, %23
  %25 = fsub double %24, %22
  %26 = fadd double %21, %25
  %27 = fadd double %23, %26
  %28 = fsub double %27, %23
  %29 = fsub double %26, %28
  %30 = tail call double @llvm.fma.f64(double %27, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %31 = tail call double @llvm.fma.f64(double %27, double %30, double 0x3EC71DEE623FDE64)
  %32 = tail call double @llvm.fma.f64(double %27, double %31, double 0x3EFA01997C89E6B0)
  %33 = tail call double @llvm.fma.f64(double %27, double %32, double 0x3F2A01A014761F6E)
  %34 = tail call double @llvm.fma.f64(double %27, double %33, double 0x3F56C16C1852B7B0)
  %35 = tail call double @llvm.fma.f64(double %27, double %34, double 0x3F81111111122322)
  %36 = tail call double @llvm.fma.f64(double %27, double %35, double 0x3FA55555555502A1)
  %37 = tail call double @llvm.fma.f64(double %27, double %36, double 0x3FC5555555555511)
  %38 = tail call double @llvm.fma.f64(double %27, double %37, double 0x3FE000000000000B)
  %39 = fmul double %27, %27
  %40 = fsub double -0.000000e+00, %39
  %41 = tail call double @llvm.fma.f64(double %27, double %27, double %40) #47
  %42 = fmul double %29, 2.000000e+00
  %43 = tail call double @llvm.fma.f64(double %27, double %42, double %41) #47
  %44 = tail call double @llvm.fma.f64(double %29, double %29, double %43) #47
  %45 = fadd double %39, %44
  %46 = fsub double %45, %39
  %47 = fsub double %44, %46
  %48 = fmul double %45, %38
  %49 = fsub double -0.000000e+00, %48
  %50 = tail call double @llvm.fma.f64(double %45, double %38, double %49) #47
  %51 = tail call double @llvm.fma.f64(double %47, double %38, double %50) #47
  %52 = fadd double %48, %51
  %53 = fsub double %52, %48
  %54 = fsub double %51, %53
  %55 = fadd double %27, %52
  %56 = fsub double %55, %27
  %57 = fsub double %52, %56
  %58 = fadd double %29, %54
  %59 = fadd double %57, %58
  %60 = fadd double %55, %59
  %61 = fadd double %60, 1.000000e+00
  %62 = fptosi double %3 to i32
  %63 = tail call double @llvm.amdgcn.ldexp.f64(double %61, i32 %62)
  %64 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %65 = icmp eq i8 %64, 0
  %66 = fcmp ogt double %0, 1.024000e+03
  %67 = and i1 %66, %65
  %68 = select i1 %67, double 0x7FF0000000000000, double %63
  %69 = fcmp olt double %0, -1.075000e+03
  %70 = select i1 %69, double 0.000000e+00, double %68
  ret double %70
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocml_fpclassify_f16(half) local_unnamed_addr #28 {
  %2 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %3 = zext i1 %2 to i32
  %4 = fcmp oeq half %0, 0xH0000
  %5 = select i1 %4, i32 2, i32 %3
  %6 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 144) #21
  %7 = select i1 %6, i32 3, i32 %5
  %8 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 264) #21
  %9 = select i1 %8, i32 4, i32 %7
  ret i32 %9
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_acosh_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_fmuladd_f32(float %2, float %2, float -1.000000e+00) #21
  %4 = fcmp olt float %3, 0.000000e+00
  %5 = tail call float @llvm.sqrt.f32(float %3)
  %6 = select i1 %4, float 0x7FF8000000000000, float %5
  %7 = fadd float %6, %2
  %8 = tail call float @llvm.log2.f32(float %7)
  %9 = fmul float %8, 0x3FE62E4300000000
  %10 = fptrunc float %9 to half
  %11 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %12 = icmp eq i8 %11, 0
  %13 = fcmp olt half %0, 0xH3C00
  %14 = and i1 %13, %12
  %15 = select i1 %14, half 0xH7E00, half %10
  ret half %15
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_asinh_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp oge double %2, 0x5FF0000000000000
  %4 = select i1 %3, double 0x1FF0000000000000, double 1.000000e+00
  %5 = fmul double %2, %4
  %6 = fmul double %5, %5
  %7 = fsub double -0.000000e+00, %6
  %8 = tail call double @llvm.fma.f64(double %5, double %5, double %7) #47
  %9 = select i1 %3, double 0x4000000000000, double 1.000000e+00
  %10 = fadd double %9, %6
  %11 = fsub double %10, %6
  %12 = fsub double %10, %11
  %13 = fsub double %6, %12
  %14 = fsub double %9, %11
  %15 = fadd double %14, %13
  %16 = fadd double %8, %15
  %17 = fadd double %10, %16
  %18 = fsub double %17, %10
  %19 = fsub double %16, %18
  %20 = tail call double @llvm.amdgcn.rsq.f64(double %17) #47
  %21 = fmul double %17, %20
  %22 = fmul double %20, 5.000000e-01
  %23 = fsub double -0.000000e+00, %22
  %24 = tail call double @llvm.fma.f64(double %23, double %21, double 5.000000e-01) #47
  %25 = tail call double @llvm.fma.f64(double %22, double %24, double %22) #47
  %26 = tail call double @llvm.fma.f64(double %21, double %24, double %21) #47
  %27 = fsub double -0.000000e+00, %26
  %28 = tail call double @llvm.fma.f64(double %27, double %26, double %17) #47
  %29 = tail call double @llvm.fma.f64(double %28, double %25, double %26) #47
  %30 = fmul double %29, %29
  %31 = fsub double -0.000000e+00, %30
  %32 = tail call double @llvm.fma.f64(double %29, double %29, double %31) #47
  %33 = fsub double %17, %30
  %34 = fsub double %17, %33
  %35 = fsub double %34, %30
  %36 = fadd double %19, %35
  %37 = fsub double %36, %32
  %38 = fadd double %33, %37
  %39 = fmul double %29, 2.000000e+00
  %40 = tail call double @llvm.amdgcn.rcp.f64(double %39) #47
  %41 = fsub double -0.000000e+00, %39
  %42 = tail call double @llvm.fma.f64(double %41, double %40, double 1.000000e+00) #47
  %43 = tail call double @llvm.fma.f64(double %42, double %40, double %40) #47
  %44 = tail call double @llvm.fma.f64(double %41, double %43, double 1.000000e+00) #47
  %45 = tail call double @llvm.fma.f64(double %44, double %43, double %43) #47
  %46 = fmul double %45, %38
  %47 = tail call double @llvm.fma.f64(double %41, double %46, double %38) #47
  %48 = tail call double @llvm.fma.f64(double %47, double %45, double %46) #47
  %49 = fadd double %29, %48
  %50 = fsub double %49, %29
  %51 = fsub double %48, %50
  %52 = fadd double %5, %49
  %53 = fsub double %52, %5
  %54 = fsub double %52, %53
  %55 = fsub double %5, %54
  %56 = fsub double %49, %53
  %57 = fadd double %56, %55
  %58 = fadd double %51, %57
  %59 = fadd double %52, %58
  %60 = fsub double %59, %52
  %61 = fsub double %58, %60
  %62 = insertelement <2 x double> undef, double %61, i32 0
  %63 = insertelement <2 x double> %62, double %59, i32 1
  %64 = tail call double @__ocmlpriv_lnep_f64(<2 x double> %63) #21
  %65 = select i1 %3, double 0x40762E42FEFA39EF, double 0.000000e+00
  %66 = fadd double %65, %64
  %67 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %68 = icmp eq i8 %67, 0
  %69 = tail call i1 @llvm.amdgcn.class.f64(double %2, i32 512)
  %70 = and i1 %69, %68
  %71 = select i1 %70, double %2, double %66
  %72 = tail call double @llvm.copysign.f64(double %71, double %0)
  ret double %72
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocmlpriv_lnep_f64(<2 x double>) local_unnamed_addr #29 {
  %2 = extractelement <2 x double> %0, i64 1
  %3 = tail call double @llvm.amdgcn.frexp.mant.f64(double %2)
  %4 = fcmp olt double %3, 0x3FE5555555555555
  %5 = zext i1 %4 to i32
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %2)
  %7 = sub nsw i32 %6, %5
  %8 = sub nsw i32 0, %7
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %8) #47
  %10 = extractelement <2 x double> %0, i64 0
  %11 = tail call double @llvm.amdgcn.ldexp.f64(double %10, i32 %8) #47
  %12 = fadd double %9, -1.000000e+00
  %13 = fsub double %12, %9
  %14 = fsub double %12, %13
  %15 = fsub double %9, %14
  %16 = fadd double %13, 1.000000e+00
  %17 = fsub double %15, %16
  %18 = fadd double %11, %17
  %19 = fadd double %12, %18
  %20 = fsub double %19, %12
  %21 = fsub double %18, %20
  %22 = fadd double %9, 1.000000e+00
  %23 = fsub double %22, %9
  %24 = fsub double %22, %23
  %25 = fsub double %9, %24
  %26 = fsub double 1.000000e+00, %23
  %27 = fadd double %26, %25
  %28 = fadd double %11, %27
  %29 = fadd double %22, %28
  %30 = fsub double %29, %22
  %31 = fsub double %28, %30
  %32 = tail call double @llvm.amdgcn.rcp.f64(double %29) #47
  %33 = fsub double -0.000000e+00, %29
  %34 = tail call double @llvm.fma.f64(double %33, double %32, double 1.000000e+00) #47
  %35 = tail call double @llvm.fma.f64(double %34, double %32, double %32) #47
  %36 = tail call double @llvm.fma.f64(double %33, double %35, double 1.000000e+00) #47
  %37 = tail call double @llvm.fma.f64(double %36, double %35, double %35) #47
  %38 = fmul double %19, %37
  %39 = fmul double %29, %38
  %40 = fsub double -0.000000e+00, %39
  %41 = tail call double @llvm.fma.f64(double %38, double %29, double %40) #47
  %42 = tail call double @llvm.fma.f64(double %38, double %31, double %41) #47
  %43 = fadd double %39, %42
  %44 = fsub double %43, %39
  %45 = fsub double %42, %44
  %46 = fsub double %19, %43
  %47 = fsub double %19, %46
  %48 = fsub double %47, %43
  %49 = fadd double %21, %48
  %50 = fsub double %49, %45
  %51 = fadd double %46, %50
  %52 = fsub double %51, %46
  %53 = fsub double %50, %52
  %54 = fmul double %37, %51
  %55 = fmul double %29, %54
  %56 = fsub double -0.000000e+00, %55
  %57 = tail call double @llvm.fma.f64(double %54, double %29, double %56) #47
  %58 = tail call double @llvm.fma.f64(double %54, double %31, double %57) #47
  %59 = fadd double %55, %58
  %60 = fsub double %59, %55
  %61 = fsub double %58, %60
  %62 = fsub double %51, %59
  %63 = fsub double %51, %62
  %64 = fsub double %63, %59
  %65 = fadd double %53, %64
  %66 = fsub double %65, %61
  %67 = fadd double %62, %66
  %68 = fmul double %37, %67
  %69 = fadd double %38, %54
  %70 = fsub double %69, %38
  %71 = fsub double %54, %70
  %72 = fadd double %71, %68
  %73 = fadd double %69, %72
  %74 = fsub double %73, %69
  %75 = fsub double %72, %74
  %76 = fmul double %73, %73
  %77 = fsub double -0.000000e+00, %76
  %78 = tail call double @llvm.fma.f64(double %73, double %73, double %77) #47
  %79 = fmul double %75, 2.000000e+00
  %80 = tail call double @llvm.fma.f64(double %73, double %79, double %78) #47
  %81 = tail call double @llvm.fma.f64(double %75, double %75, double %80) #47
  %82 = fadd double %76, %81
  %83 = fsub double %82, %76
  %84 = fsub double %81, %83
  %85 = tail call double @llvm.fma.f64(double %82, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %86 = tail call double @llvm.fma.f64(double %82, double %85, double 0x3FBE25E43ABE935A)
  %87 = tail call double @llvm.fma.f64(double %82, double %86, double 0x3FC110EF47E6C9C2)
  %88 = tail call double @llvm.fma.f64(double %82, double %87, double 0x3FC3B13BCFA74449)
  %89 = tail call double @llvm.fma.f64(double %82, double %88, double 0x3FC745D171BF3C30)
  %90 = tail call double @llvm.fma.f64(double %82, double %89, double 0x3FCC71C71C7792CE)
  %91 = tail call double @llvm.fma.f64(double %82, double %90, double 0x3FD24924924920DA)
  %92 = tail call double @llvm.fma.f64(double %82, double %91, double 0x3FD999999999999C)
  %93 = sitofp i32 %7 to double
  %94 = fmul double %93, 0x3FE62E42FEFA39EF
  %95 = fsub double -0.000000e+00, %94
  %96 = tail call double @llvm.fma.f64(double %93, double 0x3FE62E42FEFA39EF, double %95) #47
  %97 = tail call double @llvm.fma.f64(double %93, double 0x3C7ABC9E3B39803F, double %96) #47
  %98 = fadd double %94, %97
  %99 = fsub double %98, %94
  %100 = fsub double %97, %99
  %101 = tail call double @llvm.amdgcn.ldexp.f64(double %73, i32 1) #47
  %102 = tail call double @llvm.amdgcn.ldexp.f64(double %75, i32 1) #47
  %103 = fmul double %73, %82
  %104 = fsub double -0.000000e+00, %103
  %105 = tail call double @llvm.fma.f64(double %82, double %73, double %104) #47
  %106 = fmul double %73, %84
  %107 = tail call double @llvm.fma.f64(double %82, double %75, double %106) #47
  %108 = fadd double %105, %107
  %109 = fadd double %103, %108
  %110 = fsub double %109, %103
  %111 = fsub double %108, %110
  %112 = fmul double %82, %92
  %113 = fsub double -0.000000e+00, %112
  %114 = tail call double @llvm.fma.f64(double %82, double %92, double %113) #47
  %115 = tail call double @llvm.fma.f64(double %84, double %92, double %114) #47
  %116 = fadd double %112, %115
  %117 = fsub double %116, %112
  %118 = fsub double %115, %117
  %119 = fadd double %116, 0x3FE5555555555555
  %120 = fadd double %119, 0xBFE5555555555555
  %121 = fsub double %116, %120
  %122 = fadd double %118, 0x3C8543B0D5DF274D
  %123 = fadd double %121, %122
  %124 = fadd double %119, %123
  %125 = fsub double %124, %119
  %126 = fsub double %123, %125
  %127 = fmul double %109, %124
  %128 = fsub double -0.000000e+00, %127
  %129 = tail call double @llvm.fma.f64(double %109, double %124, double %128) #47
  %130 = fmul double %111, %124
  %131 = tail call double @llvm.fma.f64(double %109, double %126, double %130) #47
  %132 = fadd double %129, %131
  %133 = fadd double %127, %132
  %134 = fsub double %133, %127
  %135 = fsub double %132, %134
  %136 = fadd double %101, %133
  %137 = fsub double %136, %101
  %138 = fsub double %133, %137
  %139 = fadd double %102, %135
  %140 = fadd double %138, %139
  %141 = fadd double %136, %140
  %142 = fsub double %141, %136
  %143 = fsub double %140, %142
  %144 = fadd double %98, %141
  %145 = fsub double %144, %98
  %146 = fsub double %144, %145
  %147 = fsub double %98, %146
  %148 = fsub double %141, %145
  %149 = fadd double %148, %147
  %150 = fadd double %100, %143
  %151 = fsub double %150, %100
  %152 = fsub double %150, %151
  %153 = fsub double %100, %152
  %154 = fsub double %143, %151
  %155 = fadd double %154, %153
  %156 = fadd double %150, %149
  %157 = fadd double %144, %156
  %158 = fsub double %157, %144
  %159 = fsub double %156, %158
  %160 = fadd double %155, %159
  %161 = fadd double %157, %160
  ret double %161
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_log10_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.frexp.mant.f64(double %0)
  %3 = fcmp olt double %2, 0x3FE5555555555555
  %4 = zext i1 %3 to i32
  %5 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %7 = sub nsw i32 %6, %4
  %8 = fadd double %5, -1.000000e+00
  %9 = fadd double %5, 1.000000e+00
  %10 = fsub double %9, %5
  %11 = fsub double %9, %10
  %12 = fsub double %5, %11
  %13 = fsub double 1.000000e+00, %10
  %14 = fadd double %13, %12
  %15 = tail call double @llvm.amdgcn.rcp.f64(double %9) #47
  %16 = fsub double -0.000000e+00, %9
  %17 = tail call double @llvm.fma.f64(double %16, double %15, double 1.000000e+00) #47
  %18 = tail call double @llvm.fma.f64(double %17, double %15, double %15) #47
  %19 = tail call double @llvm.fma.f64(double %16, double %18, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %18) #47
  %21 = fmul double %8, %20
  %22 = fmul double %9, %21
  %23 = fsub double -0.000000e+00, %22
  %24 = tail call double @llvm.fma.f64(double %21, double %9, double %23) #47
  %25 = tail call double @llvm.fma.f64(double %21, double %14, double %24) #47
  %26 = fadd double %22, %25
  %27 = fsub double %26, %22
  %28 = fsub double %25, %27
  %29 = fsub double %8, %26
  %30 = fsub double %8, %29
  %31 = fsub double %30, %26
  %32 = fsub double %31, %28
  %33 = fadd double %29, %32
  %34 = fmul double %20, %33
  %35 = fadd double %21, %34
  %36 = fsub double %35, %21
  %37 = fsub double %34, %36
  %38 = fmul double %35, %35
  %39 = fsub double -0.000000e+00, %38
  %40 = tail call double @llvm.fma.f64(double %35, double %35, double %39) #47
  %41 = fmul double %37, 2.000000e+00
  %42 = tail call double @llvm.fma.f64(double %35, double %41, double %40) #47
  %43 = tail call double @llvm.fma.f64(double %37, double %37, double %42) #47
  %44 = fadd double %38, %43
  %45 = fsub double %44, %38
  %46 = fsub double %43, %45
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %48 = tail call double @llvm.fma.f64(double %44, double %47, double 0x3FC7474DD7F4DF2E)
  %49 = tail call double @llvm.fma.f64(double %44, double %48, double 0x3FCC71C016291751)
  %50 = tail call double @llvm.fma.f64(double %44, double %49, double 0x3FD249249B27ACF1)
  %51 = tail call double @llvm.fma.f64(double %44, double %50, double 0x3FD99999998EF7B6)
  %52 = tail call double @llvm.fma.f64(double %44, double %51, double 0x3FE5555555555780)
  %53 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 1) #47
  %54 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 1) #47
  %55 = fmul double %35, %44
  %56 = fsub double -0.000000e+00, %55
  %57 = tail call double @llvm.fma.f64(double %35, double %44, double %56) #47
  %58 = fmul double %37, %44
  %59 = tail call double @llvm.fma.f64(double %35, double %46, double %58) #47
  %60 = fadd double %57, %59
  %61 = fadd double %55, %60
  %62 = fsub double %61, %55
  %63 = fsub double %60, %62
  %64 = fmul double %61, %52
  %65 = fsub double -0.000000e+00, %64
  %66 = tail call double @llvm.fma.f64(double %61, double %52, double %65) #47
  %67 = tail call double @llvm.fma.f64(double %63, double %52, double %66) #47
  %68 = fadd double %64, %67
  %69 = fsub double %68, %64
  %70 = fsub double %67, %69
  %71 = fadd double %53, %68
  %72 = fsub double %71, %53
  %73 = fsub double %71, %72
  %74 = fsub double %53, %73
  %75 = fsub double %68, %72
  %76 = fadd double %75, %74
  %77 = fadd double %54, %70
  %78 = fsub double %77, %54
  %79 = fsub double %77, %78
  %80 = fsub double %54, %79
  %81 = fsub double %70, %78
  %82 = fadd double %81, %80
  %83 = fadd double %77, %76
  %84 = fadd double %71, %83
  %85 = fsub double %84, %71
  %86 = fsub double %83, %85
  %87 = fadd double %82, %86
  %88 = fadd double %84, %87
  %89 = fsub double %88, %84
  %90 = fsub double %87, %89
  %91 = sitofp i32 %7 to double
  %92 = fmul double %91, 0x3FD34413509F79FF
  %93 = fsub double -0.000000e+00, %92
  %94 = tail call double @llvm.fma.f64(double %91, double 0x3FD34413509F79FF, double %93) #47
  %95 = tail call double @llvm.fma.f64(double %91, double 0xBC49DC1DA994FD21, double %94) #47
  %96 = fadd double %92, %95
  %97 = fsub double %96, %92
  %98 = fsub double %95, %97
  %99 = fmul double %88, 0x3FDBCB7B1526E50E
  %100 = fsub double -0.000000e+00, %99
  %101 = tail call double @llvm.fma.f64(double %88, double 0x3FDBCB7B1526E50E, double %100) #47
  %102 = fmul double %88, 0x3C695355BAAAFAD3
  %103 = tail call double @llvm.fma.f64(double %90, double 0x3FDBCB7B1526E50E, double %102) #47
  %104 = fadd double %101, %103
  %105 = fadd double %99, %104
  %106 = fsub double %105, %99
  %107 = fsub double %104, %106
  %108 = fadd double %96, %105
  %109 = fsub double %108, %96
  %110 = fsub double %108, %109
  %111 = fsub double %96, %110
  %112 = fsub double %105, %109
  %113 = fadd double %112, %111
  %114 = fadd double %98, %107
  %115 = fsub double %114, %98
  %116 = fsub double %114, %115
  %117 = fsub double %98, %116
  %118 = fsub double %107, %115
  %119 = fadd double %118, %117
  %120 = fadd double %114, %113
  %121 = fadd double %108, %120
  %122 = fsub double %121, %108
  %123 = fsub double %120, %122
  %124 = fadd double %119, %123
  %125 = fadd double %121, %124
  %126 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %127 = icmp eq i8 %126, 0
  %128 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %129 = select i1 %128, double %0, double %125
  %130 = fcmp olt double %0, 0.000000e+00
  %131 = select i1 %130, double 0x7FF8000000000000, double %129
  %132 = fcmp oeq double %0, 0.000000e+00
  %133 = select i1 %132, double 0xFFF0000000000000, double %131
  %134 = select i1 %127, double %133, double %125
  ret double %134
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected float @__ocml_sincos_f32(float, float addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = bitcast float %0 to i32
  %4 = and i32 %3, 2147483647
  %5 = bitcast i32 %4 to float
  %6 = tail call [2 x i32] @__ocmlpriv_trigred_f32(float %5) #21
  %7 = extractvalue [2 x i32] %6, 0
  %8 = extractvalue [2 x i32] %6, 1
  %9 = bitcast i32 %7 to float
  %10 = tail call [2 x i32] @__ocmlpriv_sincosred_f32(float %9) #21
  %11 = extractvalue [2 x i32] %10, 0
  %12 = extractvalue [2 x i32] %10, 1
  %13 = icmp sgt i32 %8, 1
  %14 = select i1 %13, i32 -2147483648, i32 0
  %15 = and i32 %8, 1
  %16 = icmp ne i32 %15, 0
  %17 = bitcast i32 %12 to float
  %18 = bitcast i32 %11 to float
  %19 = select i1 %16, float %17, float %18
  %20 = bitcast float %19 to i32
  %21 = and i32 %3, -2147483648
  %22 = xor i32 %14, %21
  %23 = xor i32 %22, %20
  %24 = bitcast i32 %23 to float
  %25 = fsub float -0.000000e+00, %18
  %26 = select i1 %16, float %25, float %17
  %27 = bitcast float %26 to i32
  %28 = xor i32 %14, %27
  %29 = bitcast i32 %28 to float
  %30 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %31 = icmp eq i8 %30, 0
  %32 = icmp ugt i32 %4, 2139095039
  %33 = and i1 %32, %31
  %34 = select i1 %33, float 0x7FF8000000000000, float %24
  %35 = select i1 %33, float 0x7FF8000000000000, float %29
  store float %35, float addrspace(5)* %1, align 4, !tbaa !126
  ret float %34
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_nearbyint_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.rint.f16(half %0) #21
  ret half %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_expm1_f64(double) local_unnamed_addr #28 {
  %2 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %0, i32 1
  %3 = tail call <2 x double> @__ocmlpriv_epexpep_f64(<2 x double> %2) #21
  %4 = extractelement <2 x double> %3, i64 1
  %5 = fadd double %4, -1.000000e+00
  %6 = fsub double %5, %4
  %7 = fsub double %5, %6
  %8 = fsub double %4, %7
  %9 = fadd double %6, 1.000000e+00
  %10 = fsub double %8, %9
  %11 = extractelement <2 x double> %3, i64 0
  %12 = fadd double %11, %10
  %13 = fadd double %5, %12
  %14 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %15 = icmp eq i8 %14, 0
  %16 = fcmp ogt double %0, 0x40862E42FEFA39EF
  %17 = and i1 %16, %15
  %18 = select i1 %17, double 0x7FF0000000000000, double %13
  %19 = fcmp olt double %0, -3.700000e+01
  %20 = select i1 %19, double -1.000000e+00, double %18
  ret double %20
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_fdim_f32(float, float) local_unnamed_addr #28 {
  %3 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %16

; <label>:5:                                      ; preds = %2
  %6 = tail call i32 @__ocml_isnan_f32(float %0) #21
  %7 = tail call i32 @__ocml_isnan_f32(float %1) #21
  %8 = or i32 %7, %6
  %9 = sub nsw i32 0, %8
  %10 = and i32 %9, 2143289344
  %11 = fcmp ogt float %0, %1
  %12 = fsub float %0, %1
  %13 = bitcast float %12 to i32
  %14 = select i1 %11, i32 %13, i32 0
  %15 = or i32 %10, %14
  br label %21

; <label>:16:                                     ; preds = %2
  %17 = fcmp ogt float %0, %1
  %18 = fsub float %0, %1
  %19 = bitcast float %18 to i32
  %20 = select i1 %17, i32 %19, i32 0
  br label %21

; <label>:21:                                     ; preds = %16, %5
  %22 = phi i32 [ %20, %16 ], [ %15, %5 ]
  %23 = bitcast i32 %22 to float
  ret float %23
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_isnan_f32(float) local_unnamed_addr #31 {
  %2 = fcmp uno float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_fmin_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.canonicalize.f16(half %0) #21
  %4 = tail call half @llvm.canonicalize.f16(half %1) #21
  %5 = tail call half @llvm.minnum.f16(half %3, half %4) #21
  ret half %5
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_floor_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.floor.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isfinite_f64(double) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 504)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_round_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.trunc.f32(float %0)
  %3 = fsub float %0, %2
  %4 = tail call float @llvm.fabs.f32(float %3)
  %5 = tail call float @llvm.copysign.f32(float 1.000000e+00, float %0)
  %6 = fcmp oge float %4, 5.000000e-01
  %7 = select i1 %6, float %5, float 0.000000e+00
  %8 = fadd float %2, %7
  ret float %8
}

; Function Attrs: nounwind writeonly
define linkonce_odr protected double @__ocml_remquo_f64(double, double, i32 addrspace(5)* nocapture) local_unnamed_addr #32 {
  %4 = tail call double @llvm.fabs.f64(double %0)
  %5 = tail call double @llvm.fabs.f64(double %1)
  %6 = fcmp ogt double %4, %5
  br i1 %6, label %7, label %83

; <label>:7:                                      ; preds = %3
  %8 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %4)
  %9 = tail call double @llvm.amdgcn.frexp.mant.f64(double %4)
  %10 = tail call double @llvm.amdgcn.ldexp.f64(double %9, i32 26)
  %11 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %5)
  %12 = add nsw i32 %11, -1
  %13 = tail call double @llvm.amdgcn.frexp.mant.f64(double %5)
  %14 = tail call double @llvm.amdgcn.ldexp.f64(double %13, i32 1)
  %15 = sub i32 %8, %11
  %16 = fdiv double 1.000000e+00, %14
  %17 = icmp sgt i32 %15, 26
  br i1 %17, label %18, label %37

; <label>:18:                                     ; preds = %18, %7
  %19 = phi double [ %34, %18 ], [ %10, %7 ]
  %20 = phi i32 [ %35, %18 ], [ %15, %7 ]
  %21 = phi i32 [ %33, %18 ], [ 0, %7 ]
  %22 = fmul double %16, %19
  %23 = tail call double @llvm.rint.f64(double %22)
  %24 = fsub double -0.000000e+00, %23
  %25 = tail call double @llvm.fma.f64(double %24, double %14, double %19) #47
  %26 = fcmp olt double %25, 0.000000e+00
  %27 = zext i1 %26 to i32
  %28 = fadd double %14, %25
  %29 = select i1 %26, double %28, double %25
  %30 = fptosi double %23 to i32
  %31 = sub nsw i32 %30, %27
  %32 = shl i32 %21, 26
  %33 = or i32 %31, %32
  %34 = tail call double @llvm.amdgcn.ldexp.f64(double %29, i32 26)
  %35 = add nsw i32 %20, -26
  %36 = icmp sgt i32 %35, 26
  br i1 %36, label %18, label %37

; <label>:37:                                     ; preds = %18, %7
  %38 = phi i32 [ 0, %7 ], [ %33, %18 ]
  %39 = phi i32 [ %15, %7 ], [ %35, %18 ]
  %40 = phi double [ %10, %7 ], [ %34, %18 ]
  %41 = add nsw i32 %39, -25
  %42 = tail call double @llvm.amdgcn.ldexp.f64(double %40, i32 %41)
  %43 = fmul double %16, %42
  %44 = tail call double @llvm.rint.f64(double %43)
  %45 = fsub double -0.000000e+00, %44
  %46 = tail call double @llvm.fma.f64(double %45, double %14, double %42) #47
  %47 = fcmp olt double %46, 0.000000e+00
  %48 = zext i1 %47 to i32
  %49 = fadd double %14, %46
  %50 = select i1 %47, double %49, double %46
  %51 = fptosi double %44 to i32
  %52 = sub nsw i32 %51, %48
  %53 = add nsw i32 %39, 1
  %54 = and i32 %53, 31
  %55 = shl i32 %38, %54
  %56 = or i32 %52, %55
  %57 = fmul double %50, 2.000000e+00
  %58 = fcmp ogt double %57, %14
  %59 = zext i1 %58 to i32
  %60 = fcmp oeq double %57, %14
  %61 = zext i1 %60 to i32
  %62 = and i32 %56, %61
  %63 = or i32 %62, %59
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, double 0.000000e+00, double %14
  %66 = fsub double %50, %65
  %67 = add nsw i32 %63, %56
  %68 = bitcast double %0 to <2 x i32>
  %69 = extractelement <2 x i32> %68, i64 1
  %70 = bitcast double %1 to <2 x i32>
  %71 = extractelement <2 x i32> %70, i64 1
  %72 = xor i32 %71, %69
  %73 = ashr i32 %72, 31
  %74 = and i32 %67, 127
  %75 = xor i32 %74, %73
  %76 = sub nsw i32 %75, %73
  %77 = tail call double @llvm.amdgcn.ldexp.f64(double %66, i32 %12)
  %78 = bitcast double %0 to i64
  %79 = and i64 %78, -9223372036854775808
  %80 = bitcast double %77 to i64
  %81 = xor i64 %79, %80
  %82 = bitcast i64 %81 to double
  br label %107

; <label>:83:                                     ; preds = %3
  %84 = fcmp olt double %5, 0x7FE0000000000000
  %85 = fmul double %4, 2.000000e+00
  %86 = fcmp ogt double %85, %5
  %87 = and i1 %84, %86
  %88 = fmul double %5, 5.000000e-01
  %89 = fcmp ogt double %4, %88
  %90 = or i1 %87, %89
  %91 = bitcast double %0 to <2 x i32>
  %92 = extractelement <2 x i32> %91, i64 1
  %93 = bitcast double %1 to <2 x i32>
  %94 = extractelement <2 x i32> %93, i64 1
  %95 = xor i32 %94, %92
  %96 = ashr i32 %95, 30
  %97 = or i32 %96, 1
  %98 = sitofp i32 %97 to double
  %99 = fsub double -0.000000e+00, %98
  %100 = tail call double @llvm.fma.f64(double %1, double %99, double %0)
  %101 = select i1 %90, double %100, double %0
  %102 = fcmp oeq double %4, %5
  %103 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %0)
  %104 = select i1 %102, double %103, double %101
  %105 = or i1 %102, %90
  %106 = select i1 %105, i32 %97, i32 0
  br label %107

; <label>:107:                                    ; preds = %83, %37
  %108 = phi i32 [ %76, %37 ], [ %106, %83 ]
  %109 = phi double [ %82, %37 ], [ %104, %83 ]
  %110 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %111 = icmp eq i8 %110, 0
  %112 = fcmp oeq double %1, 0.000000e+00
  %113 = fcmp uno double %1, 0.000000e+00
  %114 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %115 = or i1 %114, %113
  %116 = or i1 %112, %115
  %117 = and i1 %116, %111
  %118 = select i1 %117, i32 0, i32 %108
  %119 = select i1 %117, double 0x7FF8000000000000, double %109
  store i32 %118, i32 addrspace(5)* %2, align 4, !tbaa !120
  ret double %119
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_sin_f32(float) local_unnamed_addr #28 {
  %2 = bitcast float %0 to i32
  %3 = and i32 %2, 2147483647
  %4 = bitcast i32 %3 to float
  %5 = tail call [2 x i32] @__ocmlpriv_trigred_f32(float %4) #21
  %6 = extractvalue [2 x i32] %5, 0
  %7 = extractvalue [2 x i32] %5, 1
  %8 = bitcast i32 %6 to float
  %9 = tail call [2 x i32] @__ocmlpriv_sincosred_f32(float %8) #21
  %10 = extractvalue [2 x i32] %9, 0
  %11 = extractvalue [2 x i32] %9, 1
  %12 = and i32 %7, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 %10, i32 %11
  %15 = icmp sgt i32 %7, 1
  %16 = select i1 %15, i32 -2147483648, i32 0
  %17 = and i32 %2, -2147483648
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, %14
  %20 = bitcast i32 %19 to float
  %21 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %22 = icmp eq i8 %21, 0
  %23 = icmp ugt i32 %3, 2139095039
  %24 = and i1 %23, %22
  %25 = select i1 %24, float 0x7FF8000000000000, float %20
  ret float %25
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_exp_f64(double) local_unnamed_addr #29 {
  %2 = fmul double %0, 0x3FF71547652B82FE
  %3 = tail call double @llvm.rint.f64(double %2)
  %4 = tail call double @llvm.fma.f64(double %3, double 0xBFE62E42FEFA3000, double %0)
  %5 = fmul double %3, 0x3D53DE6AF278ECE6
  %6 = fsub double %4, %5
  %7 = fsub double %4, %6
  %8 = fsub double %7, %5
  %9 = tail call double @llvm.fma.f64(double %6, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %10 = tail call double @llvm.fma.f64(double %6, double %9, double 0x3EC71DEE623FDE64)
  %11 = tail call double @llvm.fma.f64(double %6, double %10, double 0x3EFA01997C89E6B0)
  %12 = tail call double @llvm.fma.f64(double %6, double %11, double 0x3F2A01A014761F6E)
  %13 = tail call double @llvm.fma.f64(double %6, double %12, double 0x3F56C16C1852B7B0)
  %14 = tail call double @llvm.fma.f64(double %6, double %13, double 0x3F81111111122322)
  %15 = tail call double @llvm.fma.f64(double %6, double %14, double 0x3FA55555555502A1)
  %16 = tail call double @llvm.fma.f64(double %6, double %15, double 0x3FC5555555555511)
  %17 = tail call double @llvm.fma.f64(double %6, double %16, double 0x3FE000000000000B)
  %18 = fmul double %6, %6
  %19 = fsub double -0.000000e+00, %18
  %20 = tail call double @llvm.fma.f64(double %6, double %6, double %19) #47
  %21 = fmul double %8, 2.000000e+00
  %22 = tail call double @llvm.fma.f64(double %6, double %21, double %20) #47
  %23 = tail call double @llvm.fma.f64(double %8, double %8, double %22) #47
  %24 = fadd double %18, %23
  %25 = fsub double %24, %18
  %26 = fsub double %23, %25
  %27 = fmul double %24, %17
  %28 = fsub double -0.000000e+00, %27
  %29 = tail call double @llvm.fma.f64(double %24, double %17, double %28) #47
  %30 = tail call double @llvm.fma.f64(double %26, double %17, double %29) #47
  %31 = fadd double %27, %30
  %32 = fsub double %31, %27
  %33 = fsub double %30, %32
  %34 = fadd double %6, %31
  %35 = fsub double %34, %6
  %36 = fsub double %31, %35
  %37 = fadd double %8, %33
  %38 = fadd double %36, %37
  %39 = fadd double %34, %38
  %40 = fadd double %39, 1.000000e+00
  %41 = fptosi double %3 to i32
  %42 = tail call double @llvm.amdgcn.ldexp.f64(double %40, i32 %41)
  %43 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %44 = icmp eq i8 %43, 0
  %45 = fcmp ogt double %0, 1.024000e+03
  %46 = and i1 %45, %44
  %47 = select i1 %46, double 0x7FF0000000000000, double %42
  %48 = fcmp olt double %0, -1.075000e+03
  %49 = select i1 %48, double 0.000000e+00, double %47
  ret double %49
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_exp2_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.exp2.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.exp2.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_floor_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.floor.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.floor.f16(half) #25

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected double @__ocml_nan_f64(i64) local_unnamed_addr #31 {
  %2 = and i64 %0, 2251799813685247
  %3 = or i64 %2, 9221120237041090560
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_tanpi_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %3 @__ocmlpriv_trigpired_f64(double %2) #21
  %4 = extractvalue %3 %3, 0
  %5 = extractvalue %3 %3, 1
  %6 = and i32 %5, 1
  %7 = tail call double @__ocmlpriv_tanpired_f64(double %4, i32 %6) #21
  %8 = bitcast double %7 to <2 x i32>
  %9 = add i32 %5, -1
  %10 = icmp ult i32 %9, 2
  %11 = fcmp oeq double %4, 0.000000e+00
  %12 = and i1 %11, %10
  %13 = select i1 %12, i32 -2147483648, i32 0
  %14 = extractelement <2 x i32> %8, i64 1
  %15 = bitcast double %0 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i64 1
  %17 = and i32 %16, -2147483648
  %18 = xor i32 %14, %17
  %19 = xor i32 %18, %13
  %20 = insertelement <2 x i32> %8, i32 %19, i64 1
  %21 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %22 = icmp eq i8 %21, 0
  %23 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %24 = and i1 %23, %22
  %25 = select i1 %24, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %20
  %26 = bitcast <2 x i32> %25 to double
  ret double %26
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocmlpriv_tanpired_f64(double, i32) local_unnamed_addr #29 {
  %3 = fmul double %0, %0
  %4 = tail call double @llvm.fma.f64(double %3, double 0x41F3FAD0A71EA6D1, double 0xC1D11A76AC97377B)
  %5 = tail call double @llvm.fma.f64(double %3, double %4, double 0x41ABA2BCACA6DA1B)
  %6 = tail call double @llvm.fma.f64(double %3, double %5, double 0xC1579E8E2D7AAF57)
  %7 = tail call double @llvm.fma.f64(double %3, double %6, double 0x414C1C1102E46ECC)
  %8 = tail call double @llvm.fma.f64(double %3, double %7, double 0x41231291BBCB5588)
  %9 = tail call double @llvm.fma.f64(double %3, double %8, double 0x410486B2D6BB3DB2)
  %10 = tail call double @llvm.fma.f64(double %3, double %9, double 0x40E45BE1B46FF156)
  %11 = tail call double @llvm.fma.f64(double %3, double %10, double 0x40C45F61B419C746)
  %12 = tail call double @llvm.fma.f64(double %3, double %11, double 0x40A45F311045A4FF)
  %13 = tail call double @llvm.fma.f64(double %3, double %12, double 0x40845F4739A998C7)
  %14 = tail call double @llvm.fma.f64(double %3, double %13, double 0x40645FFF9B243050)
  %15 = tail call double @llvm.fma.f64(double %3, double %14, double 0x404466BC6775CF74)
  %16 = tail call double @llvm.fma.f64(double %3, double %15, double 0x4024ABBCE625BE8B)
  %17 = fmul double %3, %0
  %18 = fmul double %17, %16
  %19 = tail call double @llvm.fma.f64(double %0, double 0x400921FB54442D18, double %18)
  %20 = fdiv double -1.000000e+00, %19
  %21 = icmp eq i32 %1, 0
  %22 = select i1 %21, double %19, double %20
  ret double %22
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_exp10_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = load i8, i8 addrspace(4)* @__oclc_unsafe_math_opt, align 1, !tbaa !140, !range !43
  %5 = icmp ne i8 %4, 0
  br i1 %3, label %41, label %6

; <label>:6:                                      ; preds = %1
  br i1 %5, label %7, label %13

; <label>:7:                                      ; preds = %6
  %8 = fmul float %0, 0x400A920000000000
  %9 = tail call float @llvm.exp2.f32(float %8)
  %10 = fmul float %0, 0x3F44F09780000000
  %11 = tail call float @llvm.exp2.f32(float %10)
  %12 = fmul float %9, %11
  br label %83

; <label>:13:                                     ; preds = %6
  %14 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %15 = icmp sgt i32 %14, 899
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %13
  switch i32 %14, label %22 [
    i32 801, label %17
    i32 701, label %17
  ]

; <label>:17:                                     ; preds = %16, %16, %13
  %18 = fmul float %0, 0x400A934F00000000
  %19 = fsub float -0.000000e+00, %18
  %20 = tail call float @llvm.fma.f32(float %0, float 0x400A934F00000000, float %19)
  %21 = tail call float @llvm.fma.f32(float %0, float 0x3E72F346E0000000, float %20)
  br label %31

; <label>:22:                                     ; preds = %16
  %23 = bitcast float %0 to i32
  %24 = and i32 %23, -4096
  %25 = bitcast i32 %24 to float
  %26 = fsub float %0, %25
  %27 = fmul float %25, 0x400A920000000000
  %28 = fmul float %26, 0x3F44F09780000000
  %29 = tail call float @__ocml_fmuladd_f32(float %26, float 0x400A920000000000, float %28) #21
  %30 = tail call float @__ocml_fmuladd_f32(float %25, float 0x3F44F09780000000, float %29) #21
  br label %31

; <label>:31:                                     ; preds = %22, %17
  %32 = phi float [ %21, %17 ], [ %30, %22 ]
  %33 = phi float [ %18, %17 ], [ %27, %22 ]
  %34 = tail call float @llvm.exp2.f32(float %32)
  %35 = tail call float @llvm.exp2.f32(float %33)
  %36 = fmul float %34, %35
  %37 = fcmp olt float %0, 0xC042F70300000000
  %38 = select i1 %37, float 0.000000e+00, float %36
  %39 = fcmp ogt float %0, 0x4043441360000000
  %40 = select i1 %39, float 0x7FF0000000000000, float %38
  br label %83

; <label>:41:                                     ; preds = %1
  %42 = fcmp olt float %0, 0xC042F70300000000
  %43 = select i1 %42, float 3.200000e+01, float 0.000000e+00
  %44 = fadd float %43, %0
  br i1 %5, label %45, label %53

; <label>:45:                                     ; preds = %41
  %46 = fmul float %44, 0x400A920000000000
  %47 = tail call float @llvm.exp2.f32(float %46)
  %48 = fmul float %44, 0x3F44F09780000000
  %49 = tail call float @llvm.exp2.f32(float %48)
  %50 = fmul float %47, %49
  %51 = select i1 %42, float 0x3949F623E0000000, float 1.000000e+00
  %52 = fmul float %51, %50
  br label %83

; <label>:53:                                     ; preds = %41
  %54 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %55 = icmp sgt i32 %54, 899
  br i1 %55, label %57, label %56

; <label>:56:                                     ; preds = %53
  switch i32 %54, label %62 [
    i32 801, label %57
    i32 701, label %57
  ]

; <label>:57:                                     ; preds = %56, %56, %53
  %58 = fmul float %44, 0x400A934F00000000
  %59 = fsub float -0.000000e+00, %58
  %60 = tail call float @llvm.fma.f32(float %44, float 0x400A934F00000000, float %59)
  %61 = tail call float @llvm.fma.f32(float %44, float 0x3E72F346E0000000, float %60)
  br label %71

; <label>:62:                                     ; preds = %56
  %63 = bitcast float %44 to i32
  %64 = and i32 %63, -4096
  %65 = bitcast i32 %64 to float
  %66 = fsub float %44, %65
  %67 = fmul float %65, 0x400A920000000000
  %68 = fmul float %66, 0x3F44F09780000000
  %69 = tail call float @__ocml_fmuladd_f32(float %66, float 0x400A920000000000, float %68) #21
  %70 = tail call float @__ocml_fmuladd_f32(float %65, float 0x3F44F09780000000, float %69) #21
  br label %71

; <label>:71:                                     ; preds = %62, %57
  %72 = phi float [ %61, %57 ], [ %70, %62 ]
  %73 = phi float [ %58, %57 ], [ %67, %62 ]
  %74 = tail call float @llvm.exp2.f32(float %72)
  %75 = tail call float @llvm.exp2.f32(float %73)
  %76 = fmul float %74, %75
  %77 = select i1 %42, float 0x3949F623E0000000, float 1.000000e+00
  %78 = fmul float %77, %76
  %79 = fcmp olt float %44, 0xC0466D3E80000000
  %80 = select i1 %79, float 0.000000e+00, float %78
  %81 = fcmp ogt float %44, 0x4043441360000000
  %82 = select i1 %81, float 0x7FF0000000000000, float %80
  br label %83

; <label>:83:                                     ; preds = %71, %45, %31, %7
  %84 = phi float [ %12, %7 ], [ %40, %31 ], [ %52, %45 ], [ %82, %71 ]
  ret float %84
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_expm1_f32(float) local_unnamed_addr #28 {
  %2 = insertelement <2 x float> <float 0.000000e+00, float undef>, float %0, i32 1
  %3 = tail call <2 x float> @__ocmlpriv_epexpep_f32(<2 x float> %2) #21
  %4 = extractelement <2 x float> %3, i64 1
  %5 = fadd float %4, -1.000000e+00
  %6 = fsub float %5, %4
  %7 = fsub float %5, %6
  %8 = fsub float %4, %7
  %9 = fadd float %6, 1.000000e+00
  %10 = fsub float %8, %9
  %11 = extractelement <2 x float> %3, i64 0
  %12 = fadd float %11, %10
  %13 = fadd float %5, %12
  %14 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %15 = icmp eq i8 %14, 0
  %16 = fcmp ogt float %0, 0x40562E42E0000000
  %17 = and i1 %16, %15
  %18 = select i1 %17, float 0x7FF0000000000000, float %13
  %19 = fcmp olt float %0, -1.700000e+01
  %20 = select i1 %19, float -1.000000e+00, float %18
  ret float %20
}

; Function Attrs: nounwind writeonly
define linkonce_odr protected double @__ocml_modf_f64(double, double addrspace(5)* nocapture) local_unnamed_addr #32 {
  %3 = tail call double @llvm.trunc.f64(double %0)
  %4 = fsub double %0, %3
  %5 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %6 = select i1 %5, double 0.000000e+00, double %4
  store double %3, double addrspace(5)* %1, align 8, !tbaa !128
  %7 = tail call double @llvm.copysign.f64(double %6, double %0)
  ret double %7
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isfinite_f32(float) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 504)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_scalb_f64(double, double) local_unnamed_addr #28 {
  %3 = tail call double @llvm.maxnum.f64(double %1, double 0xC130000000000000)
  %4 = tail call double @llvm.minnum.f64(double %3, double 0x4130000000000000)
  %5 = tail call double @llvm.rint.f64(double %4)
  %6 = fptosi double %5 to i32
  %7 = tail call double @__ocml_ldexp_f64(double %0, i32 %6) #21
  %8 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %21

; <label>:10:                                     ; preds = %2
  %11 = fcmp uno double %0, %1
  %12 = fcmp oeq double %0, 0.000000e+00
  %13 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 512)
  %14 = and i1 %12, %13
  %15 = or i1 %11, %14
  %16 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %17 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 4)
  %18 = and i1 %16, %17
  %19 = or i1 %18, %15
  %20 = select i1 %19, double 0x7FF8000000000000, double %7
  br label %21

; <label>:21:                                     ; preds = %10, %2
  %22 = phi double [ %7, %2 ], [ %20, %10 ]
  ret double %22
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_ldexp_f64(double, i32) local_unnamed_addr #29 {
  %3 = tail call double @llvm.amdgcn.ldexp.f64(double %0, i32 %1)
  ret double %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_sqrt_f64(double) local_unnamed_addr #29 {
  %2 = fcmp olt double %0, 0x1000000000000000
  %3 = select i1 %2, double 0x4FF0000000000000, double 1.000000e+00
  %4 = fmul double %3, %0
  %5 = tail call double @llvm.amdgcn.rsq.f64(double %4)
  %6 = fmul double %4, %5
  %7 = fmul double %5, 5.000000e-01
  %8 = fsub double -0.000000e+00, %7
  %9 = tail call double @llvm.fma.f64(double %8, double %6, double 5.000000e-01)
  %10 = tail call double @llvm.fma.f64(double %7, double %9, double %7)
  %11 = tail call double @llvm.fma.f64(double %6, double %9, double %6)
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %12, double %11, double %4)
  %14 = tail call double @llvm.fma.f64(double %13, double %10, double %11)
  %15 = fsub double -0.000000e+00, %14
  %16 = tail call double @llvm.fma.f64(double %15, double %14, double %4)
  %17 = tail call double @llvm.fma.f64(double %16, double %10, double %14)
  %18 = select i1 %2, double 0x37F0000000000000, double 1.000000e+00
  %19 = fmul double %18, %17
  %20 = fcmp oeq double %4, 0.000000e+00
  %21 = fcmp oeq double %4, 0x7FF0000000000000
  %22 = or i1 %20, %21
  %23 = select i1 %22, double %4, double %19
  ret double %23
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_cospi_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigpired_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = tail call i32 @__ocmlpriv_sincospired_f16(half %5) #21
  %7 = trunc i32 %6 to i16
  %8 = bitcast i16 %7 to half
  %9 = lshr i32 %6, 16
  %10 = trunc i32 %9 to i16
  %11 = fsub half 0xH8000, %8
  %12 = and i32 %3, 65536
  %13 = icmp eq i32 %12, 0
  %14 = bitcast half %11 to i16
  %15 = select i1 %13, i16 %10, i16 %14
  %16 = icmp sgt i32 %3, 131071
  %17 = select i1 %16, i16 -32768, i16 0
  %18 = xor i16 %15, %17
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %22 = and i1 %21, %20
  %23 = bitcast i16 %18 to half
  %24 = select i1 %22, half 0xH7E00, half %23
  ret half %24
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected half @__ocml_sincos_f16(half, half addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = tail call half @llvm.fabs.f16(half %0) #21
  %4 = tail call i32 @__ocmlpriv_trigred_f16(half %3) #21
  %5 = trunc i32 %4 to i16
  %6 = bitcast i16 %5 to half
  %7 = tail call i32 @__ocmlpriv_sincosred_f16(half %6) #21
  %8 = trunc i32 %7 to i16
  %9 = bitcast i16 %8 to half
  %10 = lshr i32 %7, 16
  %11 = trunc i32 %10 to i16
  %12 = bitcast i16 %11 to half
  %13 = icmp sgt i32 %4, 131071
  %14 = and i32 %4, 65536
  %15 = icmp ne i32 %14, 0
  %16 = select i1 %15, half %12, half %9
  %17 = bitcast half %16 to i16
  %18 = select i1 %13, i16 -32768, i16 0
  %19 = bitcast half %0 to i16
  %20 = and i16 %19, -32768
  %21 = xor i16 %18, %20
  %22 = xor i16 %21, %17
  %23 = fsub half 0xH8000, %9
  %24 = select i1 %15, half %23, half %12
  %25 = bitcast half %24 to i16
  %26 = xor i16 %18, %25
  %27 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %28 = icmp eq i8 %27, 0
  %29 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %30 = and i1 %29, %28
  %31 = select i1 %30, i16 32256, i16 %26
  %32 = bitcast half addrspace(5)* %1 to i16 addrspace(5)*
  store i16 %31, i16 addrspace(5)* %32, align 2, !tbaa !124
  %33 = bitcast i16 %22 to half
  %34 = select i1 %30, half 0xH7E00, half %33
  ret half %34
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocmlpriv_trigred_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FE45F3060000000
  %4 = tail call float @llvm.rint.f32(float %3)
  %5 = tail call float @__ocml_fmuladd_f32(float %4, float 0xBFF9200000000000, float %2) #21
  %6 = tail call float @__ocml_fmuladd_f32(float %4, float 0xBF3FA00000000000, float %5) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %4, float 0xBEB54442E0000000, float %6) #21
  %8 = fptrunc float %7 to half
  %9 = fptosi float %4 to i32
  %10 = bitcast half %8 to i16
  %11 = shl i32 %9, 16
  %12 = and i32 %11, 196608
  %13 = zext i16 %10 to i32
  %14 = or i32 %12, %13
  ret i32 %14
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected i32 @__ocmlpriv_sincosred_f16(half) local_unnamed_addr #28 {
  %2 = fmul half %0, %0
  %3 = tail call half @llvm.fma.f16(half %2, half 0xH202C, half 0xHB155) #21
  %4 = fmul half %2, %3
  %5 = tail call half @llvm.fma.f16(half %0, half %4, half %0) #21
  %6 = tail call half @llvm.fma.f16(half %2, half 0xH292D, half 0xHB7FF) #21
  %7 = tail call half @llvm.fma.f16(half %2, half %6, half 0xH3C00) #21
  %8 = bitcast half %5 to i16
  %9 = bitcast half %7 to i16
  %10 = zext i16 %9 to i32
  %11 = shl nuw i32 %10, 16
  %12 = zext i16 %8 to i32
  %13 = or i32 %11, %12
  ret i32 %13
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_atanh_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fadd double %2, 1.000000e+00
  %4 = fadd double %3, -1.000000e+00
  %5 = fsub double %2, %4
  %6 = fsub double 1.000000e+00, %2
  %7 = fsub double 1.000000e+00, %6
  %8 = fsub double %7, %2
  %9 = tail call double @llvm.amdgcn.rcp.f64(double %6) #47
  %10 = fsub double -0.000000e+00, %6
  %11 = tail call double @llvm.fma.f64(double %10, double %9, double 1.000000e+00) #47
  %12 = tail call double @llvm.fma.f64(double %11, double %9, double %9) #47
  %13 = tail call double @llvm.fma.f64(double %10, double %12, double 1.000000e+00) #47
  %14 = tail call double @llvm.fma.f64(double %13, double %12, double %12) #47
  %15 = fmul double %3, %14
  %16 = fmul double %6, %15
  %17 = fsub double -0.000000e+00, %16
  %18 = tail call double @llvm.fma.f64(double %15, double %6, double %17) #47
  %19 = tail call double @llvm.fma.f64(double %15, double %8, double %18) #47
  %20 = fadd double %16, %19
  %21 = fsub double %20, %16
  %22 = fsub double %19, %21
  %23 = fsub double %3, %20
  %24 = fsub double %3, %23
  %25 = fsub double %24, %20
  %26 = fsub double %25, %22
  %27 = fadd double %5, %26
  %28 = fadd double %23, %27
  %29 = fmul double %14, %28
  %30 = fadd double %15, %29
  %31 = fsub double %30, %15
  %32 = fsub double %29, %31
  %33 = insertelement <2 x double> undef, double %32, i32 0
  %34 = insertelement <2 x double> %33, double %30, i32 1
  %35 = tail call double @__ocmlpriv_lnep_f64(<2 x double> %34) #21
  %36 = fmul double %35, 5.000000e-01
  %37 = fcmp olt double %2, 0x3E40000000000000
  %38 = select i1 %37, double %2, double %36
  %39 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %40 = icmp eq i8 %39, 0
  %41 = fcmp ogt double %2, 1.000000e+00
  %42 = select i1 %41, double 0x7FF8000000000000, double %38
  %43 = fcmp oeq double %2, 1.000000e+00
  %44 = select i1 %43, double 0x7FF0000000000000, double %42
  %45 = select i1 %40, double %44, double %38
  %46 = tail call double @llvm.copysign.f64(double %45, double %0)
  ret double %46
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_sin_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigred_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = tail call i32 @__ocmlpriv_sincosred_f16(half %5) #21
  %7 = lshr i32 %6, 16
  %8 = and i32 %3, 65536
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i32 %6, i32 %7
  %11 = icmp sgt i32 %3, 131071
  %12 = select i1 %11, i32 32768, i32 0
  %13 = bitcast half %0 to i16
  %14 = and i16 %13, -32768
  %15 = zext i16 %14 to i32
  %16 = xor i32 %12, %15
  %17 = xor i32 %16, %10
  %18 = trunc i32 %17 to i16
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %22 = and i1 %21, %20
  %23 = bitcast i16 %18 to half
  %24 = select i1 %22, half 0xH7E00, half %23
  ret half %24
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_ilogb_f32(float) local_unnamed_addr #29 {
  %2 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %0)
  %3 = add nsw i32 %2, -1
  %4 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %5 = icmp eq i8 %4, 0
  %6 = fcmp uno float %0, 0.000000e+00
  %7 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %8 = or i1 %7, %6
  %9 = and i1 %8, %5
  %10 = select i1 %9, i32 2147483647, i32 %3
  %11 = fcmp oeq float %0, 0.000000e+00
  %12 = select i1 %11, i32 -2147483648, i32 %10
  ret i32 %12
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_fma_f64(double, double, double) local_unnamed_addr #29 {
  %4 = tail call double @llvm.fma.f64(double %0, double %1, double %2)
  ret double %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_erfcinv_f32(float) local_unnamed_addr #28 {
  %2 = fcmp ogt float %0, 6.250000e-01
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %1
  %4 = fsub float 1.000000e+00, %0
  %5 = tail call float @__ocml_erfinv_f32(float %4) #21
  br label %52

; <label>:6:                                      ; preds = %1
  %7 = fcmp ogt float %0, 0x3F50000000000000
  br i1 %7, label %8, label %27

; <label>:8:                                      ; preds = %6
  %9 = fpext float %0 to double
  %10 = fsub double 2.000000e+00, %9
  %11 = fmul double %10, %9
  %12 = fptrunc double %11 to float
  %13 = tail call float @__ocml_log_f32(float %12) #21
  %14 = fsub float -3.125000e+00, %13
  %15 = tail call float @__ocml_fmuladd_f32(float %14, float 0x3E07EE6620000000, float 0xBE33F5A800000000) #21
  %16 = tail call float @__ocml_fmuladd_f32(float %14, float %15, float 0xBE5B638F00000000) #21
  %17 = tail call float @__ocml_fmuladd_f32(float %14, float %16, float 0x3E9C9CCC60000000) #21
  %18 = tail call float @__ocml_fmuladd_f32(float %14, float %17, float 0xBEB72F8AE0000000) #21
  %19 = tail call float @__ocml_fmuladd_f32(float %14, float %18, float 0xBEED21AA60000000) #21
  %20 = tail call float @__ocml_fmuladd_f32(float %14, float %19, float 0x3F287AEBC0000000) #21
  %21 = tail call float @__ocml_fmuladd_f32(float %14, float %20, float 0xBF48455D40000000) #21
  %22 = tail call float @__ocml_fmuladd_f32(float %14, float %21, float 0xBF78B6CA40000000) #21
  %23 = tail call float @__ocml_fmuladd_f32(float %14, float %22, float 0x3FCEBD80C0000000) #21
  %24 = tail call float @__ocml_fmuladd_f32(float %14, float %23, float 0x3FFA755E80000000) #21
  %25 = fsub float -0.000000e+00, %0
  %26 = tail call float @__ocml_fmuladd_f32(float %25, float %24, float %24) #21
  br label %52

; <label>:27:                                     ; preds = %6
  %28 = tail call float @__ocml_log_f32(float %0) #21
  %29 = fsub float -0.000000e+00, %28
  %30 = fcmp ogt float %28, -0.000000e+00
  %31 = tail call float @llvm.sqrt.f32(float %29)
  %32 = select i1 %30, float 0x7FF8000000000000, float %31
  %33 = tail call float @llvm.amdgcn.rcp.f32(float %32)
  %34 = fcmp ogt float %0, 0x3D50000000000000
  br i1 %34, label %35, label %37

; <label>:35:                                     ; preds = %27
  %36 = tail call float @__ocml_fmuladd_f32(float %33, float 0xBFF57221E0000000, float 0x4007F61440000000) #21
  br label %39

; <label>:37:                                     ; preds = %27
  %38 = tail call float @__ocml_fmuladd_f32(float %33, float 0xC03649C6A0000000, float 0x4038FA8FA0000000) #21
  br label %39

; <label>:39:                                     ; preds = %37, %35
  %40 = phi float [ 0xC02A112D80000000, %37 ], [ 0xC0098DD400000000, %35 ]
  %41 = phi float [ %38, %37 ], [ %36, %35 ]
  %42 = phi float [ 0x401309D980000000, %37 ], [ 0x4002C90660000000, %35 ]
  %43 = phi float [ 0xBFF9194880000000, %37 ], [ 0xBFF3A07EA0000000, %35 ]
  %44 = phi float [ 0xBF9C084EC0000000, %37 ], [ 0xBFABA546C0000000, %35 ]
  %45 = phi float [ 0x3FF00143E0000000, %37 ], [ 0x3FF004E660000000, %35 ]
  %46 = tail call float @__ocml_fmuladd_f32(float %33, float %41, float %40) #21
  %47 = tail call float @__ocml_fmuladd_f32(float %33, float %46, float %42) #21
  %48 = tail call float @__ocml_fmuladd_f32(float %33, float %47, float %43) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %33, float %48, float %44) #21
  %50 = tail call float @__ocml_fmuladd_f32(float %33, float %49, float %45) #21
  %51 = fmul float %32, %50
  br label %52

; <label>:52:                                     ; preds = %39, %8, %3
  %53 = phi float [ %5, %3 ], [ %26, %8 ], [ %51, %39 ]
  %54 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %65

; <label>:56:                                     ; preds = %52
  %57 = fcmp olt float %0, 0.000000e+00
  %58 = fcmp ogt float %0, 2.000000e+00
  %59 = or i1 %57, %58
  %60 = select i1 %59, float 0x7FF8000000000000, float %53
  %61 = fcmp oeq float %0, 0.000000e+00
  %62 = select i1 %61, float 0x7FF0000000000000, float %60
  %63 = fcmp oeq float %0, 2.000000e+00
  %64 = select i1 %63, float 0xFFF0000000000000, float %62
  br label %65

; <label>:65:                                     ; preds = %56, %52
  %66 = phi float [ %53, %52 ], [ %64, %56 ]
  ret float %66
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_fma_f32(float, float, float) local_unnamed_addr #29 {
  %4 = tail call float @llvm.fma.f32(float %0, float %1, float %2)
  ret float %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_atan_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fcmp ogt float %2, 1.000000e+00
  %4 = tail call float @llvm.amdgcn.rcp.f32(float %2)
  %5 = select i1 %3, float %4, float %2
  %6 = tail call float @__ocmlpriv_atanred_f32(float %5) #21
  %7 = fsub float -0.000000e+00, %6
  %8 = tail call float @__ocml_fmuladd_f32(float 0x3FEDDCB020000000, float 0x3FFAEE9D60000000, float %7) #21
  %9 = select i1 %3, float %8, float %6
  %10 = tail call float @llvm.copysign.f32(float %9, float %0)
  ret float %10
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocmlpriv_atanred_f32(float) local_unnamed_addr #28 {
  %2 = fmul float %0, %0
  %3 = tail call float @__ocml_fmuladd_f32(float %2, float 0x3F65A54B00000000, float 0xBF8F4B2180000000) #21
  %4 = tail call float @__ocml_fmuladd_f32(float %2, float %3, float 0x3FA53F67E0000000) #21
  %5 = tail call float @__ocml_fmuladd_f32(float %2, float %4, float 0xBFB2FA9AE0000000) #21
  %6 = tail call float @__ocml_fmuladd_f32(float %2, float %5, float 0x3FBB263640000000) #21
  %7 = tail call float @__ocml_fmuladd_f32(float %2, float %6, float 0xBFC22C1CC0000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %2, float %7, float 0x3FC99717E0000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %2, float %8, float 0xBFD5554C40000000) #21
  %10 = fmul float %2, %9
  %11 = tail call float @__ocml_fmuladd_f32(float %0, float %10, float %0) #21
  ret float %11
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_tgamma_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp ogt double %2, 0x3F40000000000000
  br i1 %3, label %4, label %131

; <label>:4:                                      ; preds = %1
  %5 = fcmp olt double %2, 4.500000e+00
  br i1 %5, label %6, label %17

; <label>:6:                                      ; preds = %4
  %7 = fcmp olt double %2, 1.000000e+00
  br i1 %7, label %8, label %10

; <label>:8:                                      ; preds = %6
  %9 = fadd double %2, 1.000000e+00
  br label %26

; <label>:10:                                     ; preds = %6
  %11 = fcmp uge double %2, 3.000000e+00
  %12 = fcmp olt double %2, 4.000000e+00
  %13 = and i1 %11, %12
  %14 = fadd double %2, -1.000000e+00
  %15 = select i1 %13, double %14, double %2
  %16 = select i1 %13, double %14, double 1.000000e+00
  br label %26

; <label>:17:                                     ; preds = %4
  %18 = fcmp olt double %2, 5.500000e+00
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %17
  %20 = tail call double @llvm.fma.f64(double %0, double %0, double %2)
  %21 = fadd double %2, 2.000000e+00
  br label %26

; <label>:22:                                     ; preds = %17
  %23 = fcmp olt double %2, 6.500000e+00
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %22
  %25 = fadd double %2, 1.000000e+00
  br label %26

; <label>:26:                                     ; preds = %24, %22, %19, %10, %8
  %27 = phi double [ %9, %8 ], [ %21, %19 ], [ %25, %24 ], [ %2, %22 ], [ %15, %10 ]
  %28 = phi double [ %2, %8 ], [ %20, %19 ], [ %2, %24 ], [ 1.000000e+00, %22 ], [ 1.000000e+00, %10 ]
  %29 = phi double [ 1.000000e+00, %8 ], [ 1.000000e+00, %19 ], [ 1.000000e+00, %24 ], [ 1.000000e+00, %22 ], [ %16, %10 ]
  %30 = fcmp olt double %0, 0.000000e+00
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %26
  %32 = tail call double @__ocml_sinpi_f64(double %0) #21
  %33 = fmul double %32, %0
  %34 = fsub double -0.000000e+00, %33
  br label %35

; <label>:35:                                     ; preds = %31, %26
  %36 = phi double [ %34, %31 ], [ 1.000000e+00, %26 ]
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @__ocml_exp_f64(double %37) #21
  %39 = fcmp olt double %27, 4.500000e+00
  br i1 %39, label %40, label %74

; <label>:40:                                     ; preds = %35
  %41 = tail call double @llvm.fma.f64(double %27, double 0x40F4AB1F6E83DCE9, double 0x4110D0CE4500BC82)
  %42 = tail call double @llvm.fma.f64(double %27, double %41, double 0x411AE4AFD120301F)
  %43 = tail call double @llvm.fma.f64(double %27, double %42, double 0x4115082AF927D6F4)
  %44 = tail call double @llvm.fma.f64(double %27, double %43, double 0x410012DB432D213B)
  %45 = tail call double @llvm.fma.f64(double %27, double %44, double 0x40D0878904CC0A98)
  %46 = tail call double @llvm.fma.f64(double %27, double %45, double 0x407294FE7CB03F7E)
  %47 = fmul double %29, %46
  %48 = tail call double @llvm.fma.f64(double %27, double 0x40E07DB4866AD8C9, double 0x40FA259259D8939B)
  %49 = tail call double @llvm.fma.f64(double %27, double %48, double 0x41045A9F332EF3D7)
  %50 = tail call double @llvm.fma.f64(double %27, double %49, double 0x40FE19DE58C591E1)
  %51 = tail call double @llvm.fma.f64(double %27, double %50, double 0x40E47E912BCE5459)
  %52 = tail call double @llvm.fma.f64(double %27, double %51, double 0x40A98DE345ECF69C)
  %53 = tail call double @llvm.fma.f64(double %27, double %52, double 0xC02AAE2055F91864)
  %54 = tail call double @llvm.fma.f64(double %27, double %53, double 1.000000e+00)
  %55 = fmul double %28, %54
  %56 = fadd double %27, 5.000000e-01
  %57 = tail call double @__ocml_powr_f64(double %27, double %56) #21
  %58 = fcmp ult double %0, 0.000000e+00
  br i1 %58, label %63, label %59

; <label>:59:                                     ; preds = %40
  %60 = fmul double %38, %57
  %61 = fdiv double %47, %55
  %62 = fmul double %61, %60
  br label %137

; <label>:63:                                     ; preds = %40
  %64 = fmul double %55, 0x400921FB54442D18
  %65 = fmul double %36, %38
  %66 = fmul double %65, %57
  %67 = fmul double %47, %66
  %68 = fdiv double %64, %67
  %69 = tail call double @llvm.amdgcn.fract.f64(double %0)
  %70 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %71 = select i1 %70, double 0.000000e+00, double %69
  %72 = fcmp oeq double %71, 0.000000e+00
  %73 = select i1 %72, double 0x7FF8000000000000, double %68
  br label %137

; <label>:74:                                     ; preds = %35
  %75 = fdiv double 1.000000e+00, %27
  %76 = tail call double @llvm.fma.f64(double %75, double 0x3FDCCD75F8F2C906, double 0xBF797AFD9D48525D)
  %77 = tail call double @llvm.fma.f64(double %75, double %76, double 0xBFB2F2ACB5BF5FFD)
  %78 = tail call double @llvm.fma.f64(double %75, double %77, double 0x3F562F0E23FD0C19)
  %79 = tail call double @llvm.fma.f64(double %75, double %78, double 0x3F906FA254FEA952)
  %80 = tail call double @llvm.fma.f64(double %75, double %79, double 0xBF3AB27FA22C15A8)
  %81 = tail call double @llvm.fma.f64(double %75, double %80, double 0xBF73A7E4383F8766)
  %82 = tail call double @llvm.fma.f64(double %75, double %81, double 0x3F27ABEDB872AF00)
  %83 = tail call double @llvm.fma.f64(double %75, double %82, double 0x3F613D0F7D32582E)
  %84 = tail call double @llvm.fma.f64(double %75, double %83, double 0xBF20FDEA4648ED9D)
  %85 = tail call double @llvm.fma.f64(double %75, double %84, double 0xBF5851C7286C560C)
  %86 = tail call double @llvm.fma.f64(double %75, double %85, double 0x3F26E8BA6CCAF74E)
  %87 = tail call double @llvm.fma.f64(double %75, double %86, double 0x3F601985A7C9E683)
  %88 = tail call double @llvm.fma.f64(double %75, double %87, double 0xBF42D92340CE801F)
  %89 = tail call double @llvm.fma.f64(double %75, double %88, double 0xBF7B8792FC787C5E)
  %90 = tail call double @llvm.fma.f64(double %75, double %89, double 0x3F81D32D71BE5B93)
  %91 = tail call double @llvm.fma.f64(double %75, double %90, double 0x3FCABCC42A9D895D)
  %92 = tail call double @llvm.fma.f64(double %75, double %91, double 0x40040D931FF62706)
  %93 = tail call double @llvm.fma.f64(double %27, double 5.000000e-01, double -2.500000e-01)
  %94 = tail call double @__ocml_powr_f64(double %27, double %93) #21
  %95 = fcmp ult double %0, 0.000000e+00
  br i1 %95, label %103, label %96

; <label>:96:                                     ; preds = %74
  %97 = fmul double %38, %94
  %98 = fmul double %94, %97
  %99 = fmul double %92, %98
  %100 = fdiv double %99, %28
  %101 = fcmp ogt double %0, 0x406573FAE561F647
  %102 = select i1 %101, double 0x7FF0000000000000, double %100
  br label %137

; <label>:103:                                    ; preds = %74
  br i1 %30, label %104, label %137

; <label>:104:                                    ; preds = %103
  %105 = fcmp ult double %0, -1.705000e+02
  br i1 %105, label %113, label %106

; <label>:106:                                    ; preds = %104
  %107 = fmul double %28, 0x400921FB54442D18
  %108 = fmul double %38, %94
  %109 = fmul double %94, %108
  %110 = fmul double %92, %109
  %111 = fmul double %36, %110
  %112 = fdiv double %107, %111
  br label %124

; <label>:113:                                    ; preds = %104
  %114 = fcmp ult double %0, -1.840000e+02
  br i1 %114, label %122, label %115

; <label>:115:                                    ; preds = %113
  %116 = fmul double %28, 0x400921FB54442D18
  %117 = fmul double %38, %94
  %118 = fmul double %92, %117
  %119 = fdiv double %116, %118
  %120 = fmul double %36, %94
  %121 = fdiv double %119, %120
  br label %124

; <label>:122:                                    ; preds = %113
  %123 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %36)
  br label %124

; <label>:124:                                    ; preds = %122, %115, %106
  %125 = phi double [ %112, %106 ], [ %121, %115 ], [ %123, %122 ]
  %126 = tail call double @llvm.amdgcn.fract.f64(double %0)
  %127 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %128 = select i1 %127, double 0.000000e+00, double %126
  %129 = fcmp oeq double %128, 0.000000e+00
  %130 = select i1 %129, double 0x7FF8000000000000, double %125
  br label %137

; <label>:131:                                    ; preds = %1
  %132 = tail call double @llvm.fma.f64(double %0, double 0x3FEF6A51055096B5, double 0xBFED0A118F324B63)
  %133 = tail call double @llvm.fma.f64(double %0, double %132, double 0x3FEFA658C23B1578)
  %134 = tail call double @llvm.fma.f64(double %0, double %133, double 0xBFE2788CFC6FB619)
  %135 = fdiv double 1.000000e+00, %0
  %136 = fadd double %135, %134
  br label %137

; <label>:137:                                    ; preds = %131, %124, %103, %96, %63, %59
  %138 = phi double [ %136, %131 ], [ %62, %59 ], [ %73, %63 ], [ %102, %96 ], [ %130, %124 ], [ %0, %103 ]
  ret double %138
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_powr_f64(double, double) local_unnamed_addr #28 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call <2 x double> @__ocmlpriv_epln_f64(double %3) #21
  %5 = extractelement <2 x double> %4, i64 1
  %6 = fmul double %5, %1
  %7 = fsub double -0.000000e+00, %6
  %8 = tail call double @llvm.fma.f64(double %1, double %5, double %7) #47
  %9 = extractelement <2 x double> %4, i64 0
  %10 = tail call double @llvm.fma.f64(double %1, double %9, double %8) #47
  %11 = fadd double %6, %10
  %12 = fsub double %11, %6
  %13 = fsub double %10, %12
  %14 = tail call i1 @llvm.amdgcn.class.f64(double %6, i32 516) #47
  %15 = select i1 %14, double %6, double %11
  %16 = tail call i1 @llvm.amdgcn.class.f64(double %15, i32 516) #47
  %17 = select i1 %16, double 0.000000e+00, double %13
  %18 = insertelement <2 x double> undef, double %17, i32 0
  %19 = insertelement <2 x double> %18, double %15, i32 1
  %20 = tail call double @__ocmlpriv_expep_f64(<2 x double> %19) #21
  %21 = tail call double @llvm.fabs.f64(double %1)
  %22 = tail call double @llvm.trunc.f64(double %21)
  %23 = fcmp oeq double %21, %22
  %24 = zext i1 %23 to i32
  %25 = fmul double %22, 5.000000e-01
  %26 = tail call double @llvm.amdgcn.fract.f64(double %25)
  %27 = tail call i1 @llvm.amdgcn.class.f64(double %25, i32 516)
  %28 = select i1 %27, double 0.000000e+00, double %26
  %29 = fcmp oeq double %28, 0.000000e+00
  %30 = and i1 %23, %29
  %31 = zext i1 %30 to i32
  %32 = add nuw nsw i32 %31, %24
  %33 = icmp eq i32 %32, 1
  %34 = fcmp olt double %0, 0.000000e+00
  %35 = and i1 %34, %33
  %36 = select i1 %35, double -0.000000e+00, double 0.000000e+00
  %37 = tail call double @llvm.copysign.f64(double %20, double %36)
  %38 = fcmp oeq double %0, 0.000000e+00
  %39 = fcmp oeq double %3, 1.000000e+00
  %40 = fcmp oeq double %1, 0.000000e+00
  %41 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 960)
  %42 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %90

; <label>:44:                                     ; preds = %2
  %45 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 384)
  %46 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 512)
  %47 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 4)
  %48 = fcmp uno double %21, 0.000000e+00
  %49 = tail call i1 @llvm.amdgcn.class.f64(double %21, i32 512)
  %50 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 960)
  %51 = fcmp uno double %0, 0.000000e+00
  %52 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 512)
  %53 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 384)
  %54 = fcmp ogt double %3, 1.000000e+00
  %55 = fcmp olt double %3, 1.000000e+00
  %56 = fcmp une double %0, 0.000000e+00
  %57 = and i1 %55, %47
  %58 = select i1 %57, double 0x7FF0000000000000, double %37
  %59 = and i1 %55, %46
  %60 = select i1 %59, double 0.000000e+00, double %58
  %61 = and i1 %39, %45
  %62 = select i1 %61, double 1.000000e+00, double %60
  %63 = and i1 %39, %49
  %64 = select i1 %63, double 0x7FF8000000000000, double %62
  %65 = and i1 %54, %47
  %66 = select i1 %65, double 0.000000e+00, double %64
  %67 = and i1 %54, %46
  %68 = select i1 %67, double 0x7FF0000000000000, double %66
  %69 = and i1 %53, %40
  %70 = select i1 %69, double 1.000000e+00, double %68
  %71 = xor i1 %41, true
  %72 = and i1 %52, %71
  %73 = select i1 %72, double 0.000000e+00, double %70
  %74 = or i1 %46, %41
  %75 = and i1 %52, %74
  %76 = select i1 %75, double 0x7FF0000000000000, double %73
  %77 = and i1 %52, %40
  %78 = select i1 %77, double 0x7FF8000000000000, double %76
  %79 = and i1 %38, %71
  %80 = select i1 %79, double 0x7FF0000000000000, double %78
  %81 = and i1 %38, %41
  %82 = select i1 %81, double 0.000000e+00, double %80
  %83 = and i1 %38, %40
  %84 = xor i1 %50, true
  %85 = and i1 %56, %84
  %86 = or i1 %85, %83
  %87 = select i1 %86, double 0x7FF8000000000000, double %82
  %88 = select i1 %51, double %0, double %87
  %89 = select i1 %48, double %1, double %88
  br label %95

; <label>:90:                                     ; preds = %2
  %91 = or i1 %40, %39
  %92 = select i1 %91, double 1.000000e+00, double %37
  %93 = and i1 %38, %41
  %94 = select i1 %93, double 0.000000e+00, double %92
  br label %95

; <label>:95:                                     ; preds = %90, %44
  %96 = phi double [ %94, %90 ], [ %89, %44 ]
  ret double %96
}

; Function Attrs: nounwind readnone
define linkonce_odr protected <2 x double> @__ocmlpriv_epln_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.frexp.mant.f64(double %0)
  %3 = fcmp olt double %2, 0x3FE5555555555555
  %4 = zext i1 %3 to i32
  %5 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %7 = sub nsw i32 %6, %4
  %8 = fadd double %5, -1.000000e+00
  %9 = fadd double %5, 1.000000e+00
  %10 = fsub double %9, %5
  %11 = fsub double %9, %10
  %12 = fsub double %5, %11
  %13 = fsub double 1.000000e+00, %10
  %14 = fadd double %13, %12
  %15 = tail call double @llvm.amdgcn.rcp.f64(double %9) #47
  %16 = fsub double -0.000000e+00, %9
  %17 = tail call double @llvm.fma.f64(double %16, double %15, double 1.000000e+00) #47
  %18 = tail call double @llvm.fma.f64(double %17, double %15, double %15) #47
  %19 = tail call double @llvm.fma.f64(double %16, double %18, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %18) #47
  %21 = fmul double %8, %20
  %22 = fmul double %9, %21
  %23 = fsub double -0.000000e+00, %22
  %24 = tail call double @llvm.fma.f64(double %21, double %9, double %23) #47
  %25 = tail call double @llvm.fma.f64(double %21, double %14, double %24) #47
  %26 = fadd double %22, %25
  %27 = fsub double %26, %22
  %28 = fsub double %25, %27
  %29 = fsub double %8, %26
  %30 = fsub double %8, %29
  %31 = fsub double %30, %26
  %32 = fsub double %31, %28
  %33 = fadd double %29, %32
  %34 = fmul double %20, %33
  %35 = fadd double %21, %34
  %36 = fsub double %35, %21
  %37 = fsub double %34, %36
  %38 = fmul double %35, %35
  %39 = fsub double -0.000000e+00, %38
  %40 = tail call double @llvm.fma.f64(double %35, double %35, double %39) #47
  %41 = fmul double %37, 2.000000e+00
  %42 = tail call double @llvm.fma.f64(double %35, double %41, double %40) #47
  %43 = tail call double @llvm.fma.f64(double %37, double %37, double %42) #47
  %44 = fadd double %38, %43
  %45 = fsub double %44, %38
  %46 = fsub double %43, %45
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %48 = tail call double @llvm.fma.f64(double %44, double %47, double 0x3FBE25E43ABE935A)
  %49 = tail call double @llvm.fma.f64(double %44, double %48, double 0x3FC110EF47E6C9C2)
  %50 = tail call double @llvm.fma.f64(double %44, double %49, double 0x3FC3B13BCFA74449)
  %51 = tail call double @llvm.fma.f64(double %44, double %50, double 0x3FC745D171BF3C30)
  %52 = tail call double @llvm.fma.f64(double %44, double %51, double 0x3FCC71C71C7792CE)
  %53 = tail call double @llvm.fma.f64(double %44, double %52, double 0x3FD24924924920DA)
  %54 = tail call double @llvm.fma.f64(double %44, double %53, double 0x3FD999999999999C)
  %55 = sitofp i32 %7 to double
  %56 = fmul double %55, 0x3FE62E42FEFA39EF
  %57 = fsub double -0.000000e+00, %56
  %58 = tail call double @llvm.fma.f64(double %55, double 0x3FE62E42FEFA39EF, double %57) #47
  %59 = tail call double @llvm.fma.f64(double %55, double 0x3C7ABC9E3B39803F, double %58) #47
  %60 = fadd double %56, %59
  %61 = fsub double %60, %56
  %62 = fsub double %59, %61
  %63 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 1) #47
  %64 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 1) #47
  %65 = fmul double %35, %44
  %66 = fsub double -0.000000e+00, %65
  %67 = tail call double @llvm.fma.f64(double %44, double %35, double %66) #47
  %68 = fmul double %35, %46
  %69 = tail call double @llvm.fma.f64(double %44, double %37, double %68) #47
  %70 = fadd double %67, %69
  %71 = fadd double %65, %70
  %72 = fsub double %71, %65
  %73 = fsub double %70, %72
  %74 = fmul double %44, %54
  %75 = fsub double -0.000000e+00, %74
  %76 = tail call double @llvm.fma.f64(double %44, double %54, double %75) #47
  %77 = tail call double @llvm.fma.f64(double %46, double %54, double %76) #47
  %78 = fadd double %74, %77
  %79 = fsub double %78, %74
  %80 = fsub double %77, %79
  %81 = fadd double %78, 0x3FE5555555555555
  %82 = fadd double %81, 0xBFE5555555555555
  %83 = fsub double %78, %82
  %84 = fadd double %80, 0x3C8543B0D5DF274D
  %85 = fadd double %83, %84
  %86 = fadd double %81, %85
  %87 = fsub double %86, %81
  %88 = fsub double %85, %87
  %89 = fmul double %71, %86
  %90 = fsub double -0.000000e+00, %89
  %91 = tail call double @llvm.fma.f64(double %71, double %86, double %90) #47
  %92 = fmul double %73, %86
  %93 = tail call double @llvm.fma.f64(double %71, double %88, double %92) #47
  %94 = fadd double %91, %93
  %95 = fadd double %89, %94
  %96 = fsub double %95, %89
  %97 = fsub double %94, %96
  %98 = fadd double %63, %95
  %99 = fsub double %98, %63
  %100 = fsub double %95, %99
  %101 = fadd double %64, %97
  %102 = fadd double %100, %101
  %103 = fadd double %98, %102
  %104 = fsub double %103, %98
  %105 = fsub double %102, %104
  %106 = fadd double %60, %103
  %107 = fsub double %106, %60
  %108 = fsub double %106, %107
  %109 = fsub double %60, %108
  %110 = fsub double %103, %107
  %111 = fadd double %110, %109
  %112 = fadd double %62, %105
  %113 = fsub double %112, %62
  %114 = fsub double %112, %113
  %115 = fsub double %62, %114
  %116 = fsub double %105, %113
  %117 = fadd double %116, %115
  %118 = fadd double %112, %111
  %119 = fadd double %106, %118
  %120 = fsub double %119, %106
  %121 = fsub double %118, %120
  %122 = fadd double %117, %121
  %123 = fadd double %119, %122
  %124 = fsub double %123, %119
  %125 = fsub double %122, %124
  %126 = insertelement <2 x double> undef, double %125, i32 0
  %127 = insertelement <2 x double> %126, double %123, i32 1
  ret <2 x double> %127
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocmlpriv_expep_f64(<2 x double>) local_unnamed_addr #29 {
  %2 = extractelement <2 x double> %0, i64 1
  %3 = fmul double %2, 0x3FF71547652B82FE
  %4 = tail call double @llvm.rint.f64(double %3)
  %5 = fmul double %4, 0x3FE62E42FEFA3000
  %6 = fsub double %2, %5
  %7 = fsub double %6, %2
  %8 = fsub double %6, %7
  %9 = fsub double %2, %8
  %10 = fadd double %5, %7
  %11 = fsub double %9, %10
  %12 = extractelement <2 x double> %0, i64 0
  %13 = fadd double %12, %11
  %14 = fadd double %6, %13
  %15 = fsub double %14, %6
  %16 = fsub double %13, %15
  %17 = fmul double %4, 0x3D53DE6AF278E000
  %18 = fsub double %14, %17
  %19 = fsub double %14, %18
  %20 = fsub double %19, %17
  %21 = fadd double %16, %20
  %22 = fadd double %18, %21
  %23 = fsub double %22, %18
  %24 = fsub double %21, %23
  %25 = fmul double %4, 0x3AC9CC01F97B57A0
  %26 = fsub double %22, %25
  %27 = fsub double %22, %26
  %28 = fsub double %27, %25
  %29 = fadd double %24, %28
  %30 = fadd double %26, %29
  %31 = fsub double %30, %26
  %32 = fsub double %29, %31
  %33 = tail call double @llvm.fma.f64(double %30, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %34 = tail call double @llvm.fma.f64(double %30, double %33, double 0x3EC71DEE623FDE64)
  %35 = tail call double @llvm.fma.f64(double %30, double %34, double 0x3EFA01997C89E6B0)
  %36 = tail call double @llvm.fma.f64(double %30, double %35, double 0x3F2A01A014761F6E)
  %37 = tail call double @llvm.fma.f64(double %30, double %36, double 0x3F56C16C1852B7B0)
  %38 = tail call double @llvm.fma.f64(double %30, double %37, double 0x3F81111111122322)
  %39 = tail call double @llvm.fma.f64(double %30, double %38, double 0x3FA55555555502A1)
  %40 = tail call double @llvm.fma.f64(double %30, double %39, double 0x3FC5555555555511)
  %41 = tail call double @llvm.fma.f64(double %30, double %40, double 0x3FE000000000000B)
  %42 = fmul double %30, %30
  %43 = fsub double -0.000000e+00, %42
  %44 = tail call double @llvm.fma.f64(double %30, double %30, double %43) #47
  %45 = fmul double %32, 2.000000e+00
  %46 = tail call double @llvm.fma.f64(double %30, double %45, double %44) #47
  %47 = tail call double @llvm.fma.f64(double %32, double %32, double %46) #47
  %48 = fadd double %42, %47
  %49 = fsub double %48, %42
  %50 = fsub double %47, %49
  %51 = fmul double %48, %41
  %52 = fsub double -0.000000e+00, %51
  %53 = tail call double @llvm.fma.f64(double %48, double %41, double %52) #47
  %54 = tail call double @llvm.fma.f64(double %50, double %41, double %53) #47
  %55 = fadd double %51, %54
  %56 = fsub double %55, %51
  %57 = fsub double %54, %56
  %58 = fadd double %30, %55
  %59 = fsub double %58, %30
  %60 = fsub double %55, %59
  %61 = fadd double %32, %57
  %62 = fadd double %60, %61
  %63 = fadd double %58, %62
  %64 = fadd double %63, 1.000000e+00
  %65 = fptosi double %4 to i32
  %66 = tail call double @llvm.amdgcn.ldexp.f64(double %64, i32 %65)
  %67 = fcmp ogt double %2, 7.100000e+02
  %68 = select i1 %67, double 0x7FF0000000000000, double %66
  %69 = fcmp olt double %2, -7.450000e+02
  %70 = select i1 %69, double 0.000000e+00, double %68
  ret double %70
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isnormal_f64(double) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 264)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_tanh_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fadd float %2, 0xBFE62E4300000000
  %4 = fsub float %3, %2
  %5 = fsub float %4, %3
  %6 = fadd float %2, %5
  %7 = fadd float %4, 0x3FE62E4300000000
  %8 = fsub float %6, %7
  %9 = fadd float %8, 0x3E205C6100000000
  %10 = fadd float %3, %9
  %11 = fsub float %10, %3
  %12 = fsub float %9, %11
  %13 = insertelement <2 x float> undef, float %12, i32 0
  %14 = insertelement <2 x float> %13, float %10, i32 1
  %15 = tail call <2 x float> @__ocmlpriv_epexpep_f32(<2 x float> %14) #21
  %16 = extractelement <2 x float> %15, i64 1
  %17 = tail call float @llvm.amdgcn.rcp.f32(float %16) #47
  %18 = fmul float %16, %17
  %19 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %20 = icmp sgt i32 %19, 899
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %1
  %22 = fsub float -0.000000e+00, %18
  %23 = tail call float @llvm.fma.f32(float %17, float %16, float %22) #47
  %24 = insertelement <2 x float> undef, float %23, i32 0
  %25 = insertelement <2 x float> %24, float %18, i32 1
  %26 = extractelement <2 x float> %15, i64 0
  br label %50

; <label>:27:                                     ; preds = %1
  switch i32 %19, label %28 [
    i32 801, label %42
    i32 701, label %42
  ]

; <label>:28:                                     ; preds = %27
  %29 = bitcast float %17 to i32
  %30 = and i32 %29, -4096
  %31 = bitcast i32 %30 to float
  %32 = fsub float %17, %31
  %33 = bitcast float %16 to i32
  %34 = and i32 %33, -4096
  %35 = bitcast i32 %34 to float
  %36 = fsub float %16, %35
  %37 = fsub float -0.000000e+00, %18
  %38 = tail call float @llvm.fmuladd.f32(float %31, float %35, float %37) #47
  %39 = tail call float @llvm.fmuladd.f32(float %31, float %36, float %38) #47
  %40 = tail call float @llvm.fmuladd.f32(float %32, float %35, float %39) #47
  %41 = tail call float @llvm.fmuladd.f32(float %32, float %36, float %40) #47
  br label %45

; <label>:42:                                     ; preds = %27, %27
  %43 = fsub float -0.000000e+00, %18
  %44 = tail call float @llvm.fma.f32(float %17, float %16, float %43) #47
  br label %45

; <label>:45:                                     ; preds = %42, %28
  %46 = phi float [ %44, %42 ], [ %41, %28 ]
  %47 = insertelement <2 x float> undef, float %46, i32 0
  %48 = insertelement <2 x float> %47, float %18, i32 1
  %49 = extractelement <2 x float> %15, i64 0
  switch i32 %19, label %56 [
    i32 801, label %50
    i32 701, label %50
  ]

; <label>:50:                                     ; preds = %45, %45, %21
  %51 = phi float [ %46, %45 ], [ %46, %45 ], [ %23, %21 ]
  %52 = phi float [ %49, %45 ], [ %49, %45 ], [ %26, %21 ]
  %53 = phi <2 x float> [ %48, %45 ], [ %48, %45 ], [ %25, %21 ]
  %54 = tail call float @llvm.fma.f32(float %17, float %52, float %51) #47
  %55 = insertelement <2 x float> %53, float %54, i64 0
  br label %59

; <label>:56:                                     ; preds = %45
  %57 = tail call float @llvm.fmuladd.f32(float %17, float %49, float %46) #47
  %58 = insertelement <2 x float> %48, float %57, i64 0
  br label %59

; <label>:59:                                     ; preds = %56, %50
  %60 = phi float [ %52, %50 ], [ %49, %56 ]
  %61 = phi <2 x float> [ %55, %50 ], [ %58, %56 ]
  %62 = extractelement <2 x float> %61, i64 1
  %63 = extractelement <2 x float> %61, i64 0
  %64 = fadd float %62, %63
  %65 = fsub float %64, %62
  %66 = fsub float %63, %65
  %67 = fsub float 1.000000e+00, %64
  %68 = fsub float 1.000000e+00, %67
  %69 = fsub float %68, %64
  %70 = fsub float %69, %66
  %71 = fadd float %67, %70
  %72 = fsub float %71, %67
  %73 = fsub float %70, %72
  %74 = fmul float %17, %71
  %75 = fmul float %16, %74
  br i1 %20, label %76, label %81

; <label>:76:                                     ; preds = %59
  %77 = fsub float -0.000000e+00, %75
  %78 = tail call float @llvm.fma.f32(float %74, float %16, float %77) #47
  %79 = insertelement <2 x float> undef, float %78, i32 0
  %80 = insertelement <2 x float> %79, float %75, i32 1
  br label %103

; <label>:81:                                     ; preds = %59
  switch i32 %19, label %82 [
    i32 801, label %96
    i32 701, label %96
  ]

; <label>:82:                                     ; preds = %81
  %83 = bitcast float %74 to i32
  %84 = and i32 %83, -4096
  %85 = bitcast i32 %84 to float
  %86 = fsub float %74, %85
  %87 = bitcast float %16 to i32
  %88 = and i32 %87, -4096
  %89 = bitcast i32 %88 to float
  %90 = fsub float %16, %89
  %91 = fsub float -0.000000e+00, %75
  %92 = tail call float @llvm.fmuladd.f32(float %85, float %89, float %91) #47
  %93 = tail call float @llvm.fmuladd.f32(float %85, float %90, float %92) #47
  %94 = tail call float @llvm.fmuladd.f32(float %86, float %89, float %93) #47
  %95 = tail call float @llvm.fmuladd.f32(float %86, float %90, float %94) #47
  br label %99

; <label>:96:                                     ; preds = %81, %81
  %97 = fsub float -0.000000e+00, %75
  %98 = tail call float @llvm.fma.f32(float %74, float %16, float %97) #47
  br label %99

; <label>:99:                                     ; preds = %96, %82
  %100 = phi float [ %98, %96 ], [ %95, %82 ]
  %101 = insertelement <2 x float> undef, float %100, i32 0
  %102 = insertelement <2 x float> %101, float %75, i32 1
  switch i32 %19, label %108 [
    i32 801, label %103
    i32 701, label %103
  ]

; <label>:103:                                    ; preds = %99, %99, %76
  %104 = phi float [ %100, %99 ], [ %100, %99 ], [ %78, %76 ]
  %105 = phi <2 x float> [ %102, %99 ], [ %102, %99 ], [ %80, %76 ]
  %106 = tail call float @llvm.fma.f32(float %74, float %60, float %104) #47
  %107 = insertelement <2 x float> %105, float %106, i64 0
  br label %111

; <label>:108:                                    ; preds = %99
  %109 = tail call float @llvm.fmuladd.f32(float %74, float %60, float %100) #47
  %110 = insertelement <2 x float> %102, float %109, i64 0
  br label %111

; <label>:111:                                    ; preds = %108, %103
  %112 = phi <2 x float> [ %107, %103 ], [ %110, %108 ]
  %113 = extractelement <2 x float> %112, i64 1
  %114 = extractelement <2 x float> %112, i64 0
  %115 = fadd float %113, %114
  %116 = fsub float %115, %113
  %117 = fsub float %114, %116
  %118 = fsub float %71, %115
  %119 = fsub float %71, %118
  %120 = fsub float %119, %115
  %121 = fadd float %73, %120
  %122 = fsub float %121, %117
  %123 = fadd float %118, %122
  %124 = fmul float %17, %123
  %125 = fadd float %17, %74
  %126 = fsub float %125, %17
  %127 = fsub float %74, %126
  %128 = fadd float %127, %124
  %129 = fadd float %125, %128
  %130 = fsub float %129, %125
  %131 = fsub float %128, %130
  %132 = tail call float @llvm.amdgcn.ldexp.f32(float %129, i32 -2) #47
  %133 = tail call float @llvm.amdgcn.ldexp.f32(float %131, i32 -2) #47
  %134 = fsub float %16, %132
  %135 = fsub float %16, %134
  %136 = fsub float %135, %132
  %137 = fadd float %60, %136
  %138 = fsub float %137, %133
  %139 = fadd float %134, %138
  %140 = fsub float %139, %134
  %141 = fsub float %138, %140
  %142 = fadd float %16, %132
  %143 = fsub float %142, %16
  %144 = fsub float %132, %143
  %145 = fadd float %60, %133
  %146 = fadd float %144, %145
  %147 = fadd float %142, %146
  %148 = fsub float %147, %142
  %149 = fsub float %146, %148
  %150 = tail call float @llvm.amdgcn.rcp.f32(float %147) #47
  %151 = fmul float %139, %150
  %152 = fmul float %147, %151
  br i1 %20, label %153, label %158

; <label>:153:                                    ; preds = %111
  %154 = fsub float -0.000000e+00, %152
  %155 = tail call float @llvm.fma.f32(float %151, float %147, float %154) #47
  %156 = insertelement <2 x float> undef, float %155, i32 0
  %157 = insertelement <2 x float> %156, float %152, i32 1
  br label %180

; <label>:158:                                    ; preds = %111
  switch i32 %19, label %159 [
    i32 801, label %173
    i32 701, label %173
  ]

; <label>:159:                                    ; preds = %158
  %160 = bitcast float %151 to i32
  %161 = and i32 %160, -4096
  %162 = bitcast i32 %161 to float
  %163 = fsub float %151, %162
  %164 = bitcast float %147 to i32
  %165 = and i32 %164, -4096
  %166 = bitcast i32 %165 to float
  %167 = fsub float %147, %166
  %168 = fsub float -0.000000e+00, %152
  %169 = tail call float @llvm.fmuladd.f32(float %162, float %166, float %168) #47
  %170 = tail call float @llvm.fmuladd.f32(float %162, float %167, float %169) #47
  %171 = tail call float @llvm.fmuladd.f32(float %163, float %166, float %170) #47
  %172 = tail call float @llvm.fmuladd.f32(float %163, float %167, float %171) #47
  br label %176

; <label>:173:                                    ; preds = %158, %158
  %174 = fsub float -0.000000e+00, %152
  %175 = tail call float @llvm.fma.f32(float %151, float %147, float %174) #47
  br label %176

; <label>:176:                                    ; preds = %173, %159
  %177 = phi float [ %175, %173 ], [ %172, %159 ]
  %178 = insertelement <2 x float> undef, float %177, i32 0
  %179 = insertelement <2 x float> %178, float %152, i32 1
  switch i32 %19, label %185 [
    i32 801, label %180
    i32 701, label %180
  ]

; <label>:180:                                    ; preds = %176, %176, %153
  %181 = phi float [ %177, %176 ], [ %177, %176 ], [ %155, %153 ]
  %182 = phi <2 x float> [ %179, %176 ], [ %179, %176 ], [ %157, %153 ]
  %183 = tail call float @llvm.fma.f32(float %151, float %149, float %181) #47
  %184 = insertelement <2 x float> %182, float %183, i64 0
  br label %188

; <label>:185:                                    ; preds = %176
  %186 = tail call float @llvm.fmuladd.f32(float %151, float %149, float %177) #47
  %187 = insertelement <2 x float> %179, float %186, i64 0
  br label %188

; <label>:188:                                    ; preds = %185, %180
  %189 = phi <2 x float> [ %184, %180 ], [ %187, %185 ]
  %190 = extractelement <2 x float> %189, i64 1
  %191 = extractelement <2 x float> %189, i64 0
  %192 = fadd float %190, %191
  %193 = fsub float %192, %190
  %194 = fsub float %191, %193
  %195 = fsub float %139, %192
  %196 = fsub float %139, %195
  %197 = fsub float %196, %192
  %198 = fsub float %197, %194
  %199 = fadd float %141, %198
  %200 = fadd float %195, %199
  %201 = fmul float %150, %200
  %202 = fadd float %151, %201
  %203 = fcmp ogt float %2, 8.687500e+00
  %204 = select i1 %203, float 1.000000e+00, float %202
  %205 = fcmp olt float %2, 0x3F30000000000000
  %206 = select i1 %205, float %2, float %204
  %207 = tail call float @llvm.copysign.f32(float %206, float %0)
  ret float %207
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_atanh_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fadd float %2, 1.000000e+00
  %4 = fadd float %3, -1.000000e+00
  %5 = fsub float %2, %4
  %6 = fsub float 1.000000e+00, %2
  %7 = fsub float 1.000000e+00, %6
  %8 = fsub float %7, %2
  %9 = tail call float @llvm.amdgcn.rcp.f32(float %6) #47
  %10 = fmul float %3, %9
  %11 = fmul float %6, %10
  %12 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %13 = icmp sgt i32 %12, 899
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %1
  %15 = fsub float -0.000000e+00, %11
  %16 = tail call float @llvm.fma.f32(float %10, float %6, float %15) #47
  %17 = insertelement <2 x float> undef, float %16, i32 0
  %18 = insertelement <2 x float> %17, float %11, i32 1
  br label %41

; <label>:19:                                     ; preds = %1
  switch i32 %12, label %20 [
    i32 801, label %34
    i32 701, label %34
  ]

; <label>:20:                                     ; preds = %19
  %21 = bitcast float %10 to i32
  %22 = and i32 %21, -4096
  %23 = bitcast i32 %22 to float
  %24 = fsub float %10, %23
  %25 = bitcast float %6 to i32
  %26 = and i32 %25, -4096
  %27 = bitcast i32 %26 to float
  %28 = fsub float %6, %27
  %29 = fsub float -0.000000e+00, %11
  %30 = tail call float @llvm.fmuladd.f32(float %23, float %27, float %29) #47
  %31 = tail call float @llvm.fmuladd.f32(float %23, float %28, float %30) #47
  %32 = tail call float @llvm.fmuladd.f32(float %24, float %27, float %31) #47
  %33 = tail call float @llvm.fmuladd.f32(float %24, float %28, float %32) #47
  br label %37

; <label>:34:                                     ; preds = %19, %19
  %35 = fsub float -0.000000e+00, %11
  %36 = tail call float @llvm.fma.f32(float %10, float %6, float %35) #47
  br label %37

; <label>:37:                                     ; preds = %34, %20
  %38 = phi float [ %36, %34 ], [ %33, %20 ]
  %39 = insertelement <2 x float> undef, float %38, i32 0
  %40 = insertelement <2 x float> %39, float %11, i32 1
  switch i32 %12, label %46 [
    i32 801, label %41
    i32 701, label %41
  ]

; <label>:41:                                     ; preds = %37, %37, %14
  %42 = phi float [ %38, %37 ], [ %38, %37 ], [ %16, %14 ]
  %43 = phi <2 x float> [ %40, %37 ], [ %40, %37 ], [ %18, %14 ]
  %44 = tail call float @llvm.fma.f32(float %10, float %8, float %42) #47
  %45 = insertelement <2 x float> %43, float %44, i64 0
  br label %49

; <label>:46:                                     ; preds = %37
  %47 = tail call float @llvm.fmuladd.f32(float %10, float %8, float %38) #47
  %48 = insertelement <2 x float> %40, float %47, i64 0
  br label %49

; <label>:49:                                     ; preds = %46, %41
  %50 = phi <2 x float> [ %45, %41 ], [ %48, %46 ]
  %51 = extractelement <2 x float> %50, i64 1
  %52 = extractelement <2 x float> %50, i64 0
  %53 = fadd float %51, %52
  %54 = fsub float %53, %51
  %55 = fsub float %52, %54
  %56 = fsub float %3, %53
  %57 = fsub float %3, %56
  %58 = fsub float %57, %53
  %59 = fsub float %58, %55
  %60 = fadd float %5, %59
  %61 = fadd float %56, %60
  %62 = fmul float %9, %61
  %63 = fadd float %10, %62
  %64 = fsub float %63, %10
  %65 = fsub float %62, %64
  %66 = insertelement <2 x float> undef, float %65, i32 0
  %67 = insertelement <2 x float> %66, float %63, i32 1
  %68 = tail call float @__ocmlpriv_lnep_f32(<2 x float> %67) #21
  %69 = fmul float %68, 5.000000e-01
  %70 = fcmp olt float %2, 0x3F30000000000000
  %71 = select i1 %70, float %2, float %69
  %72 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %73 = icmp eq i8 %72, 0
  %74 = fcmp ogt float %2, 1.000000e+00
  %75 = select i1 %74, float 0x7FF8000000000000, float %71
  %76 = fcmp oeq float %2, 1.000000e+00
  %77 = select i1 %76, float 0x7FF0000000000000, float %75
  %78 = select i1 %73, float %77, float %71
  %79 = tail call float @llvm.copysign.f32(float %78, float %0)
  ret float %79
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_tan_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigred_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = lshr i32 %3, 16
  %7 = trunc i32 %6 to i16
  %8 = and i16 %7, 1
  %9 = tail call half @__ocmlpriv_tanred_f16(half %5, i16 signext %8) #21
  %10 = bitcast half %9 to i16
  %11 = bitcast half %0 to i16
  %12 = and i16 %11, -32768
  %13 = xor i16 %12, %10
  %14 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %15 = icmp eq i8 %14, 0
  %16 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %17 = and i1 %16, %15
  %18 = bitcast i16 %13 to half
  %19 = select i1 %17, half 0xH7E00, half %18
  ret half %19
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocmlpriv_tanred_f16(half, i16 signext) local_unnamed_addr #28 {
  %3 = fmul half %0, %0
  %4 = tail call half @llvm.fma.f16(half %3, half 0xH2DE5, half 0xH2F8F) #21
  %5 = tail call half @llvm.fma.f16(half %3, half %4, half 0xH355C) #21
  %6 = fmul half %3, %5
  %7 = tail call half @llvm.fma.f16(half %0, half %6, half %0) #21
  %8 = fdiv half 0xHBC00, %7
  %9 = icmp eq i16 %1, 0
  %10 = select i1 %9, half %7, half %8
  ret half %10
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_asinh_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = fcmp oge float %2, 0x43F0000000000000
  %4 = select i1 %3, float 0x3BF0000000000000, float 1.000000e+00
  %5 = fmul float %2, %4
  %6 = fmul float %5, %5
  %7 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %8 = icmp sgt i32 %7, 899
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %1
  switch i32 %7, label %13 [
    i32 801, label %10
    i32 701, label %10
  ]

; <label>:10:                                     ; preds = %9, %9, %1
  %11 = fsub float -0.000000e+00, %6
  %12 = tail call float @llvm.fma.f32(float %5, float %5, float %11) #47
  br label %23

; <label>:13:                                     ; preds = %9
  %14 = bitcast float %5 to i32
  %15 = and i32 %14, -4096
  %16 = bitcast i32 %15 to float
  %17 = fsub float %5, %16
  %18 = fsub float -0.000000e+00, %6
  %19 = tail call float @llvm.fmuladd.f32(float %16, float %16, float %18) #47
  %20 = fmul float %16, 2.000000e+00
  %21 = tail call float @llvm.fmuladd.f32(float %20, float %17, float %19) #47
  %22 = tail call float @llvm.fmuladd.f32(float %17, float %17, float %21) #47
  br label %23

; <label>:23:                                     ; preds = %13, %10
  %24 = phi float [ %12, %10 ], [ %22, %13 ]
  %25 = select i1 %3, float 0x37F0000000000000, float 1.000000e+00
  %26 = fadd float %25, %6
  %27 = fsub float %26, %6
  %28 = fsub float %26, %27
  %29 = fsub float %6, %28
  %30 = fsub float %25, %27
  %31 = fadd float %30, %29
  %32 = fadd float %24, %31
  %33 = fadd float %26, %32
  %34 = fsub float %33, %26
  %35 = fsub float %32, %34
  %36 = fcmp olt float %33, 0.000000e+00
  %37 = tail call float @llvm.sqrt.f32(float %33) #47
  %38 = select i1 %36, float 0x7FF8000000000000, float %37
  %39 = fmul float %38, %38
  br i1 %8, label %41, label %40

; <label>:40:                                     ; preds = %23
  switch i32 %7, label %44 [
    i32 801, label %41
    i32 701, label %41
  ]

; <label>:41:                                     ; preds = %40, %40, %23
  %42 = fsub float -0.000000e+00, %39
  %43 = tail call float @llvm.fma.f32(float %38, float %38, float %42) #47
  br label %54

; <label>:44:                                     ; preds = %40
  %45 = bitcast float %38 to i32
  %46 = and i32 %45, -4096
  %47 = bitcast i32 %46 to float
  %48 = fsub float %38, %47
  %49 = fsub float -0.000000e+00, %39
  %50 = tail call float @llvm.fmuladd.f32(float %47, float %47, float %49) #47
  %51 = fmul float %47, 2.000000e+00
  %52 = tail call float @llvm.fmuladd.f32(float %51, float %48, float %50) #47
  %53 = tail call float @llvm.fmuladd.f32(float %48, float %48, float %52) #47
  br label %54

; <label>:54:                                     ; preds = %44, %41
  %55 = phi float [ %43, %41 ], [ %53, %44 ]
  %56 = fsub float %33, %39
  %57 = fsub float %33, %56
  %58 = fsub float %57, %39
  %59 = fadd float %35, %58
  %60 = fsub float %59, %55
  %61 = fadd float %56, %60
  %62 = fmul float %38, 2.000000e+00
  %63 = tail call float @llvm.amdgcn.rcp.f32(float %62) #47
  %64 = fmul float %63, %61
  %65 = fadd float %38, %64
  %66 = fsub float %65, %38
  %67 = fsub float %64, %66
  %68 = fadd float %5, %65
  %69 = fsub float %68, %5
  %70 = fsub float %68, %69
  %71 = fsub float %5, %70
  %72 = fsub float %65, %69
  %73 = fadd float %72, %71
  %74 = fadd float %67, %73
  %75 = fadd float %68, %74
  %76 = fsub float %75, %68
  %77 = fsub float %74, %76
  %78 = insertelement <2 x float> undef, float %77, i32 0
  %79 = insertelement <2 x float> %78, float %75, i32 1
  %80 = tail call float @__ocmlpriv_lnep_f32(<2 x float> %79) #21
  %81 = fpext float %80 to double
  %82 = select i1 %3, double 0x40462E4300000000, double 0.000000e+00
  %83 = fadd double %82, %81
  %84 = fptrunc double %83 to float
  %85 = fcmp olt float %2, 0x3F30000000000000
  %86 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %87 = icmp eq i8 %86, 0
  %88 = tail call i1 @llvm.amdgcn.class.f32(float %2, i32 512)
  %89 = and i1 %88, %87
  %90 = or i1 %85, %89
  %91 = select i1 %90, float %2, float %84
  %92 = tail call float @llvm.copysign.f32(float %91, float %0)
  ret float %92
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_acos_f32(float) local_unnamed_addr #28 {
  %2 = tail call float @llvm.fabs.f32(float %0)
  %3 = tail call float @__ocml_fmuladd_f32(float -5.000000e-01, float %2, float 5.000000e-01) #21
  %4 = fmul float %0, %0
  %5 = fcmp ogt float %2, 5.000000e-01
  %6 = select i1 %5, float %3, float %4
  %7 = tail call float @__ocml_fmuladd_f32(float %6, float 0x3FA38434E0000000, float 0x3F8BF8BB40000000) #21
  %8 = tail call float @__ocml_fmuladd_f32(float %6, float %7, float 0x3FA0698780000000) #21
  %9 = tail call float @__ocml_fmuladd_f32(float %6, float %8, float 0x3FA6C83620000000) #21
  %10 = tail call float @__ocml_fmuladd_f32(float %6, float %9, float 0x3FB3337900000000) #21
  %11 = tail call float @__ocml_fmuladd_f32(float %6, float %10, float 0x3FC5555580000000) #21
  %12 = fmul float %6, %11
  %13 = fcmp olt float %6, 0.000000e+00
  %14 = tail call float @llvm.sqrt.f32(float %6)
  %15 = select i1 %13, float 0x7FF8000000000000, float %14
  %16 = tail call float @__ocml_fmuladd_f32(float %15, float %12, float %15) #21
  %17 = fmul float %16, 2.000000e+00
  %18 = fsub float -0.000000e+00, %17
  %19 = tail call float @__ocml_fmuladd_f32(float 0x3FFDDCB020000000, float 0x3FFAEE9D60000000, float %18) #21
  %20 = fcmp olt float %0, 0.000000e+00
  %21 = select i1 %20, float %19, float %17
  %22 = tail call float @__ocml_fmuladd_f32(float %0, float %12, float %0) #21
  %23 = fsub float -0.000000e+00, %22
  %24 = tail call float @__ocml_fmuladd_f32(float 0x3FEDDCB020000000, float 0x3FFAEE9D60000000, float %23) #21
  %25 = select i1 %5, float %21, float %24
  ret float %25
}

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_cosh_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fsub float -0.000000e+00, %3
  %6 = tail call float @llvm.exp2.f32(float %5)
  %7 = fadd float %4, %6
  %8 = fmul float %7, 5.000000e-01
  %9 = fptrunc float %8 to half
  ret half %9
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_atanh_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = fpext half %2 to float
  %4 = fadd float %3, 1.000000e+00
  %5 = fsub float 1.000000e+00, %3
  %6 = tail call float @llvm.amdgcn.rcp.f32(float %5)
  %7 = fmul float %4, %6
  %8 = tail call float @llvm.log2.f32(float %7)
  %9 = fmul float %8, 0x3FD62E4300000000
  %10 = fptrunc float %9 to half
  %11 = fcmp olt half %2, 0xH2000
  %12 = fpext half %10 to float
  %13 = select i1 %11, float %3, float %12
  %14 = fptrunc float %13 to half
  %15 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %16 = icmp eq i8 %15, 0
  %17 = fcmp oeq half %2, 0xH3C00
  %18 = select i1 %17, half 0xH7C00, half %14
  %19 = fcmp ogt half %2, 0xH3C00
  %20 = fcmp uno half %2, 0xH0000
  %21 = or i1 %19, %20
  %22 = select i1 %21, half 0xH7E00, half %18
  %23 = select i1 %16, half %22, half %14
  %24 = tail call half @llvm.copysign.f16(half %23, half %0) #21
  ret half %24
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_hypot_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call double @llvm.fabs.f64(double %1)
  %5 = tail call double @llvm.maxnum.f64(double %3, double %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %5)
  %7 = sub nsw i32 0, %6
  %8 = tail call double @llvm.amdgcn.ldexp.f64(double %3, i32 %7)
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %4, i32 %7)
  %10 = fmul double %9, %9
  %11 = tail call double @llvm.fma.f64(double %8, double %8, double %10)
  %12 = tail call double @llvm.amdgcn.rsq.f64(double %11)
  %13 = fmul double %11, %12
  %14 = fmul double %12, 5.000000e-01
  %15 = fsub double -0.000000e+00, %14
  %16 = tail call double @llvm.fma.f64(double %15, double %13, double 5.000000e-01)
  %17 = tail call double @llvm.fma.f64(double %14, double %16, double %14)
  %18 = tail call double @llvm.fma.f64(double %13, double %16, double %13)
  %19 = fsub double -0.000000e+00, %18
  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %11)
  %21 = tail call double @llvm.fma.f64(double %20, double %17, double %18)
  %22 = tail call double @llvm.amdgcn.ldexp.f64(double %21, i32 %6)
  %23 = fcmp oeq double %5, 0.000000e+00
  %24 = select i1 %23, double 0.000000e+00, double %22
  %25 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %26 = icmp eq i8 %25, 0
  %27 = fcmp uno double %0, %1
  %28 = select i1 %27, double 0x7FF8000000000000, double %24
  %29 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %30 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 516)
  %31 = or i1 %29, %30
  %32 = select i1 %31, double 0x7FF0000000000000, double %28
  %33 = select i1 %26, double %32, double %24
  ret double %33
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_exp2_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.rint.f64(double %0)
  %3 = fsub double %0, %2
  %4 = fmul double %3, 0x3FE62E42FEFA39EF
  %5 = fsub double -0.000000e+00, %4
  %6 = tail call double @llvm.fma.f64(double %3, double 0x3FE62E42FEFA39EF, double %5) #47
  %7 = tail call double @llvm.fma.f64(double %3, double 0x3C7ABC9E3B39803F, double %6) #47
  %8 = fadd double %4, %7
  %9 = fsub double %8, %4
  %10 = fsub double %7, %9
  %11 = tail call double @llvm.fma.f64(double %8, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %12 = tail call double @llvm.fma.f64(double %8, double %11, double 0x3EC71DEE623FDE64)
  %13 = tail call double @llvm.fma.f64(double %8, double %12, double 0x3EFA01997C89E6B0)
  %14 = tail call double @llvm.fma.f64(double %8, double %13, double 0x3F2A01A014761F6E)
  %15 = tail call double @llvm.fma.f64(double %8, double %14, double 0x3F56C16C1852B7B0)
  %16 = tail call double @llvm.fma.f64(double %8, double %15, double 0x3F81111111122322)
  %17 = tail call double @llvm.fma.f64(double %8, double %16, double 0x3FA55555555502A1)
  %18 = tail call double @llvm.fma.f64(double %8, double %17, double 0x3FC5555555555511)
  %19 = tail call double @llvm.fma.f64(double %8, double %18, double 0x3FE000000000000B)
  %20 = fmul double %8, %8
  %21 = fsub double -0.000000e+00, %20
  %22 = tail call double @llvm.fma.f64(double %8, double %8, double %21) #47
  %23 = fmul double %10, 2.000000e+00
  %24 = tail call double @llvm.fma.f64(double %8, double %23, double %22) #47
  %25 = tail call double @llvm.fma.f64(double %10, double %10, double %24) #47
  %26 = fadd double %20, %25
  %27 = fsub double %26, %20
  %28 = fsub double %25, %27
  %29 = fmul double %26, %19
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %26, double %19, double %30) #47
  %32 = tail call double @llvm.fma.f64(double %28, double %19, double %31) #47
  %33 = fadd double %29, %32
  %34 = fsub double %33, %29
  %35 = fsub double %32, %34
  %36 = fadd double %8, %33
  %37 = fsub double %36, %8
  %38 = fsub double %33, %37
  %39 = fadd double %10, %35
  %40 = fadd double %38, %39
  %41 = fadd double %36, %40
  %42 = fadd double %41, 1.000000e+00
  %43 = fptosi double %2 to i32
  %44 = tail call double @llvm.amdgcn.ldexp.f64(double %42, i32 %43)
  %45 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %46 = icmp eq i8 %45, 0
  %47 = fcmp ogt double %0, 1.024000e+03
  %48 = and i1 %47, %46
  %49 = select i1 %48, double 0x7FF0000000000000, double %44
  %50 = fcmp olt double %0, -1.075000e+03
  %51 = select i1 %50, double 0.000000e+00, double %49
  ret double %51
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_log2_f32(float) local_unnamed_addr #29 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %1
  %5 = tail call float @llvm.log2.f32(float %0)
  br label %13

; <label>:6:                                      ; preds = %1
  %7 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 144)
  %8 = select i1 %7, float 0x41F0000000000000, float 1.000000e+00
  %9 = fmul float %8, %0
  %10 = tail call float @llvm.log2.f32(float %9)
  %11 = select i1 %7, float 3.200000e+01, float 0.000000e+00
  %12 = fsub float %10, %11
  br label %13

; <label>:13:                                     ; preds = %6, %4
  %14 = phi float [ %5, %4 ], [ %12, %6 ]
  ret float %14
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_tanh_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fsub float -0.000000e+00, %3
  %6 = tail call float @llvm.exp2.f32(float %5)
  %7 = tail call half @llvm.copysign.f16(half 0xH3C00, half %0) #21
  %8 = fsub float %4, %6
  %9 = fadd float %4, %6
  %10 = tail call float @llvm.amdgcn.rcp.f32(float %9)
  %11 = fmul float %8, %10
  %12 = fptrunc float %11 to half
  %13 = tail call half @llvm.fabs.f16(half %0) #21
  %14 = fcmp ogt half %13, 0xH4480
  %15 = select i1 %14, half %7, half %12
  ret half %15
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_copysign_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.copysign.f64(double %0, double %1)
  ret double %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_atan2_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.fabs.f16(half %1) #21
  %4 = tail call half @llvm.fabs.f16(half %0) #21
  %5 = tail call half @llvm.minnum.f16(half %3, half %4) #21
  %6 = tail call half @llvm.maxnum.f16(half %3, half %4) #21
  %7 = fdiv half %5, %6
  %8 = tail call half @__ocmlpriv_atanred_f16(half %7) #21
  %9 = fsub half 0xH3E48, %8
  %10 = fcmp ogt half %4, %3
  %11 = select i1 %10, half %9, half %8
  %12 = fsub half 0xH4248, %11
  %13 = fcmp olt half %1, 0xH0000
  %14 = select i1 %13, half %12, half %11
  %15 = bitcast half %1 to i16
  %16 = icmp slt i16 %15, 0
  %17 = select i1 %16, half 0xH4248, half 0xH0000
  %18 = fcmp oeq half %0, 0xH0000
  %19 = select i1 %18, half %17, half %14
  %20 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %21 = icmp eq i8 %20, 0
  %22 = select i1 %13, half 0xH40B6, half 0xH3A48
  %23 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %1, i32 516) #21
  %24 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 516) #21
  %25 = and i1 %24, %23
  %26 = select i1 %25, half %22, half %19
  %27 = fcmp uno half %1, %0
  %28 = select i1 %27, half 0xH7E00, half %26
  %29 = select i1 %21, half %28, half %19
  %30 = tail call half @llvm.copysign.f16(half %29, half %0) #21
  ret half %30
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected half @__ocml_nan_f16(i16 zeroext) local_unnamed_addr #31 {
  %2 = and i16 %0, 511
  %3 = or i16 %2, 32256
  %4 = bitcast i16 %3 to half
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_cos_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %1 @__ocmlpriv_trigred_f64(double %2) #21
  %4 = extractvalue %1 %3, 0
  %5 = extractvalue %1 %3, 1
  %6 = extractvalue %1 %3, 2
  %7 = tail call %2 @__ocmlpriv_sincosred2_f64(double %5, double %4) #21
  %8 = extractvalue %2 %7, 0
  %9 = extractvalue %2 %7, 1
  %10 = fsub double -0.000000e+00, %8
  %11 = and i32 %6, 1
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, double %9, double %10
  %14 = bitcast double %13 to <2 x i32>
  %15 = icmp sgt i32 %6, 1
  %16 = select i1 %15, i32 -2147483648, i32 0
  %17 = extractelement <2 x i32> %14, i64 1
  %18 = xor i32 %17, %16
  %19 = insertelement <2 x i32> %14, i32 %18, i64 1
  %20 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %21 = icmp eq i8 %20, 0
  %22 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %23 = and i1 %22, %21
  %24 = select i1 %23, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %19
  %25 = bitcast <2 x i32> %24 to double
  ret double %25
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_erfc_f64(double) local_unnamed_addr #28 {
  %2 = fcmp olt double %0, 0x3FDE861FBB24C00A
  br i1 %2, label %3, label %94

; <label>:3:                                      ; preds = %1
  %4 = fcmp ogt double %0, -1.000000e+00
  br i1 %4, label %5, label %20

; <label>:5:                                      ; preds = %3
  %6 = fmul double %0, %0
  %7 = tail call double @llvm.fma.f64(double %6, double 0xBE0ABAE491C443A9, double 0x3E4D71B0F1B10A64)
  %8 = tail call double @llvm.fma.f64(double %6, double %7, double 0xBE85C0726F04DCFB)
  %9 = tail call double @llvm.fma.f64(double %6, double %8, double 0x3EBB97FD3D992938)
  %10 = tail call double @llvm.fma.f64(double %6, double %9, double 0xBEEF4CA4D6F3E30F)
  %11 = tail call double @llvm.fma.f64(double %6, double %10, double 0x3F1F9A2BAA8FEDD2)
  %12 = tail call double @llvm.fma.f64(double %6, double %11, double 0xBF4C02DB03DD71D4)
  %13 = tail call double @llvm.fma.f64(double %6, double %12, double 0x3F7565BCCF92B2F9)
  %14 = tail call double @llvm.fma.f64(double %6, double %13, double 0xBF9B82CE311FA93E)
  %15 = tail call double @llvm.fma.f64(double %6, double %14, double 0x3FBCE2F21A040D16)
  %16 = tail call double @llvm.fma.f64(double %6, double %15, double 0xBFD812746B0379BD)
  %17 = tail call double @llvm.fma.f64(double %6, double %16, double 0x3FF20DD750429B6D)
  %18 = fsub double -0.000000e+00, %0
  %19 = tail call double @llvm.fma.f64(double %18, double %17, double 1.000000e+00)
  br label %208

; <label>:20:                                     ; preds = %3
  %21 = fcmp ogt double %0, -1.750000e+00
  br i1 %21, label %22, label %38

; <label>:22:                                     ; preds = %20
  %23 = fsub double -1.000000e+00, %0
  %24 = tail call double @llvm.fma.f64(double %23, double 0xBEE6C922ED03EB9D, double 0x3F197D42571BBB38)
  %25 = tail call double @llvm.fma.f64(double %23, double %24, double 0xBF341761E0138C87)
  %26 = tail call double @llvm.fma.f64(double %23, double %25, double 0x3F27F635425509DE)
  %27 = tail call double @llvm.fma.f64(double %23, double %26, double 0x3F530FE6B148C32F)
  %28 = tail call double @llvm.fma.f64(double %23, double %27, double 0xBF5E682366D34981)
  %29 = tail call double @llvm.fma.f64(double %23, double %28, double 0xBF739B7DCC1AEEC8)
  %30 = tail call double @llvm.fma.f64(double %23, double %29, double 0x3F8F0AB5DB978C52)
  %31 = tail call double @llvm.fma.f64(double %23, double %30, double 0x3F72E3E92D3304B4)
  %32 = tail call double @llvm.fma.f64(double %23, double %31, double 0xBFB1B613D8E18405)
  %33 = tail call double @llvm.fma.f64(double %23, double %32, double 0x3FB1B614A01845B4)
  %34 = tail call double @llvm.fma.f64(double %23, double %33, double 0x3FC1B614B15AB5C1)
  %35 = tail call double @llvm.fma.f64(double %23, double %34, double 0xBFDA911F0970FC8D)
  %36 = tail call double @llvm.fma.f64(double %23, double %35, double 0x3FDA911F096FBF43)
  %37 = tail call double @llvm.fma.f64(double %23, double %36, double 0x3FFD7BB3D3A08445)
  br label %208

; <label>:38:                                     ; preds = %20
  %39 = fcmp ogt double %0, -2.500000e+00
  br i1 %39, label %40, label %56

; <label>:40:                                     ; preds = %38
  %41 = fsub double -1.750000e+00, %0
  %42 = tail call double @llvm.fma.f64(double %41, double 0x3ED1F145E2E90AE8, double 0xBF004595429D0B58)
  %43 = tail call double @llvm.fma.f64(double %41, double %42, double 0x3F1566284CADC629)
  %44 = tail call double @llvm.fma.f64(double %41, double %43, double 0xBEEDAEFE4F2FA8E2)
  %45 = tail call double @llvm.fma.f64(double %41, double %44, double 0xBF3CBEE5EDA62503)
  %46 = tail call double @llvm.fma.f64(double %41, double %45, double 0x3F4D416C2AA2275A)
  %47 = tail call double @llvm.fma.f64(double %41, double %46, double 0x3F47EEB86B197684)
  %48 = tail call double @llvm.fma.f64(double %41, double %47, double 0xBF78D11B66138741)
  %49 = tail call double @llvm.fma.f64(double %41, double %48, double 0x3F825B37E361D1C9)
  %50 = tail call double @llvm.fma.f64(double %41, double %49, double 0x3F7B22258F45515D)
  %51 = tail call double @llvm.fma.f64(double %41, double %50, double 0xBFA8A0DA54B7E9DE)
  %52 = tail call double @llvm.fma.f64(double %41, double %51, double 0x3FB7148C3D5D2293)
  %53 = tail call double @llvm.fma.f64(double %41, double %52, double 0xBFB7A4A8A2BDFEB2)
  %54 = tail call double @llvm.fma.f64(double %41, double %53, double 0x3FAB05530322115B)
  %55 = tail call double @llvm.fma.f64(double %41, double %54, double 0x3FFFC9683BFC6AB7)
  br label %208

; <label>:56:                                     ; preds = %38
  %57 = fcmp ogt double %0, -4.000000e+00
  br i1 %57, label %58, label %76

; <label>:58:                                     ; preds = %56
  %59 = fsub double -2.500000e+00, %0
  %60 = tail call double @llvm.fma.f64(double %59, double 0xBDF708F6D0E65C33, double 0x3E3DBD0618847C60)
  %61 = tail call double @llvm.fma.f64(double %59, double %60, double 0xBE5C3001CF83CD69)
  %62 = tail call double @llvm.fma.f64(double %59, double %61, double 0xBE94DCA746DFE625)
  %63 = tail call double @llvm.fma.f64(double %59, double %62, double 0x3EBA8E79A95D6F67)
  %64 = tail call double @llvm.fma.f64(double %59, double %63, double 0x3EF8D8D7711FC864)
  %65 = tail call double @llvm.fma.f64(double %59, double %64, double 0xBF299FE2D9D9B69B)
  %66 = tail call double @llvm.fma.f64(double %59, double %65, double 0xBF3B3B1F1E28669C)
  %67 = tail call double @llvm.fma.f64(double %59, double %66, double 0x3F801D3D83753FB1)
  %68 = tail call double @llvm.fma.f64(double %59, double %67, double 0xBF5E842CF8341E6A)
  %69 = tail call double @llvm.fma.f64(double %59, double %68, double 0xBFCA49BB4AB1D7D9)
  %70 = tail call double @llvm.fma.f64(double %59, double %69, double 0x3FE3A50E1B16E339)
  %71 = fmul double %70, %70
  %72 = fmul double %71, %71
  %73 = fmul double %72, %72
  %74 = fsub double -0.000000e+00, %73
  %75 = tail call double @llvm.fma.f64(double %74, double %73, double 2.000000e+00)
  br label %208

; <label>:76:                                     ; preds = %56
  %77 = fcmp ogt double %0, -5.937500e+00
  br i1 %77, label %78, label %208

; <label>:78:                                     ; preds = %76
  %79 = fsub double -4.000000e+00, %0
  %80 = tail call double @llvm.fma.f64(double %79, double 0x3E55B22D2CD54932, double 0xBE73E056A1040A29)
  %81 = tail call double @llvm.fma.f64(double %79, double %80, double 0xBEC2D8F6BF8AF04A)
  %82 = tail call double @llvm.fma.f64(double %79, double %81, double 0x3EF4C20D337A4541)
  %83 = tail call double @llvm.fma.f64(double %79, double %82, double 0x3EFD9D0971C8F96D)
  %84 = tail call double @llvm.fma.f64(double %79, double %83, double 0xBF50A33E01ADB0DD)
  %85 = tail call double @llvm.fma.f64(double %79, double %84, double 0x3F663716FB40EAB9)
  %86 = tail call double @llvm.fma.f64(double %79, double %85, double 0x3F97D6F6BBCFC7E0)
  %87 = tail call double @llvm.fma.f64(double %79, double %86, double 0xBFC5687476FEEC74)
  %88 = tail call double @llvm.fma.f64(double %79, double %87, double 0x3FD4CB2BACD30820)
  %89 = fmul double %88, %88
  %90 = fmul double %89, %89
  %91 = fmul double %90, %90
  %92 = fsub double -0.000000e+00, %91
  %93 = tail call double @llvm.fma.f64(double %92, double %91, double 2.000000e+00)
  br label %208

; <label>:94:                                     ; preds = %1
  %95 = fcmp olt double %0, 1.000000e+00
  br i1 %95, label %96, label %112

; <label>:96:                                     ; preds = %94
  %97 = fadd double %0, -7.500000e-01
  %98 = tail call double @llvm.fma.f64(double %97, double 0xBEF57D59F658ABA7, double 0x3F1362E0B222318E)
  %99 = tail call double @llvm.fma.f64(double %97, double %98, double 0x3F1BC4DCD34FDD6D)
  %100 = tail call double @llvm.fma.f64(double %97, double %99, double 0xBF4470D403E0EFE6)
  %101 = tail call double @llvm.fma.f64(double %97, double %100, double 0xBF286196CE26E31F)
  %102 = tail call double @llvm.fma.f64(double %97, double %101, double 0x3F70410341EE1473)
  %103 = tail call double @llvm.fma.f64(double %97, double %102, double 0xBF62DB338DB4AD88)
  %104 = tail call double @llvm.fma.f64(double %97, double %103, double 0xBF92E0AFAC283B7F)
  %105 = tail call double @llvm.fma.f64(double %97, double %104, double 0x3F9B847796A479D8)
  %106 = tail call double @llvm.fma.f64(double %97, double %105, double 0x3FAB42A1890465D3)
  %107 = tail call double @llvm.fma.f64(double %97, double %106, double 0xBFC349B5EAA155B6)
  %108 = tail call double @llvm.fma.f64(double %97, double %107, double 0xBF9B6E8591F65270)
  %109 = tail call double @llvm.fma.f64(double %97, double %108, double 0x3FDEDC5644353C2D)
  %110 = tail call double @llvm.fma.f64(double %97, double %109, double 0xBFE492E42D78D2C5)
  %111 = tail call double @llvm.fma.f64(double %97, double %110, double 0x3FD27C6D14C5E341)
  br label %208

; <label>:112:                                    ; preds = %94
  %113 = fcmp olt double %0, 1.500000e+00
  br i1 %113, label %114, label %131

; <label>:114:                                    ; preds = %112
  %115 = fadd double %0, -1.250000e+00
  %116 = tail call double @llvm.fma.f64(double %115, double 0x3ED9C25DAE26E5A8, double 0x3EC692456873FAC4)
  %117 = tail call double @llvm.fma.f64(double %115, double %116, double 0xBF0D3EF7E77785BA)
  %118 = tail call double @llvm.fma.f64(double %115, double %117, double 0x3F0BAAA993D5590F)
  %119 = tail call double @llvm.fma.f64(double %115, double %118, double 0x3F353B075BBC5B61)
  %120 = tail call double @llvm.fma.f64(double %115, double %119, double 0xBF4A00787B6AF397)
  %121 = tail call double @llvm.fma.f64(double %115, double %120, double 0xBF4CC224FAB0D8A4)
  %122 = tail call double @llvm.fma.f64(double %115, double %121, double 0x3F775672D1E80999)
  %123 = tail call double @llvm.fma.f64(double %115, double %122, double 0xBF6DB43C97B37CEA)
  %124 = tail call double @llvm.fma.f64(double %115, double %123, double 0xBF95D0003AFA1E92)
  %125 = tail call double @llvm.fma.f64(double %115, double %124, double 0x3FA8281CE0B36C0D)
  %126 = tail call double @llvm.fma.f64(double %115, double %125, double 0x3F793A9A7BB80513)
  %127 = tail call double @llvm.fma.f64(double %115, double %126, double 0xBFC571D01C5C56C8)
  %128 = tail call double @llvm.fma.f64(double %115, double %127, double 0x3FD2EBF3DCC9F22F)
  %129 = tail call double @llvm.fma.f64(double %115, double %128, double 0xBFCE4652FADCB6B2)
  %130 = tail call double @llvm.fma.f64(double %115, double %129, double 0x3FB3BCD133AA0FFC)
  br label %208

; <label>:131:                                    ; preds = %112
  %132 = fcmp olt double %0, 1.750000e+00
  br i1 %132, label %133, label %146

; <label>:133:                                    ; preds = %131
  %134 = fadd double %0, -1.625000e+00
  %135 = tail call double @llvm.fma.f64(double %134, double 0x3F202AD00DD8CBB4, double 0x3F370FFB4C1C5CBF)
  %136 = tail call double @llvm.fma.f64(double %134, double %135, double 0xBF571C6788C68DE8)
  %137 = tail call double @llvm.fma.f64(double %134, double %136, double 0x3F42E4D6F91E46C7)
  %138 = tail call double @llvm.fma.f64(double %134, double %137, double 0x3F7954AA9DF71457)
  %139 = tail call double @llvm.fma.f64(double %134, double %138, double 0xBF8D857F3FBCAC79)
  %140 = tail call double @llvm.fma.f64(double %134, double %139, double 0x3F617D430D63AAF5)
  %141 = tail call double @llvm.fma.f64(double %134, double %140, double 0x3FA974C0368AECFC)
  %142 = tail call double @llvm.fma.f64(double %134, double %141, double 0xBFBD6631E1A2977F)
  %143 = tail call double @llvm.fma.f64(double %134, double %142, double 0x3FC0BCFCA219477B)
  %144 = tail call double @llvm.fma.f64(double %134, double %143, double 0xBFB499D478BCA733)
  %145 = tail call double @llvm.fma.f64(double %134, double %144, double 0x3F9612D893085125)
  br label %208

; <label>:146:                                    ; preds = %131
  %147 = fcmp olt double %0, 0x403B380000000000
  br i1 %147, label %148, label %205

; <label>:148:                                    ; preds = %146
  %149 = fmul double %0, %0
  %150 = fdiv double 1.000000e+00, %149
  %151 = fcmp olt double %0, 2.750000e+00
  br i1 %151, label %152, label %169

; <label>:152:                                    ; preds = %148
  %153 = tail call double @llvm.fma.f64(double %150, double 0x40AEE796B0CCCBEB, double 0xC0CF287322C462D4)
  %154 = tail call double @llvm.fma.f64(double %150, double %153, double 0x40DD9E0700D3D82D)
  %155 = tail call double @llvm.fma.f64(double %150, double %154, double 0xC0E1A96768B6B29F)
  %156 = tail call double @llvm.fma.f64(double %150, double %155, double 0x40DDAFA2508A60DC)
  %157 = tail call double @llvm.fma.f64(double %150, double %156, double 0xC0D2BBD8E3460B89)
  %158 = tail call double @llvm.fma.f64(double %150, double %157, double 0x40C27FD8CAB24E6E)
  %159 = tail call double @llvm.fma.f64(double %150, double %158, double 0xC0AD7A7A4E4C3B93)
  %160 = tail call double @llvm.fma.f64(double %150, double %159, double 0x40937A4A4D018456)
  %161 = tail call double @llvm.fma.f64(double %150, double %160, double 0xC0760173B9F73257)
  %162 = tail call double @llvm.fma.f64(double %150, double %161, double 0x4056253E7CA4B16F)
  %163 = tail call double @llvm.fma.f64(double %150, double %162, double 0xC0351D02C514C31C)
  %164 = tail call double @llvm.fma.f64(double %150, double %163, double 0x4014E9A1546B2716)
  %165 = tail call double @llvm.fma.f64(double %150, double %164, double 0xBFF86ED776E3A5E5)
  %166 = tail call double @llvm.fma.f64(double %150, double %165, double 0x3FE3FB9E1EF8C40A)
  %167 = tail call double @llvm.fma.f64(double %150, double %166, double 0xBFDFFFCB9FF22596)
  %168 = tail call double @llvm.fma.f64(double %150, double %167, double 0xBF843424DFCDBDCE)
  br label %190

; <label>:169:                                    ; preds = %148
  %170 = tail call double @llvm.fma.f64(double %150, double 0x425BBA05F5648454, double 0xC26401FF919F9865)
  %171 = tail call double @llvm.fma.f64(double %150, double %170, double 0x425B23350C3B39A1)
  %172 = tail call double @llvm.fma.f64(double %150, double %171, double 0xC2470D6CF6ECA08E)
  %173 = tail call double @llvm.fma.f64(double %150, double %172, double 0x422B9E665656EEE6)
  %174 = tail call double @llvm.fma.f64(double %150, double %173, double 0xC208F73B118A9B93)
  %175 = tail call double @llvm.fma.f64(double %150, double %174, double 0x41E1DA829FCEA796)
  %176 = tail call double @llvm.fma.f64(double %150, double %175, double 0xC1B5090992846E0E)
  %177 = tail call double @llvm.fma.f64(double %150, double %176, double 0x418548ADAC0440F5)
  %178 = tail call double @llvm.fma.f64(double %150, double %177, double 0xC153694E9079941E)
  %179 = tail call double @llvm.fma.f64(double %150, double %178, double 0x4120E5CE4AF6BB84)
  %180 = tail call double @llvm.fma.f64(double %150, double %179, double 0xC0EDDA4FEE0EA545)
  %181 = tail call double @llvm.fma.f64(double %150, double %180, double 0x40BC3F3A46F6FAC8)
  %182 = tail call double @llvm.fma.f64(double %150, double %181, double 0xC08DC5F4D89F0AE7)
  %183 = tail call double @llvm.fma.f64(double %150, double %182, double 0x4061F825DA9DCBAC)
  %184 = tail call double @llvm.fma.f64(double %150, double %183, double 0xC0398193F7900492)
  %185 = tail call double @llvm.fma.f64(double %150, double %184, double 0x40160FFFD6B1743D)
  %186 = tail call double @llvm.fma.f64(double %150, double %185, double 0xBFF8AAAAA9E2E8DE)
  %187 = tail call double @llvm.fma.f64(double %150, double %186, double 0x3FE3FFFFFFFEDBA9)
  %188 = tail call double @llvm.fma.f64(double %150, double %187, double 0xBFDFFFFFFFFFFF1F)
  %189 = tail call double @llvm.fma.f64(double %150, double %188, double 0xBF84341239E86F47)
  br label %190

; <label>:190:                                    ; preds = %169, %152
  %191 = phi double [ %168, %152 ], [ %189, %169 ]
  %192 = bitcast double %0 to i64
  %193 = and i64 %192, -4294967296
  %194 = bitcast i64 %193 to double
  %195 = fsub double %0, %194
  %196 = fadd double %194, %0
  %197 = fsub double -0.000000e+00, %196
  %198 = tail call double @llvm.fma.f64(double %195, double %197, double %191)
  %199 = tail call double @__ocml_exp_f64(double %198) #21
  %200 = fdiv double %199, %0
  %201 = fsub double -0.000000e+00, %194
  %202 = tail call double @llvm.fma.f64(double %194, double %201, double -5.625000e-01)
  %203 = tail call double @__ocml_exp_f64(double %202) #21
  %204 = fmul double %200, %203
  br label %208

; <label>:205:                                    ; preds = %146
  %206 = fcmp ord double %0, 0.000000e+00
  %207 = select i1 %206, double 0.000000e+00, double %0
  br label %208

; <label>:208:                                    ; preds = %205, %190, %133, %114, %96, %78, %76, %58, %40, %22, %5
  %209 = phi double [ %19, %5 ], [ %37, %22 ], [ %55, %40 ], [ %75, %58 ], [ %93, %78 ], [ %111, %96 ], [ %130, %114 ], [ %145, %133 ], [ %204, %190 ], [ %207, %205 ], [ 2.000000e+00, %76 ]
  ret double %209
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_logb_f16(half) local_unnamed_addr #28 {
  %2 = tail call signext i16 @llvm.amdgcn.frexp.exp.i16.f16(half %0) #21
  %3 = sext i16 %2 to i32
  %4 = add nsw i32 %3, -1
  %5 = sitofp i32 %4 to half
  %6 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %7 = icmp eq i8 %6, 0
  %8 = tail call half @llvm.fabs.f16(half %0) #21
  %9 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %8, i32 515) #21
  %10 = select i1 %9, half %8, half %5
  %11 = fcmp oeq half %0, 0xH0000
  %12 = select i1 %11, half 0xHFC00, half %10
  %13 = select i1 %7, half %12, half %5
  ret half %13
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected float @__ocml_remquo_f32(float, float, i32 addrspace(5)* nocapture) local_unnamed_addr #30 {
  %4 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %5 = icmp eq i8 %4, 0
  %6 = tail call float @llvm.canonicalize.f32(float %0)
  %7 = tail call float @llvm.canonicalize.f32(float %1)
  %8 = select i1 %5, float %1, float %7
  %9 = select i1 %5, float %0, float %6
  %10 = tail call float @llvm.fabs.f32(float %9)
  %11 = tail call float @llvm.fabs.f32(float %8)
  %12 = fcmp ogt float %10, %11
  br i1 %12, label %13, label %138

; <label>:13:                                     ; preds = %3
  %14 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %10)
  %15 = tail call float @llvm.amdgcn.frexp.mant.f32(float %10)
  %16 = tail call float @llvm.amdgcn.ldexp.f32(float %15, i32 12)
  %17 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %11)
  %18 = add nsw i32 %17, -1
  %19 = tail call float @llvm.amdgcn.frexp.mant.f32(float %11)
  %20 = tail call float @llvm.amdgcn.ldexp.f32(float %19, i32 1)
  %21 = sub i32 %14, %17
  %22 = tail call float @llvm.amdgcn.rcp.f32(float %20)
  %23 = icmp sgt i32 %21, 12
  %24 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  br i1 %23, label %25, label %70

; <label>:25:                                     ; preds = %13
  %26 = icmp sgt i32 %24, 899
  %27 = bitcast float %20 to i32
  %28 = and i32 %27, -4096
  %29 = bitcast i32 %28 to float
  %30 = fsub float %20, %29
  br label %31

; <label>:31:                                     ; preds = %57, %25
  %32 = phi float [ %16, %25 ], [ %67, %57 ]
  %33 = phi i32 [ %21, %25 ], [ %68, %57 ]
  %34 = phi i32 [ 0, %25 ], [ %66, %57 ]
  %35 = fmul float %22, %32
  %36 = tail call float @llvm.rint.f32(float %35)
  br i1 %26, label %38, label %37

; <label>:37:                                     ; preds = %31
  switch i32 %24, label %41 [
    i32 801, label %38
    i32 701, label %38
  ]

; <label>:38:                                     ; preds = %37, %37, %31
  %39 = fsub float -0.000000e+00, %36
  %40 = tail call float @llvm.fma.f32(float %39, float %20, float %32) #47
  br label %57

; <label>:41:                                     ; preds = %37
  %42 = bitcast float %36 to i32
  %43 = and i32 %42, -4096
  %44 = bitcast i32 %43 to float
  %45 = fsub float %36, %44
  %46 = fmul float %20, %36
  %47 = fsub float -0.000000e+00, %46
  %48 = tail call float @__ocml_fmuladd_f32(float %44, float %29, float %47) #21
  %49 = tail call float @__ocml_fmuladd_f32(float %44, float %30, float %48) #21
  %50 = tail call float @__ocml_fmuladd_f32(float %45, float %29, float %49) #21
  %51 = tail call float @__ocml_fmuladd_f32(float %45, float %30, float %50) #21
  %52 = fsub float %32, %46
  %53 = fsub float %32, %52
  %54 = fsub float %53, %46
  %55 = fsub float %54, %51
  %56 = fadd float %52, %55
  br label %57

; <label>:57:                                     ; preds = %41, %38
  %58 = phi float [ %40, %38 ], [ %56, %41 ]
  %59 = fcmp olt float %58, 0.000000e+00
  %60 = zext i1 %59 to i32
  %61 = fadd float %20, %58
  %62 = select i1 %59, float %61, float %58
  %63 = fptosi float %36 to i32
  %64 = sub nsw i32 %63, %60
  %65 = shl i32 %34, 12
  %66 = or i32 %64, %65
  %67 = tail call float @llvm.amdgcn.ldexp.f32(float %62, i32 12)
  %68 = add nsw i32 %33, -12
  %69 = icmp sgt i32 %68, 12
  br i1 %69, label %31, label %70

; <label>:70:                                     ; preds = %57, %13
  %71 = phi i32 [ 0, %13 ], [ %66, %57 ]
  %72 = phi i32 [ %21, %13 ], [ %68, %57 ]
  %73 = phi float [ %16, %13 ], [ %67, %57 ]
  %74 = add nsw i32 %72, -11
  %75 = tail call float @llvm.amdgcn.ldexp.f32(float %73, i32 %74)
  %76 = fmul float %22, %75
  %77 = tail call float @llvm.rint.f32(float %76)
  %78 = icmp sgt i32 %24, 899
  br i1 %78, label %80, label %79

; <label>:79:                                     ; preds = %70
  switch i32 %24, label %83 [
    i32 801, label %80
    i32 701, label %80
  ]

; <label>:80:                                     ; preds = %79, %79, %70
  %81 = fsub float -0.000000e+00, %77
  %82 = tail call float @llvm.fma.f32(float %81, float %20, float %75) #47
  br label %103

; <label>:83:                                     ; preds = %79
  %84 = bitcast float %77 to i32
  %85 = and i32 %84, -4096
  %86 = bitcast i32 %85 to float
  %87 = fsub float %77, %86
  %88 = bitcast float %20 to i32
  %89 = and i32 %88, -4096
  %90 = bitcast i32 %89 to float
  %91 = fsub float %20, %90
  %92 = fmul float %20, %77
  %93 = fsub float -0.000000e+00, %92
  %94 = tail call float @__ocml_fmuladd_f32(float %86, float %90, float %93) #21
  %95 = tail call float @__ocml_fmuladd_f32(float %86, float %91, float %94) #21
  %96 = tail call float @__ocml_fmuladd_f32(float %87, float %90, float %95) #21
  %97 = tail call float @__ocml_fmuladd_f32(float %87, float %91, float %96) #21
  %98 = fsub float %75, %92
  %99 = fsub float %75, %98
  %100 = fsub float %99, %92
  %101 = fsub float %100, %97
  %102 = fadd float %98, %101
  br label %103

; <label>:103:                                    ; preds = %83, %80
  %104 = phi float [ %82, %80 ], [ %102, %83 ]
  %105 = fcmp olt float %104, 0.000000e+00
  %106 = zext i1 %105 to i32
  %107 = fadd float %20, %104
  %108 = select i1 %105, float %107, float %104
  %109 = fptosi float %77 to i32
  %110 = sub nsw i32 %109, %106
  %111 = add nsw i32 %72, 1
  %112 = and i32 %111, 31
  %113 = shl i32 %71, %112
  %114 = or i32 %110, %113
  %115 = fmul float %108, 2.000000e+00
  %116 = fcmp ogt float %115, %20
  %117 = zext i1 %116 to i32
  %118 = fcmp oeq float %115, %20
  %119 = zext i1 %118 to i32
  %120 = and i32 %114, %119
  %121 = or i32 %120, %117
  %122 = icmp eq i32 %121, 0
  %123 = select i1 %122, float 0.000000e+00, float %20
  %124 = fsub float %108, %123
  %125 = add nsw i32 %121, %114
  %126 = bitcast float %9 to i32
  %127 = bitcast float %8 to i32
  %128 = xor i32 %126, %127
  %129 = ashr i32 %128, 31
  %130 = and i32 %125, 127
  %131 = xor i32 %130, %129
  %132 = sub nsw i32 %131, %129
  %133 = tail call float @llvm.amdgcn.ldexp.f32(float %124, i32 %18)
  %134 = and i32 %126, -2147483648
  %135 = bitcast float %133 to i32
  %136 = xor i32 %134, %135
  %137 = bitcast i32 %136 to float
  br label %160

; <label>:138:                                    ; preds = %3
  %139 = fcmp olt float %11, 0x47E0000000000000
  %140 = fmul float %10, 2.000000e+00
  %141 = fcmp ogt float %140, %11
  %142 = and i1 %139, %141
  %143 = fmul float %11, 5.000000e-01
  %144 = fcmp ogt float %10, %143
  %145 = or i1 %144, %142
  %146 = bitcast float %9 to i32
  %147 = bitcast float %8 to i32
  %148 = xor i32 %146, %147
  %149 = ashr i32 %148, 30
  %150 = or i32 %149, 1
  %151 = sitofp i32 %150 to float
  %152 = fsub float -0.000000e+00, %151
  %153 = tail call float @__ocml_fmuladd_f32(float %8, float %152, float %9) #21
  %154 = select i1 %145, float %153, float %9
  %155 = fcmp oeq float %10, %11
  %156 = tail call float @llvm.copysign.f32(float 0.000000e+00, float %9)
  %157 = select i1 %155, float %156, float %154
  %158 = or i1 %155, %145
  %159 = select i1 %158, i32 %150, i32 0
  br label %160

; <label>:160:                                    ; preds = %138, %103
  %161 = phi i32 [ %132, %103 ], [ %159, %138 ]
  %162 = phi float [ %137, %103 ], [ %157, %138 ]
  %163 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %164 = icmp eq i8 %163, 0
  %165 = fcmp oeq float %8, 0.000000e+00
  %166 = fcmp uno float %8, 0.000000e+00
  %167 = tail call i1 @llvm.amdgcn.class.f32(float %9, i32 519)
  %168 = or i1 %166, %167
  %169 = or i1 %165, %168
  %170 = and i1 %169, %164
  %171 = select i1 %170, i32 0, i32 %161
  %172 = select i1 %170, float 0x7FF8000000000000, float %162
  store i32 %171, i32 addrspace(5)* %2, align 4, !tbaa !120
  ret float %172
}

; Function Attrs: nounwind writeonly
define linkonce_odr protected double @__ocml_frexp_f64(double, i32 addrspace(5)* nocapture) local_unnamed_addr #32 {
  %3 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %4 = tail call double @llvm.amdgcn.frexp.mant.f64(double %0)
  %5 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %6 = select i1 %5, i32 0, i32 %3
  store i32 %6, i32 addrspace(5)* %1, align 4, !tbaa !120
  %7 = select i1 %5, double %0, double %4
  ret double %7
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_erfcinv_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_erfcinv_f32(float %2) #21
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_fpclassify_f32(float) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %3 = zext i1 %2 to i32
  %4 = fcmp oeq float %0, 0.000000e+00
  %5 = select i1 %4, i32 2, i32 %3
  %6 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 144)
  %7 = select i1 %6, i32 3, i32 %5
  %8 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 264)
  %9 = select i1 %8, i32 4, i32 %7
  ret i32 %9
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_lgamma_f64(double) local_unnamed_addr #28 {
  %2 = alloca i32, align 4, addrspace(5)
  %3 = bitcast i32 addrspace(5)* %2 to i8 addrspace(5)*
  call void @llvm.lifetime.start.p5i8(i64 4, i8 addrspace(5)* %3) #47
  %4 = call double @__ocml_lgamma_r_f64(double %0, i32 addrspace(5)* %2) #52
  call void @llvm.lifetime.end.p5i8(i64 4, i8 addrspace(5)* %3) #47
  ret double %4
}

; Function Attrs: convergent nounwind writeonly
define linkonce_odr protected double @__ocml_lgamma_r_f64(double, i32 addrspace(5)* nocapture) local_unnamed_addr #30 {
  %3 = tail call double @llvm.fabs.f64(double %0) #47
  %4 = bitcast double %3 to <2 x i32>
  %5 = extractelement <2 x i32> %4, i64 1
  %6 = icmp ult i32 %5, 1064304640
  br i1 %6, label %7, label %15

; <label>:7:                                      ; preds = %2
  %8 = tail call double @llvm.fma.f64(double %3, double 0xBFCA8B9C17AA6149, double 0x3FD151322AC7D848) #47
  %9 = tail call double @llvm.fma.f64(double %3, double %8, double 0xBFD9A4D55BEAB2D7) #47
  %10 = tail call double @llvm.fma.f64(double %3, double %9, double 0x3FEA51A6625307D3) #47
  %11 = tail call double @llvm.fma.f64(double %3, double %10, double 0xBFE2788CFC6FB619) #47
  %12 = tail call double @__ocml_log_f64(double %3) #21
  %13 = fsub double -0.000000e+00, %12
  %14 = tail call double @llvm.fma.f64(double %3, double %11, double %13) #47
  br label %158

; <label>:15:                                     ; preds = %2
  %16 = icmp ult i32 %5, 1073741824
  br i1 %16, label %17, label %97

; <label>:17:                                     ; preds = %15
  %18 = icmp ult i32 %5, 1072483533
  br i1 %18, label %19, label %30

; <label>:19:                                     ; preds = %17
  %20 = tail call double @__ocml_log_f64(double %3) #21
  %21 = fsub double -0.000000e+00, %20
  %22 = fsub double 1.000000e+00, %3
  %23 = icmp ult i32 %5, 1072130372
  %24 = fadd double %3, 0xBFDD8B618D5AF8FC
  %25 = select i1 %23, double %24, double %22
  %26 = zext i1 %23 to i32
  %27 = icmp ult i32 %5, 1070442081
  %28 = select i1 %27, double %3, double %25
  %29 = select i1 %27, i32 2, i32 %26
  br label %40

; <label>:30:                                     ; preds = %17
  %31 = fsub double 2.000000e+00, %3
  %32 = icmp ult i32 %5, 1073460419
  %33 = fadd double %3, 0xBFF762D86356BE3F
  %34 = select i1 %32, double %33, double %31
  %35 = zext i1 %32 to i32
  %36 = icmp ult i32 %5, 1072936132
  %37 = fadd double %3, -1.000000e+00
  %38 = select i1 %36, double %37, double %34
  %39 = select i1 %36, i32 2, i32 %35
  br label %40

; <label>:40:                                     ; preds = %30, %19
  %41 = phi double [ %28, %19 ], [ %38, %30 ]
  %42 = phi i32 [ %29, %19 ], [ %39, %30 ]
  %43 = phi double [ %21, %19 ], [ 0.000000e+00, %30 ]
  switch i32 %42, label %158 [
    i32 0, label %44
    i32 1, label %60
    i32 2, label %82
  ]

; <label>:44:                                     ; preds = %40
  %45 = fmul double %41, %41
  %46 = tail call double @llvm.fma.f64(double %45, double 0x3EFA7074428CFA52, double 0x3F2CF2ECED10E54D) #47
  %47 = tail call double @llvm.fma.f64(double %45, double %46, double 0x3F538A94116F3F5D) #47
  %48 = tail call double @llvm.fma.f64(double %45, double %47, double 0x3F7E404FB68FEFE8) #47
  %49 = tail call double @llvm.fma.f64(double %45, double %48, double 0x3FB13E001A5562A7) #47
  %50 = tail call double @llvm.fma.f64(double %45, double %49, double 0x3FB3C467E37DB0C8) #47
  %51 = tail call double @llvm.fma.f64(double %45, double 0x3F07858E90A45837, double 0x3F1C5088987DFB07) #47
  %52 = tail call double @llvm.fma.f64(double %45, double %51, double 0x3F40B6C689B99C00) #47
  %53 = tail call double @llvm.fma.f64(double %45, double %52, double 0x3F67ADD8CCB7926B) #47
  %54 = tail call double @llvm.fma.f64(double %45, double %53, double 0x3F951322AC92547B) #47
  %55 = tail call double @llvm.fma.f64(double %45, double %54, double 0x3FD4A34CC4A60FAD) #47
  %56 = fmul double %45, %55
  %57 = tail call double @llvm.fma.f64(double %41, double %50, double %56) #47
  %58 = tail call double @llvm.fma.f64(double %41, double -5.000000e-01, double %57) #47
  %59 = fadd double %43, %58
  br label %158

; <label>:60:                                     ; preds = %40
  %61 = fmul double %41, %41
  %62 = fmul double %41, %61
  %63 = tail call double @llvm.fma.f64(double %62, double 0x3F34AF6D6C0EBBF7, double 0xBF56FE8EBF2D1AF1) #47
  %64 = tail call double @llvm.fma.f64(double %62, double %63, double 0x3F78FCE0E370E344) #47
  %65 = tail call double @llvm.fma.f64(double %62, double %64, double 0xBFA0C9A8DF35B713) #47
  %66 = tail call double @llvm.fma.f64(double %62, double %65, double 0x3FDEF72BC8EE38A2) #47
  %67 = tail call double @llvm.fma.f64(double %62, double 0xBF347F24ECC38C38, double 0x3F4CDF0CEF61A8E9) #47
  %68 = tail call double @llvm.fma.f64(double %62, double %67, double 0xBF6E2EFFB3E914D7) #47
  %69 = tail call double @llvm.fma.f64(double %62, double %68, double 0x3F9266E7970AF9EC) #47
  %70 = tail call double @llvm.fma.f64(double %62, double %69, double 0xBFC2E4278DC6C509) #47
  %71 = tail call double @llvm.fma.f64(double %62, double 0x3F35FD3EE8C2D3F4, double 0xBF41A6109C73E0EC) #47
  %72 = tail call double @llvm.fma.f64(double %62, double %71, double 0x3F6282D32E15C915) #47
  %73 = tail call double @llvm.fma.f64(double %62, double %72, double 0xBF851F9FBA91EC6A) #47
  %74 = tail call double @llvm.fma.f64(double %62, double %73, double 0x3FB08B4294D5419B) #47
  %75 = tail call double @llvm.fma.f64(double %41, double %74, double %70) #47
  %76 = fsub double -0.000000e+00, %75
  %77 = tail call double @llvm.fma.f64(double %62, double %76, double 0xBC50C7CAA48A971F) #47
  %78 = fsub double -0.000000e+00, %77
  %79 = tail call double @llvm.fma.f64(double %61, double %66, double %78) #47
  %80 = fadd double %79, 0xBFBF19B9BCC38A42
  %81 = fadd double %43, %80
  br label %158

; <label>:82:                                     ; preds = %40
  %83 = tail call double @llvm.fma.f64(double %41, double 0x3F8B678BBF2BAB09, double 0x3FCD4EAEF6010924) #47
  %84 = tail call double @llvm.fma.f64(double %41, double %83, double 0x3FEF497644EA8450) #47
  %85 = tail call double @llvm.fma.f64(double %41, double %84, double 0x3FF7475CD119BD6F) #47
  %86 = tail call double @llvm.fma.f64(double %41, double %85, double 0x3FE4401E8B005DFF) #47
  %87 = tail call double @llvm.fma.f64(double %41, double %86, double 0xBFB3C467E37DB0C8) #47
  %88 = fmul double %41, %87
  %89 = tail call double @llvm.fma.f64(double %41, double 0x3F6A5ABB57D0CF61, double 0x3FBAAE55D6537C88) #47
  %90 = tail call double @llvm.fma.f64(double %41, double %89, double 0x3FE89DFBE45050AF) #47
  %91 = tail call double @llvm.fma.f64(double %41, double %90, double 0x40010725A42B18F5) #47
  %92 = tail call double @llvm.fma.f64(double %41, double %91, double 0x4003A5D7C2BD619C) #47
  %93 = tail call double @llvm.fma.f64(double %41, double %92, double 1.000000e+00) #47
  %94 = fdiv double %88, %93
  %95 = tail call double @llvm.fma.f64(double %41, double -5.000000e-01, double %94) #47
  %96 = fadd double %43, %95
  br label %158

; <label>:97:                                     ; preds = %15
  %98 = icmp ult i32 %5, 1075838976
  br i1 %98, label %99, label %139

; <label>:99:                                     ; preds = %97
  %100 = fptosi double %3 to i32
  %101 = sitofp i32 %100 to double
  %102 = fsub double %3, %101
  %103 = tail call double @llvm.fma.f64(double %102, double 0x3F00BFECDD17E945, double 0x3F5E26B67368F239) #47
  %104 = tail call double @llvm.fma.f64(double %102, double %103, double 0x3F9B481C7E939961) #47
  %105 = tail call double @llvm.fma.f64(double %102, double %104, double 0x3FC2BB9CBEE5F2F7) #47
  %106 = tail call double @llvm.fma.f64(double %102, double %105, double 0x3FD4D98F4F139F59) #47
  %107 = tail call double @llvm.fma.f64(double %102, double %106, double 0x3FCB848B36E20878) #47
  %108 = tail call double @llvm.fma.f64(double %102, double %107, double 0xBFB3C467E37DB0C8) #47
  %109 = fmul double %102, %108
  %110 = tail call double @llvm.fma.f64(double %102, double 0x3EDEBAF7A5B38140, double 0x3F497DDACA41A95B) #47
  %111 = tail call double @llvm.fma.f64(double %102, double %110, double 0x3F9317EA742ED475) #47
  %112 = tail call double @llvm.fma.f64(double %102, double %111, double 0x3FC601EDCCFBDF27) #47
  %113 = tail call double @llvm.fma.f64(double %102, double %112, double 0x3FE71A1893D3DCDC) #47
  %114 = tail call double @llvm.fma.f64(double %102, double %113, double 0x3FF645A762C4AB74) #47
  %115 = tail call double @llvm.fma.f64(double %102, double %114, double 1.000000e+00) #47
  %116 = fdiv double %109, %115
  %117 = tail call double @llvm.fma.f64(double %102, double 5.000000e-01, double %116) #47
  %118 = fadd double %102, 2.000000e+00
  %119 = fadd double %102, 3.000000e+00
  %120 = fadd double %102, 4.000000e+00
  %121 = fadd double %102, 5.000000e+00
  %122 = fadd double %102, 6.000000e+00
  %123 = icmp sgt i32 %100, 2
  %124 = select i1 %123, double %118, double 1.000000e+00
  %125 = icmp sgt i32 %100, 3
  %126 = select i1 %125, double %119, double 1.000000e+00
  %127 = fmul double %124, %126
  %128 = icmp sgt i32 %100, 4
  %129 = select i1 %128, double %120, double 1.000000e+00
  %130 = fmul double %129, %127
  %131 = icmp sgt i32 %100, 5
  %132 = select i1 %131, double %121, double 1.000000e+00
  %133 = fmul double %132, %130
  %134 = icmp sgt i32 %100, 6
  %135 = select i1 %134, double %122, double 1.000000e+00
  %136 = fmul double %135, %133
  %137 = tail call double @__ocml_log_f64(double %136) #21
  %138 = fadd double %117, %137
  br label %158

; <label>:139:                                    ; preds = %97
  %140 = icmp ult i32 %5, 1133510656
  br i1 %140, label %141, label %154

; <label>:141:                                    ; preds = %139
  %142 = fdiv double 1.000000e+00, %3
  %143 = fmul double %142, %142
  %144 = tail call double @llvm.fma.f64(double %143, double 0xBF5AB89D0B9E43E4, double 0x3F4B67BA4CDAD5D1) #47
  %145 = tail call double @llvm.fma.f64(double %143, double %144, double 0xBF4380CB8C0FE741) #47
  %146 = tail call double @llvm.fma.f64(double %143, double %145, double 0x3F4A019F98CF38B6) #47
  %147 = tail call double @llvm.fma.f64(double %143, double %146, double 0xBF66C16C16B02E5C) #47
  %148 = tail call double @llvm.fma.f64(double %143, double %147, double 0x3FB555555555553B) #47
  %149 = tail call double @llvm.fma.f64(double %142, double %148, double 0x3FDACFE390C97D69) #47
  %150 = fadd double %3, -5.000000e-01
  %151 = tail call double @__ocml_log_f64(double %3) #21
  %152 = fadd double %151, -1.000000e+00
  %153 = tail call double @llvm.fma.f64(double %150, double %152, double %149) #47
  br label %158

; <label>:154:                                    ; preds = %139
  %155 = tail call double @__ocml_log_f64(double %3) #21
  %156 = fsub double -0.000000e+00, %3
  %157 = tail call double @llvm.fma.f64(double %3, double %155, double %156) #47
  br label %158

; <label>:158:                                    ; preds = %154, %141, %99, %82, %60, %44, %40, %7
  %159 = phi double [ %14, %7 ], [ %138, %99 ], [ %153, %141 ], [ %157, %154 ], [ %43, %40 ], [ %96, %82 ], [ %81, %60 ], [ %59, %44 ]
  %160 = fcmp ult double %0, 0.000000e+00
  br i1 %160, label %168, label %161

; <label>:161:                                    ; preds = %158
  %162 = fcmp oeq double %0, 1.000000e+00
  %163 = fcmp oeq double %0, 2.000000e+00
  %164 = or i1 %162, %163
  %165 = select i1 %164, double 0.000000e+00, double %159
  %166 = fcmp une double %0, 0.000000e+00
  %167 = zext i1 %166 to i32
  br label %185

; <label>:168:                                    ; preds = %158
  %169 = icmp ult i32 %5, 1127219200
  br i1 %169, label %170, label %185

; <label>:170:                                    ; preds = %168
  %171 = tail call double @__ocml_sinpi_f64(double %0) #21
  %172 = fmul double %171, %0
  %173 = tail call double @llvm.fabs.f64(double %172) #47
  %174 = fdiv double 0x400921FB54442D18, %173
  %175 = tail call double @__ocml_log_f64(double %174) #21
  %176 = fsub double %175, %159
  %177 = tail call double @llvm.amdgcn.fract.f64(double %0) #47
  %178 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516) #47
  %179 = select i1 %178, double 0.000000e+00, double %177
  %180 = fcmp oeq double %179, 0.000000e+00
  %181 = select i1 %180, double 0x7FF0000000000000, double %176
  %182 = fcmp olt double %171, 0.000000e+00
  %183 = select i1 %182, i32 -1, i32 1
  %184 = select i1 %180, i32 0, i32 %183
  br label %185

; <label>:185:                                    ; preds = %170, %168, %161
  %186 = phi i32 [ %167, %161 ], [ %184, %170 ], [ 0, %168 ]
  %187 = phi double [ %165, %161 ], [ %181, %170 ], [ %159, %168 ]
  %188 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %190, label %199

; <label>:190:                                    ; preds = %185
  %191 = tail call i1 @llvm.amdgcn.class.f64(double %3, i32 608) #47
  %192 = fcmp olt double %0, 0.000000e+00
  %193 = icmp ugt i32 %5, 1127219199
  %194 = and i1 %192, %193
  %195 = or i1 %191, %194
  %196 = select i1 %195, double 0x7FF0000000000000, double %187
  %197 = fcmp uno double %0, 0.000000e+00
  %198 = select i1 %197, double %0, double %196
  br label %199

; <label>:199:                                    ; preds = %190, %185
  %200 = phi double [ %187, %185 ], [ %198, %190 ]
  store i32 %186, i32 addrspace(5)* %1, align 4, !tbaa !120
  ret double %200
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isnormal_f32(float) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 264)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_floor_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.floor.f64(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_isinf_f64(double) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %3 = zext i1 %2 to i32
  ret i32 %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_log1p_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = fadd float %2, 1.000000e+00
  %4 = tail call float @llvm.log2.f32(float %3)
  %5 = fmul float %4, 0x3FE62E4300000000
  %6 = fptrunc float %5 to half
  %7 = tail call half @llvm.fma.f16(half %0, half 0xH3555, half 0xHB800) #21
  %8 = fmul half %7, %0
  %9 = tail call half @llvm.fma.f16(half %0, half %8, half %0) #21
  %10 = tail call half @llvm.fabs.f16(half %0) #21
  %11 = fcmp olt half %10, 0xH2400
  %12 = select i1 %11, half %9, half %6
  ret half %12
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_log10_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = load i8, i8 addrspace(4)* @__oclc_unsafe_math_opt, align 1, !tbaa !140, !range !43
  %5 = icmp ne i8 %4, 0
  br i1 %3, label %33, label %6

; <label>:6:                                      ; preds = %1
  %7 = tail call float @llvm.log2.f32(float %0)
  br i1 %5, label %8, label %10

; <label>:8:                                      ; preds = %6
  %9 = fmul float %7, 0x3FD3441360000000
  br label %66

; <label>:10:                                     ; preds = %6
  %11 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %12 = icmp sgt i32 %11, 899
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %10
  switch i32 %11, label %20 [
    i32 801, label %14
    i32 701, label %14
  ]

; <label>:14:                                     ; preds = %13, %13, %10
  %15 = fmul float %7, 0x3FD3441340000000
  %16 = fsub float -0.000000e+00, %15
  %17 = tail call float @llvm.fma.f32(float %7, float 0x3FD3441340000000, float %16)
  %18 = tail call float @llvm.fma.f32(float %7, float 0x3E509F79E0000000, float %17)
  %19 = fadd float %15, %18
  br label %29

; <label>:20:                                     ; preds = %13
  %21 = bitcast float %7 to i32
  %22 = and i32 %21, -4096
  %23 = bitcast i32 %22 to float
  %24 = fsub float %7, %23
  %25 = fmul float %24, 0x3ED3509F60000000
  %26 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3ED3509F60000000, float %25) #21
  %27 = tail call float @__ocml_fmuladd_f32(float %24, float 0x3FD3440000000000, float %26) #21
  %28 = tail call float @__ocml_fmuladd_f32(float %23, float 0x3FD3440000000000, float %27) #21
  br label %29

; <label>:29:                                     ; preds = %20, %14
  %30 = phi float [ %19, %14 ], [ %28, %20 ]
  %31 = tail call i1 @llvm.amdgcn.class.f32(float %7, i32 519)
  %32 = select i1 %31, float %7, float %30
  br label %66

; <label>:33:                                     ; preds = %1
  %34 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 144)
  %35 = select i1 %34, float 0x41F0000000000000, float 1.000000e+00
  %36 = fmul float %35, %0
  %37 = tail call float @llvm.log2.f32(float %36)
  br i1 %5, label %38, label %41

; <label>:38:                                     ; preds = %33
  %39 = select i1 %34, float 0xC023441360000000, float 0.000000e+00
  %40 = tail call float @__ocml_fmuladd_f32(float %37, float 0x3FD3441360000000, float %39) #21
  br label %66

; <label>:41:                                     ; preds = %33
  %42 = load i32, i32 addrspace(4)* @__oclc_ISA_version, align 4, !tbaa !120
  %43 = icmp sgt i32 %42, 899
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %41
  switch i32 %42, label %51 [
    i32 801, label %45
    i32 701, label %45
  ]

; <label>:45:                                     ; preds = %44, %44, %41
  %46 = fmul float %37, 0x3FD3441340000000
  %47 = fsub float -0.000000e+00, %46
  %48 = tail call float @llvm.fma.f32(float %37, float 0x3FD3441340000000, float %47)
  %49 = tail call float @llvm.fma.f32(float %37, float 0x3E509F79E0000000, float %48)
  %50 = fadd float %46, %49
  br label %60

; <label>:51:                                     ; preds = %44
  %52 = bitcast float %37 to i32
  %53 = and i32 %52, -4096
  %54 = bitcast i32 %53 to float
  %55 = fsub float %37, %54
  %56 = fmul float %55, 0x3ED3509F60000000
  %57 = tail call float @__ocml_fmuladd_f32(float %54, float 0x3ED3509F60000000, float %56) #21
  %58 = tail call float @__ocml_fmuladd_f32(float %55, float 0x3FD3440000000000, float %57) #21
  %59 = tail call float @__ocml_fmuladd_f32(float %54, float 0x3FD3440000000000, float %58) #21
  br label %60

; <label>:60:                                     ; preds = %51, %45
  %61 = phi float [ %50, %45 ], [ %59, %51 ]
  %62 = tail call i1 @llvm.amdgcn.class.f32(float %37, i32 519)
  %63 = select i1 %62, float %37, float %61
  %64 = select i1 %34, float 0x4023441360000000, float 0.000000e+00
  %65 = fsub float %63, %64
  br label %66

; <label>:66:                                     ; preds = %60, %38, %29, %8
  %67 = phi float [ %9, %8 ], [ %32, %29 ], [ %40, %38 ], [ %65, %60 ]
  ret float %67
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_rcbrt_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %2)
  %4 = sitofp i32 %3 to float
  %5 = fmul float %4, 0x3FD5555560000000
  %6 = tail call float @llvm.rint.f32(float %5)
  %7 = fptosi float %6 to i32
  %8 = mul nsw i32 %7, -3
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %8)
  %10 = fptrunc double %9 to float
  %11 = tail call float @llvm.log2.f32(float %10)
  %12 = fmul float %11, 0xBFD5555560000000
  %13 = tail call float @llvm.exp2.f32(float %12)
  %14 = fpext float %13 to double
  %15 = fmul double %14, %14
  %16 = fmul double %15, %14
  %17 = fsub double -0.000000e+00, %9
  %18 = tail call double @llvm.fma.f64(double %17, double %16, double 1.000000e+00)
  %19 = tail call double @llvm.fma.f64(double %18, double 0x3FCC71C71C71C8B2, double 0x3FD5555555555685)
  %20 = fmul double %18, %19
  %21 = tail call double @llvm.fma.f64(double %14, double %20, double %14)
  %22 = sub nsw i32 0, %7
  %23 = tail call double @llvm.amdgcn.ldexp.f64(double %21, i32 %22)
  %24 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %25 = icmp eq i8 %24, 0
  %26 = tail call i1 @llvm.amdgcn.class.f64(double %9, i32 512)
  %27 = select i1 %26, double 0.000000e+00, double %23
  %28 = fcmp oeq double %0, 0.000000e+00
  %29 = select i1 %28, double 0x7FF0000000000000, double %27
  %30 = select i1 %25, double %29, double %23
  %31 = tail call double @llvm.copysign.f64(double %30, double %0)
  ret double %31
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_hypot_f32(float, float) local_unnamed_addr #28 {
  %3 = tail call float @llvm.fabs.f32(float %0)
  %4 = tail call float @llvm.fabs.f32(float %1)
  %5 = bitcast float %3 to i32
  %6 = bitcast float %4 to i32
  %7 = icmp ult i32 %5, %6
  %8 = select i1 %7, i32 %6, i32 %5
  %9 = bitcast i32 %8 to float
  %10 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %9)
  %11 = sub nsw i32 0, %10
  %12 = tail call float @llvm.amdgcn.ldexp.f32(float %3, i32 %11)
  %13 = tail call float @llvm.amdgcn.ldexp.f32(float %4, i32 %11)
  %14 = fmul float %13, %13
  %15 = tail call float @__ocml_fmuladd_f32(float %12, float %12, float %14) #21
  %16 = fcmp olt float %15, 0.000000e+00
  %17 = tail call float @llvm.sqrt.f32(float %15)
  %18 = select i1 %16, float 0x7FF8000000000000, float %17
  %19 = tail call float @llvm.amdgcn.ldexp.f32(float %18, i32 %10)
  %20 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %21 = icmp eq i8 %20, 0
  %22 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %23 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 516)
  %24 = or i1 %22, %23
  %25 = and i1 %24, %21
  %26 = select i1 %25, float 0x7FF0000000000000, float %19
  ret float %26
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_copysign_f16(half, half) local_unnamed_addr #28 {
  %3 = tail call half @llvm.copysign.f16(half %0, half %1) #21
  ret half %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_asin_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp oge double %2, 5.000000e-01
  %4 = tail call double @llvm.fma.f64(double %2, double -5.000000e-01, double 5.000000e-01)
  %5 = fmul double %0, %0
  %6 = select i1 %3, double %4, double %5
  %7 = tail call double @llvm.fma.f64(double %6, double 0x3FA059859FEA6A70, double 0xBF90A5A378A05EAF)
  %8 = tail call double @llvm.fma.f64(double %6, double %7, double 0x3F94052137024D6A)
  %9 = tail call double @llvm.fma.f64(double %6, double %8, double 0x3F7AB3A098A70509)
  %10 = tail call double @llvm.fma.f64(double %6, double %9, double 0x3F88ED60A300C8D2)
  %11 = tail call double @llvm.fma.f64(double %6, double %10, double 0x3F8C6FA84B77012B)
  %12 = tail call double @llvm.fma.f64(double %6, double %11, double 0x3F91C6C111DCCB70)
  %13 = tail call double @llvm.fma.f64(double %6, double %12, double 0x3F96E89F0A0ADACF)
  %14 = tail call double @llvm.fma.f64(double %6, double %13, double 0x3F9F1C72C668963F)
  %15 = tail call double @llvm.fma.f64(double %6, double %14, double 0x3FA6DB6DB41CE4BD)
  %16 = tail call double @llvm.fma.f64(double %6, double %15, double 0x3FB333333336FD5B)
  %17 = tail call double @llvm.fma.f64(double %6, double %16, double 0x3FC5555555555380)
  %18 = fmul double %6, %17
  %19 = tail call double @llvm.fma.f64(double %2, double %18, double %2)
  br i1 %3, label %20, label %76

; <label>:20:                                     ; preds = %1
  %21 = tail call double @llvm.amdgcn.rsq.f64(double %6) #47
  %22 = fmul double %6, %21
  %23 = fmul double %21, 5.000000e-01
  %24 = fsub double -0.000000e+00, %23
  %25 = tail call double @llvm.fma.f64(double %24, double %22, double 5.000000e-01) #47
  %26 = tail call double @llvm.fma.f64(double %23, double %25, double %23) #47
  %27 = tail call double @llvm.fma.f64(double %22, double %25, double %22) #47
  %28 = fsub double -0.000000e+00, %27
  %29 = tail call double @llvm.fma.f64(double %28, double %27, double %6) #47
  %30 = tail call double @llvm.fma.f64(double %29, double %26, double %27) #47
  %31 = fmul double %30, %30
  %32 = fsub double -0.000000e+00, %31
  %33 = tail call double @llvm.fma.f64(double %30, double %30, double %32) #47
  %34 = fsub double %6, %31
  %35 = fsub double %6, %34
  %36 = fsub double %35, %31
  %37 = fsub double %36, %33
  %38 = fadd double %34, %37
  %39 = fmul double %30, 2.000000e+00
  %40 = tail call double @llvm.amdgcn.rcp.f64(double %39) #47
  %41 = fsub double -0.000000e+00, %39
  %42 = tail call double @llvm.fma.f64(double %41, double %40, double 1.000000e+00) #47
  %43 = tail call double @llvm.fma.f64(double %42, double %40, double %40) #47
  %44 = tail call double @llvm.fma.f64(double %41, double %43, double 1.000000e+00) #47
  %45 = tail call double @llvm.fma.f64(double %44, double %43, double %43) #47
  %46 = fmul double %38, %45
  %47 = tail call double @llvm.fma.f64(double %41, double %46, double %38) #47
  %48 = tail call double @llvm.fma.f64(double %47, double %45, double %46) #47
  %49 = fadd double %30, %48
  %50 = fsub double %49, %30
  %51 = fsub double %48, %50
  %52 = fmul double %18, %49
  %53 = fsub double -0.000000e+00, %52
  %54 = tail call double @llvm.fma.f64(double %49, double %18, double %53) #47
  %55 = tail call double @llvm.fma.f64(double %51, double %18, double %54) #47
  %56 = fadd double %52, %55
  %57 = fsub double %56, %52
  %58 = fsub double %55, %57
  %59 = fadd double %49, %56
  %60 = fsub double %59, %49
  %61 = fsub double %56, %60
  %62 = fadd double %51, %58
  %63 = fadd double %61, %62
  %64 = fadd double %59, %63
  %65 = fsub double %64, %59
  %66 = fsub double %63, %65
  %67 = fsub double 0x3FE921FB54442D18, %64
  %68 = fsub double 0x3FE921FB54442D18, %67
  %69 = fsub double %68, %64
  %70 = fadd double %69, 0x3C81A62633145C07
  %71 = fsub double %70, %66
  %72 = fadd double %67, %71
  %73 = fadd double %72, %72
  %74 = fcmp oeq double %2, 1.000000e+00
  %75 = select i1 %74, double 0x3FF921FB54442D18, double %73
  br label %76

; <label>:76:                                     ; preds = %20, %1
  %77 = phi double [ %75, %20 ], [ %19, %1 ]
  %78 = tail call double @llvm.copysign.f64(double %77, double %0)
  ret double %78
}

; Function Attrs: nounwind readnone
define linkonce_odr protected i32 @__ocml_fpclassify_f64(double) local_unnamed_addr #29 {
  %2 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %3 = zext i1 %2 to i32
  %4 = fcmp oeq double %0, 0.000000e+00
  %5 = select i1 %4, i32 2, i32 %3
  %6 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 144)
  %7 = select i1 %6, i32 3, i32 %5
  %8 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 264)
  %9 = select i1 %8, i32 4, i32 %7
  ret i32 %9
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_acosh_f64(double) local_unnamed_addr #28 {
  %2 = fcmp oge double %0, 0x5FF0000000000000
  %3 = select i1 %2, double 0x1FF0000000000000, double 1.000000e+00
  %4 = fmul double %3, %0
  %5 = fmul double %4, %4
  %6 = fsub double -0.000000e+00, %5
  %7 = tail call double @llvm.fma.f64(double %4, double %4, double %6) #47
  %8 = select i1 %2, double 0x4000000000000, double 1.000000e+00
  %9 = fsub double %5, %8
  %10 = fsub double %9, %5
  %11 = fsub double %9, %10
  %12 = fsub double %5, %11
  %13 = fadd double %8, %10
  %14 = fsub double %12, %13
  %15 = fadd double %7, %14
  %16 = fadd double %9, %15
  %17 = fsub double %16, %9
  %18 = fsub double %15, %17
  %19 = tail call double @llvm.amdgcn.rsq.f64(double %16) #47
  %20 = fmul double %16, %19
  %21 = fmul double %19, 5.000000e-01
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %22, double %20, double 5.000000e-01) #47
  %24 = tail call double @llvm.fma.f64(double %21, double %23, double %21) #47
  %25 = tail call double @llvm.fma.f64(double %20, double %23, double %20) #47
  %26 = fsub double -0.000000e+00, %25
  %27 = tail call double @llvm.fma.f64(double %26, double %25, double %16) #47
  %28 = tail call double @llvm.fma.f64(double %27, double %24, double %25) #47
  %29 = fmul double %28, %28
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %28, double %28, double %30) #47
  %32 = fsub double %16, %29
  %33 = fsub double %16, %32
  %34 = fsub double %33, %29
  %35 = fadd double %18, %34
  %36 = fsub double %35, %31
  %37 = fadd double %32, %36
  %38 = fmul double %28, 2.000000e+00
  %39 = tail call double @llvm.amdgcn.rcp.f64(double %38) #47
  %40 = fsub double -0.000000e+00, %38
  %41 = tail call double @llvm.fma.f64(double %40, double %39, double 1.000000e+00) #47
  %42 = tail call double @llvm.fma.f64(double %41, double %39, double %39) #47
  %43 = tail call double @llvm.fma.f64(double %40, double %42, double 1.000000e+00) #47
  %44 = tail call double @llvm.fma.f64(double %43, double %42, double %42) #47
  %45 = fmul double %44, %37
  %46 = tail call double @llvm.fma.f64(double %40, double %45, double %37) #47
  %47 = tail call double @llvm.fma.f64(double %46, double %44, double %45) #47
  %48 = fadd double %28, %47
  %49 = fsub double %48, %28
  %50 = fsub double %47, %49
  %51 = fadd double %4, %48
  %52 = fsub double %51, %4
  %53 = fsub double %51, %52
  %54 = fsub double %4, %53
  %55 = fsub double %48, %52
  %56 = fadd double %55, %54
  %57 = fadd double %50, %56
  %58 = fadd double %51, %57
  %59 = fsub double %58, %51
  %60 = fsub double %57, %59
  %61 = insertelement <2 x double> undef, double %60, i32 0
  %62 = insertelement <2 x double> %61, double %58, i32 1
  %63 = tail call double @__ocmlpriv_lnep_f64(<2 x double> %62) #21
  %64 = select i1 %2, double 0x40762E42FEFA39EF, double 0.000000e+00
  %65 = fadd double %64, %63
  %66 = fcmp oeq double %0, 1.000000e+00
  %67 = select i1 %66, double 0.000000e+00, double %65
  %68 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %69 = icmp eq i8 %68, 0
  %70 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 512)
  %71 = select i1 %70, double %0, double %67
  %72 = fcmp olt double %0, 1.000000e+00
  %73 = select i1 %72, double 0x7FF8000000000000, double %71
  %74 = select i1 %69, double %73, double %67
  ret double %74
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_log2_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.amdgcn.frexp.mant.f64(double %0)
  %3 = fcmp olt double %2, 0x3FE5555555555555
  %4 = zext i1 %3 to i32
  %5 = tail call double @llvm.amdgcn.ldexp.f64(double %2, i32 %4)
  %6 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %0)
  %7 = sub nsw i32 %6, %4
  %8 = fadd double %5, -1.000000e+00
  %9 = fadd double %5, 1.000000e+00
  %10 = fsub double %9, %5
  %11 = fsub double %9, %10
  %12 = fsub double %5, %11
  %13 = fsub double 1.000000e+00, %10
  %14 = fadd double %13, %12
  %15 = tail call double @llvm.amdgcn.rcp.f64(double %9) #47
  %16 = fsub double -0.000000e+00, %9
  %17 = tail call double @llvm.fma.f64(double %16, double %15, double 1.000000e+00) #47
  %18 = tail call double @llvm.fma.f64(double %17, double %15, double %15) #47
  %19 = tail call double @llvm.fma.f64(double %16, double %18, double 1.000000e+00) #47
  %20 = tail call double @llvm.fma.f64(double %19, double %18, double %18) #47
  %21 = fmul double %8, %20
  %22 = fmul double %9, %21
  %23 = fsub double -0.000000e+00, %22
  %24 = tail call double @llvm.fma.f64(double %21, double %9, double %23) #47
  %25 = tail call double @llvm.fma.f64(double %21, double %14, double %24) #47
  %26 = fadd double %22, %25
  %27 = fsub double %26, %22
  %28 = fsub double %25, %27
  %29 = fsub double %8, %26
  %30 = fsub double %8, %29
  %31 = fsub double %30, %26
  %32 = fsub double %31, %28
  %33 = fadd double %29, %32
  %34 = fmul double %20, %33
  %35 = fadd double %21, %34
  %36 = fsub double %35, %21
  %37 = fsub double %34, %36
  %38 = fmul double %35, %35
  %39 = fsub double -0.000000e+00, %38
  %40 = tail call double @llvm.fma.f64(double %35, double %35, double %39) #47
  %41 = fmul double %37, 2.000000e+00
  %42 = tail call double @llvm.fma.f64(double %35, double %41, double %40) #47
  %43 = tail call double @llvm.fma.f64(double %37, double %37, double %42) #47
  %44 = fadd double %38, %43
  %45 = fsub double %44, %38
  %46 = fsub double %43, %45
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %48 = tail call double @llvm.fma.f64(double %44, double %47, double 0x3FC7474DD7F4DF2E)
  %49 = tail call double @llvm.fma.f64(double %44, double %48, double 0x3FCC71C016291751)
  %50 = tail call double @llvm.fma.f64(double %44, double %49, double 0x3FD249249B27ACF1)
  %51 = tail call double @llvm.fma.f64(double %44, double %50, double 0x3FD99999998EF7B6)
  %52 = tail call double @llvm.fma.f64(double %44, double %51, double 0x3FE5555555555780)
  %53 = tail call double @llvm.amdgcn.ldexp.f64(double %35, i32 1) #47
  %54 = tail call double @llvm.amdgcn.ldexp.f64(double %37, i32 1) #47
  %55 = fmul double %35, %44
  %56 = fsub double -0.000000e+00, %55
  %57 = tail call double @llvm.fma.f64(double %35, double %44, double %56) #47
  %58 = fmul double %37, %44
  %59 = tail call double @llvm.fma.f64(double %35, double %46, double %58) #47
  %60 = fadd double %57, %59
  %61 = fadd double %55, %60
  %62 = fsub double %61, %55
  %63 = fsub double %60, %62
  %64 = fmul double %61, %52
  %65 = fsub double -0.000000e+00, %64
  %66 = tail call double @llvm.fma.f64(double %61, double %52, double %65) #47
  %67 = tail call double @llvm.fma.f64(double %63, double %52, double %66) #47
  %68 = fadd double %64, %67
  %69 = fsub double %68, %64
  %70 = fsub double %67, %69
  %71 = fadd double %53, %68
  %72 = fsub double %71, %53
  %73 = fsub double %71, %72
  %74 = fsub double %53, %73
  %75 = fsub double %68, %72
  %76 = fadd double %75, %74
  %77 = fadd double %54, %70
  %78 = fsub double %77, %54
  %79 = fsub double %77, %78
  %80 = fsub double %54, %79
  %81 = fsub double %70, %78
  %82 = fadd double %81, %80
  %83 = fadd double %77, %76
  %84 = fadd double %71, %83
  %85 = fsub double %84, %71
  %86 = fsub double %83, %85
  %87 = fadd double %82, %86
  %88 = fadd double %84, %87
  %89 = fsub double %88, %84
  %90 = fsub double %87, %89
  %91 = sitofp i32 %7 to double
  %92 = fmul double %88, 0x3FF71547652B82FE
  %93 = fsub double -0.000000e+00, %92
  %94 = tail call double @llvm.fma.f64(double %88, double 0x3FF71547652B82FE, double %93) #47
  %95 = fmul double %88, 0x3C7777D0FFDA0D24
  %96 = tail call double @llvm.fma.f64(double %90, double 0x3FF71547652B82FE, double %95) #47
  %97 = fadd double %94, %96
  %98 = fadd double %92, %97
  %99 = fsub double %98, %92
  %100 = fsub double %97, %99
  %101 = fadd double %98, %91
  %102 = fsub double %101, %91
  %103 = fsub double %102, %101
  %104 = fadd double %103, %91
  %105 = fsub double %98, %102
  %106 = fadd double %105, %104
  %107 = fadd double %100, %106
  %108 = fadd double %101, %107
  %109 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %110 = icmp eq i8 %109, 0
  %111 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 516)
  %112 = select i1 %111, double %0, double %108
  %113 = fcmp olt double %0, 0.000000e+00
  %114 = select i1 %113, double 0x7FF8000000000000, double %112
  %115 = fcmp oeq double %0, 0.000000e+00
  %116 = select i1 %115, double 0xFFF0000000000000, double %114
  %117 = select i1 %110, double %116, double %108
  ret double %117
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_sqrt_f32(float) local_unnamed_addr #29 {
  %2 = load i8, i8 addrspace(4)* @__oclc_correctly_rounded_sqrt32, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %44, label %4

; <label>:4:                                      ; preds = %1
  %5 = fcmp olt float %0, 0x39F0000000000000
  %6 = select i1 %5, float 0x41F0000000000000, float 1.000000e+00
  %7 = fmul float %6, %0
  %8 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %27

; <label>:10:                                     ; preds = %4
  %11 = fcmp olt float %7, 0.000000e+00
  %12 = tail call float @llvm.sqrt.f32(float %7)
  %13 = select i1 %11, float 0x7FF8000000000000, float %12
  %14 = bitcast float %13 to i32
  %15 = add nsw i32 %14, -1
  %16 = bitcast i32 %15 to float
  %17 = add nsw i32 %14, 1
  %18 = bitcast i32 %17 to float
  %19 = fsub float -0.000000e+00, %16
  %20 = tail call float @llvm.fma.f32(float %19, float %13, float %7)
  %21 = fsub float -0.000000e+00, %18
  %22 = tail call float @llvm.fma.f32(float %21, float %13, float %7)
  %23 = fcmp ole float %20, 0.000000e+00
  %24 = select i1 %23, float %16, float %13
  %25 = fcmp ogt float %22, 0.000000e+00
  %26 = select i1 %25, float %18, float %24
  br label %38

; <label>:27:                                     ; preds = %4
  %28 = tail call float @llvm.amdgcn.rsq.f32(float %7)
  %29 = fmul float %7, %28
  %30 = fmul float %28, 5.000000e-01
  %31 = fsub float -0.000000e+00, %30
  %32 = tail call float @llvm.fma.f32(float %31, float %29, float 5.000000e-01)
  %33 = tail call float @llvm.fma.f32(float %30, float %32, float %30)
  %34 = tail call float @llvm.fma.f32(float %29, float %32, float %29)
  %35 = fsub float -0.000000e+00, %34
  %36 = tail call float @llvm.fma.f32(float %35, float %34, float %7)
  %37 = tail call float @llvm.fma.f32(float %36, float %33, float %34)
  br label %38

; <label>:38:                                     ; preds = %27, %10
  %39 = phi float [ %37, %27 ], [ %26, %10 ]
  %40 = select i1 %5, float 0x3EF0000000000000, float 1.000000e+00
  %41 = fmul float %40, %39
  %42 = tail call i1 @llvm.amdgcn.class.f32(float %7, i32 608)
  %43 = select i1 %42, float %7, float %41
  br label %48

; <label>:44:                                     ; preds = %1
  %45 = fcmp olt float %0, 0.000000e+00
  %46 = tail call float @llvm.sqrt.f32(float %0)
  %47 = select i1 %45, float 0x7FF8000000000000, float %46
  br label %48

; <label>:48:                                     ; preds = %44, %38
  %49 = phi float [ %43, %38 ], [ %47, %44 ]
  ret float %49
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_scalb_f32(float, float) local_unnamed_addr #28 {
  %3 = tail call float @llvm.amdgcn.fmed3.f32(float %1, float 0xC130000000000000, float 0x4130000000000000)
  %4 = tail call float @llvm.rint.f32(float %3)
  %5 = fptosi float %4 to i32
  %6 = tail call float @__ocml_ldexp_f32(float %0, i32 %5) #21
  %7 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %19

; <label>:9:                                      ; preds = %2
  %10 = fcmp uno float %0, %1
  %11 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %12 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 512)
  %13 = and i1 %11, %12
  %14 = or i1 %10, %13
  %15 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 4)
  %16 = and i1 %11, %15
  %17 = or i1 %16, %14
  %18 = select i1 %17, float 0x7FF8000000000000, float %6
  br label %19

; <label>:19:                                     ; preds = %9, %2
  %20 = phi float [ %6, %2 ], [ %18, %9 ]
  ret float %20
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.fmed3.f32(float, float, float) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_atan2_f32(float, float) local_unnamed_addr #28 {
  %3 = tail call float @llvm.fabs.f32(float %1)
  %4 = tail call float @llvm.fabs.f32(float %0)
  %5 = tail call float @llvm.minnum.f32(float %3, float %4)
  %6 = tail call float @llvm.maxnum.f32(float %3, float %4)
  %7 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %16, label %9

; <label>:9:                                      ; preds = %2
  %10 = fcmp ogt float %6, 0x45F0000000000000
  %11 = select i1 %10, float 0x3DF0000000000000, float 1.000000e+00
  %12 = fmul float %6, %11
  %13 = tail call float @llvm.amdgcn.rcp.f32(float %12)
  %14 = fmul float %5, %13
  %15 = fmul float %11, %14
  br label %18

; <label>:16:                                     ; preds = %2
  %17 = fdiv float %5, %6, !fpmath !142
  br label %18

; <label>:18:                                     ; preds = %16, %9
  %19 = phi float [ %15, %9 ], [ %17, %16 ]
  %20 = tail call float @__ocmlpriv_atanred_f32(float %19) #21
  %21 = fsub float 0x3FF921FB60000000, %20
  %22 = fcmp ogt float %4, %3
  %23 = select i1 %22, float %21, float %20
  %24 = fsub float 0x400921FB60000000, %23
  %25 = fcmp olt float %1, 0.000000e+00
  %26 = select i1 %25, float %24, float %23
  %27 = bitcast float %1 to i32
  %28 = icmp slt i32 %27, 0
  %29 = select i1 %28, float 0x400921FB60000000, float 0.000000e+00
  %30 = fcmp oeq float %0, 0.000000e+00
  %31 = select i1 %30, float %29, float %26
  %32 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %33 = icmp eq i8 %32, 0
  %34 = select i1 %25, float 0x4002D97C80000000, float 0x3FE921FB60000000
  %35 = tail call i1 @llvm.amdgcn.class.f32(float %1, i32 516)
  %36 = tail call i1 @llvm.amdgcn.class.f32(float %0, i32 516)
  %37 = and i1 %36, %35
  %38 = select i1 %37, float %34, float %31
  %39 = fcmp uno float %1, %0
  %40 = select i1 %39, float 0x7FF8000000000000, float %38
  %41 = select i1 %33, float %40, float %31
  %42 = tail call float @llvm.copysign.f32(float %41, float %0)
  ret float %42
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.minnum.f32(float, float) #25

; Function Attrs: nounwind readnone speculatable
declare float @llvm.maxnum.f32(float, float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_log10_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = tail call float @llvm.log2.f32(float %2)
  %4 = fmul float %3, 0x3FD3441360000000
  %5 = fptrunc float %4 to half
  ret half %5
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_native_sqrt_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.sqrt.f16(half %0) #21
  ret half %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_native_sin_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.sin.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.sin.f16(half) #25

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_native_exp2_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.exp2.f16(half %0) #21
  ret half %2
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_native_log2_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.log2.f16(half %0) #21
  ret half %2
}

; Function Attrs: nounwind readnone speculatable
declare half @llvm.log2.f16(half) #25

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_signbit_f16(half) local_unnamed_addr #31 {
  %2 = bitcast half %0 to i16
  %3 = lshr i16 %2, 15
  %4 = zext i16 %3 to i32
  ret i32 %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_cospi_f64(double) local_unnamed_addr #28 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = tail call %3 @__ocmlpriv_trigpired_f64(double %2) #21
  %4 = extractvalue %3 %3, 0
  %5 = extractvalue %3 %3, 1
  %6 = tail call %2 @__ocmlpriv_sincospired_f64(double %4) #21
  %7 = extractvalue %2 %6, 0
  %8 = extractvalue %2 %6, 1
  %9 = fsub double -0.000000e+00, %8
  %10 = and i32 %5, 1
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, double %7, double %9
  %13 = bitcast double %12 to <2 x i32>
  %14 = icmp sgt i32 %5, 1
  %15 = select i1 %14, i32 -2147483648, i32 0
  %16 = extractelement <2 x i32> %13, i64 1
  %17 = xor i32 %16, %15
  %18 = insertelement <2 x i32> %13, i32 %17, i64 1
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %22 = and i1 %21, %20
  %23 = select i1 %22, <2 x i32> <i32 0, i32 2146959360>, <2 x i32> %18
  %24 = bitcast <2 x i32> %23 to double
  ret double %24
}

; Function Attrs: nounwind readnone
define linkonce_odr protected half @__ocml_sinh_f16(half) local_unnamed_addr #29 {
  %2 = fpext half %0 to float
  %3 = fmul float %2, 0x3FF7154760000000
  %4 = tail call float @llvm.exp2.f32(float %3)
  %5 = fsub float -0.000000e+00, %3
  %6 = tail call float @llvm.exp2.f32(float %5)
  %7 = fsub float %4, %6
  %8 = fmul float %7, 5.000000e-01
  %9 = fptrunc float %8 to half
  ret half %9
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_scalbn_f64(double, i32) local_unnamed_addr #28 {
  %3 = tail call double @__ocml_ldexp_f64(double %0, i32 %1) #21
  ret double %3
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_tgamma_f16(half) local_unnamed_addr #28 {
  %2 = fpext half %0 to float
  %3 = tail call float @__ocml_tgamma_f32(float %2) #21
  %4 = fptrunc float %3 to half
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_tanpi_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigpired_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = ashr i32 %3, 16
  %7 = trunc i32 %6 to i16
  %8 = and i16 %7, 1
  %9 = tail call half @__ocmlpriv_tanpired_f16(half %5, i16 signext %8) #21
  %10 = bitcast half %9 to i16
  %11 = add nsw i32 %6, -1
  %12 = icmp ult i32 %11, 2
  %13 = fcmp oeq half %5, 0xH0000
  %14 = and i1 %12, %13
  %15 = select i1 %14, i16 -32768, i16 0
  %16 = bitcast half %0 to i16
  %17 = and i16 %16, -32768
  %18 = xor i16 %17, %10
  %19 = xor i16 %18, %15
  %20 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %21 = icmp eq i8 %20, 0
  %22 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %23 = and i1 %22, %21
  %24 = bitcast i16 %19 to half
  %25 = select i1 %23, half 0xH7E00, half %24
  ret half %25
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocmlpriv_tanpired_f16(half, i16 signext) local_unnamed_addr #28 {
  %3 = fmul half %0, %0
  %4 = tail call half @llvm.fma.f16(half %3, half 0xH5CF6, half 0xH4FF9) #21
  %5 = tail call half @llvm.fma.f16(half %3, half %4, half 0xH4942) #21
  %6 = fmul half %3, %0
  %7 = fmul half %6, %5
  %8 = tail call half @llvm.fma.f16(half %0, half 0xH4248, half %7) #21
  %9 = fdiv half 0xHBC00, %8
  %10 = icmp eq i16 %1, 0
  %11 = select i1 %10, half %8, half %9
  ret half %11
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_logb_f32(float) local_unnamed_addr #29 {
  %2 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f32(float %0)
  %3 = add nsw i32 %2, -1
  %4 = sitofp i32 %3 to float
  %5 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %6 = icmp eq i8 %5, 0
  %7 = bitcast float %0 to i32
  %8 = and i32 %7, 2147483647
  %9 = icmp ugt i32 %8, 2139095039
  %10 = bitcast i32 %8 to float
  %11 = select i1 %9, float %10, float %4
  %12 = fcmp oeq float %0, 0.000000e+00
  %13 = select i1 %12, float 0xFFF0000000000000, float %11
  %14 = select i1 %6, float %13, float %4
  ret float %14
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected i32 @__ocml_signbit_f32(float) local_unnamed_addr #31 {
  %2 = bitcast float %0 to i32
  %3 = lshr i32 %2, 31
  ret i32 %3
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_fmin_f32(float, float) local_unnamed_addr #29 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = zext i8 %3 to i32
  %5 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %6 = icmp ne i8 %5, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = and i32 %8, %4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %2
  %12 = tail call float @llvm.canonicalize.f32(float %0)
  %13 = tail call float @llvm.canonicalize.f32(float %1)
  %14 = tail call float @llvm.minnum.f32(float %12, float %13)
  br label %22

; <label>:15:                                     ; preds = %2
  br i1 %6, label %16, label %18

; <label>:16:                                     ; preds = %15
  %17 = tail call float @llvm.minnum.f32(float %0, float %1)
  br label %22

; <label>:18:                                     ; preds = %15
  %19 = tail call float @llvm.canonicalize.f32(float %0)
  %20 = tail call float @llvm.canonicalize.f32(float %1)
  %21 = tail call float @llvm.minnum.f32(float %19, float %20)
  br label %22

; <label>:22:                                     ; preds = %18, %16, %11
  %23 = phi float [ %14, %11 ], [ %17, %16 ], [ %21, %18 ]
  ret float %23
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_sqrt_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.sqrt.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_rsqrt_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.amdgcn.rsq.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_sin_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.sin.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.sin.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_cos_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.cos.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.cos.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_exp2_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.exp2.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_native_log2_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.log2.f32(float %0)
  ret float %2
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr protected double @__ocml_nextafter_f64(double, double) local_unnamed_addr #31 {
  %3 = bitcast double %0 to i64
  %4 = sub i64 -9223372036854775808, %3
  %5 = icmp slt i64 %3, 0
  %6 = select i1 %5, i64 %4, i64 %3
  %7 = bitcast double %1 to i64
  %8 = sub i64 -9223372036854775808, %7
  %9 = icmp slt i64 %7, 0
  %10 = select i1 %9, i64 %8, i64 %7
  %11 = icmp slt i64 %6, %10
  %12 = select i1 %11, i64 1, i64 -1
  %13 = add nsw i64 %12, %6
  %14 = sub i64 -9223372036854775808, %13
  %15 = icmp slt i64 %13, 0
  %16 = select i1 %15, i64 %14, i64 %13
  %17 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %18 = icmp eq i8 %17, 0
  %19 = fcmp uno double %0, 0.000000e+00
  %20 = select i1 %19, i64 %3, i64 %16
  %21 = fcmp uno double %1, 0.000000e+00
  %22 = select i1 %21, i64 %7, i64 %20
  %23 = select i1 %18, i64 %22, i64 %16
  %24 = or i64 %7, %3
  %25 = and i64 %24, 9223372036854775807
  %26 = icmp eq i64 %25, 0
  %27 = icmp eq i64 %3, %7
  %28 = or i1 %27, %26
  %29 = select i1 %28, i64 %7, i64 %23
  %30 = bitcast i64 %29 to double
  ret double %30
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_cos_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.fabs.f16(half %0) #21
  %3 = tail call i32 @__ocmlpriv_trigred_f16(half %2) #21
  %4 = trunc i32 %3 to i16
  %5 = bitcast i16 %4 to half
  %6 = tail call i32 @__ocmlpriv_sincosred_f16(half %5) #21
  %7 = trunc i32 %6 to i16
  %8 = bitcast i16 %7 to half
  %9 = lshr i32 %6, 16
  %10 = trunc i32 %9 to i16
  %11 = fsub half 0xH8000, %8
  %12 = and i32 %3, 65536
  %13 = icmp eq i32 %12, 0
  %14 = bitcast half %11 to i16
  %15 = select i1 %13, i16 %10, i16 %14
  %16 = icmp sgt i32 %3, 131071
  %17 = select i1 %16, i16 -32768, i16 0
  %18 = xor i16 %15, %17
  %19 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %20 = icmp eq i8 %19, 0
  %21 = tail call zeroext i1 @llvm.amdgcn.class.f16(half %0, i32 519) #21
  %22 = and i1 %21, %20
  %23 = bitcast i16 %18 to half
  %24 = select i1 %22, half 0xH7E00, half %23
  ret half %24
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected float @__ocml_cbrt_f32(float) local_unnamed_addr #28 {
  %2 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %3 = icmp eq i8 %2, 0
  %4 = tail call float @llvm.canonicalize.f32(float %0)
  %5 = select i1 %3, float %0, float %4
  %6 = tail call float @llvm.fabs.f32(float %5)
  %7 = tail call i1 @llvm.amdgcn.class.f32(float %5, i32 144)
  %8 = select i1 %7, i32 24, i32 0
  %9 = tail call float @llvm.amdgcn.ldexp.f32(float %6, i32 %8)
  %10 = select i1 %3, float %9, float %6
  %11 = tail call float @llvm.log2.f32(float %10)
  %12 = fmul float %11, 0x3FD5555560000000
  %13 = tail call float @llvm.exp2.f32(float %12)
  %14 = fmul float %13, %13
  %15 = tail call float @llvm.amdgcn.rcp.f32(float %14)
  %16 = fsub float -0.000000e+00, %10
  %17 = tail call float @__ocml_fmuladd_f32(float %15, float %16, float %13) #21
  %18 = tail call float @__ocml_fmuladd_f32(float %17, float 0xBFD5555560000000, float %13) #21
  %19 = select i1 %7, i32 -8, i32 0
  %20 = tail call float @llvm.amdgcn.ldexp.f32(float %18, i32 %19)
  %21 = select i1 %3, float %20, float %18
  %22 = tail call i1 @llvm.amdgcn.class.f32(float %5, i32 615)
  %23 = select i1 %22, float %5, float %21
  %24 = tail call float @llvm.copysign.f32(float %23, float %5)
  ret float %24
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_sqrt_f16(half) local_unnamed_addr #28 {
  %2 = fcmp olt half %0, 0xH0000
  %3 = tail call half @llvm.sqrt.f16(half %0) #21
  %4 = select i1 %2, half 0xH7E00, half %3
  ret half %4
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_pow_f64(double, double) local_unnamed_addr #28 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call <2 x double> @__ocmlpriv_epln_f64(double %3) #21
  %5 = extractelement <2 x double> %4, i64 1
  %6 = fmul double %5, %1
  %7 = fsub double -0.000000e+00, %6
  %8 = tail call double @llvm.fma.f64(double %1, double %5, double %7) #47
  %9 = extractelement <2 x double> %4, i64 0
  %10 = tail call double @llvm.fma.f64(double %1, double %9, double %8) #47
  %11 = fadd double %6, %10
  %12 = fsub double %11, %6
  %13 = fsub double %10, %12
  %14 = tail call i1 @llvm.amdgcn.class.f64(double %6, i32 516) #47
  %15 = select i1 %14, double %6, double %11
  %16 = tail call i1 @llvm.amdgcn.class.f64(double %15, i32 516) #47
  %17 = select i1 %16, double 0.000000e+00, double %13
  %18 = insertelement <2 x double> undef, double %17, i32 0
  %19 = insertelement <2 x double> %18, double %15, i32 1
  %20 = tail call double @__ocmlpriv_expep_f64(<2 x double> %19) #21
  %21 = tail call double @llvm.fabs.f64(double %1)
  %22 = tail call double @llvm.trunc.f64(double %21)
  %23 = fcmp oeq double %21, %22
  %24 = zext i1 %23 to i32
  %25 = fmul double %22, 5.000000e-01
  %26 = tail call double @llvm.amdgcn.fract.f64(double %25)
  %27 = tail call i1 @llvm.amdgcn.class.f64(double %25, i32 516)
  %28 = select i1 %27, double 0.000000e+00, double %26
  %29 = fcmp oeq double %28, 0.000000e+00
  %30 = and i1 %23, %29
  %31 = zext i1 %30 to i32
  %32 = add nuw nsw i32 %31, %24
  %33 = icmp eq i32 %32, 1
  %34 = fcmp olt double %0, 0.000000e+00
  %35 = and i1 %34, %33
  %36 = select i1 %35, double -0.000000e+00, double 0.000000e+00
  %37 = tail call double @llvm.copysign.f64(double %20, double %36)
  %38 = fcmp oeq double %0, 0.000000e+00
  %39 = fcmp oeq double %1, 0.000000e+00
  %40 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 960)
  %41 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %101

; <label>:43:                                     ; preds = %2
  %44 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 512)
  %45 = tail call i1 @llvm.amdgcn.class.f64(double %1, i32 4)
  %46 = fcmp uno double %21, 0.000000e+00
  %47 = tail call i1 @llvm.amdgcn.class.f64(double %21, i32 512)
  %48 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 4)
  %49 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 960)
  %50 = fcmp uno double %0, 0.000000e+00
  %51 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 512)
  %52 = fcmp ogt double %3, 1.000000e+00
  %53 = fcmp olt double %3, 1.000000e+00
  %54 = xor i1 %49, true
  %55 = icmp eq i32 %32, 0
  %56 = and i1 %55, %54
  %57 = select i1 %56, double 0x7FF8000000000000, double %37
  %58 = and i1 %53, %45
  %59 = select i1 %58, double 0x7FF0000000000000, double %57
  %60 = and i1 %52, %45
  %61 = and i1 %53, %44
  %62 = or i1 %61, %60
  %63 = select i1 %62, double 0.000000e+00, double %59
  %64 = and i1 %52, %44
  %65 = select i1 %64, double 0x7FF0000000000000, double %63
  %66 = tail call double @llvm.copysign.f64(double 0x7FF0000000000000, double %0)
  %67 = xor i1 %40, true
  %68 = and i1 %38, %67
  %69 = and i1 %68, %33
  %70 = select i1 %69, double %66, double %65
  %71 = icmp ne i32 %32, 1
  %72 = and i1 %68, %71
  %73 = select i1 %72, double 0x7FF0000000000000, double %70
  %74 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %0)
  %75 = and i1 %38, %40
  %76 = and i1 %75, %33
  %77 = select i1 %76, double %74, double %73
  %78 = and i1 %75, %71
  %79 = select i1 %78, double 0.000000e+00, double %77
  %80 = and i1 %38, %45
  %81 = select i1 %80, double 0x7FF0000000000000, double %79
  %82 = fcmp oeq double %0, -1.000000e+00
  %83 = and i1 %82, %47
  %84 = select i1 %83, double 1.000000e+00, double %81
  %85 = and i1 %48, %67
  %86 = and i1 %85, %33
  %87 = select i1 %86, double -0.000000e+00, double %84
  %88 = and i1 %85, %71
  %89 = select i1 %88, double 0.000000e+00, double %87
  %90 = and i1 %48, %40
  %91 = and i1 %90, %33
  %92 = select i1 %91, double 0xFFF0000000000000, double %89
  %93 = and i1 %90, %71
  %94 = select i1 %93, double 0x7FF0000000000000, double %92
  %95 = and i1 %51, %67
  %96 = select i1 %95, double 0.000000e+00, double %94
  %97 = and i1 %51, %40
  %98 = select i1 %97, double 0x7FF0000000000000, double %96
  %99 = select i1 %50, double %0, double %98
  %100 = select i1 %46, double %1, double %99
  br label %109

; <label>:101:                                    ; preds = %2
  %102 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %0)
  %103 = and i1 %38, %40
  %104 = and i1 %103, %33
  %105 = select i1 %104, double %102, double %37
  %106 = icmp ne i32 %32, 1
  %107 = and i1 %103, %106
  %108 = select i1 %107, double 0.000000e+00, double %105
  br label %109

; <label>:109:                                    ; preds = %101, %43
  %110 = phi double [ %108, %101 ], [ %100, %43 ]
  %111 = fcmp oeq double %0, 1.000000e+00
  %112 = or i1 %111, %39
  %113 = select i1 %112, double 1.000000e+00, double %110
  ret double %113
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_ceil_f32(float) local_unnamed_addr #29 {
  %2 = tail call float @llvm.ceil.f32(float %0)
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_acos_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.fabs.f64(double %0)
  %3 = fcmp oge double %2, 5.000000e-01
  %4 = tail call double @llvm.fma.f64(double %2, double -5.000000e-01, double 5.000000e-01)
  %5 = fmul double %0, %0
  %6 = select i1 %3, double %4, double %5
  %7 = tail call double @llvm.fma.f64(double %6, double 0x3FA059859FEA6A70, double 0xBF90A5A378A05EAF)
  %8 = tail call double @llvm.fma.f64(double %6, double %7, double 0x3F94052137024D6A)
  %9 = tail call double @llvm.fma.f64(double %6, double %8, double 0x3F7AB3A098A70509)
  %10 = tail call double @llvm.fma.f64(double %6, double %9, double 0x3F88ED60A300C8D2)
  %11 = tail call double @llvm.fma.f64(double %6, double %10, double 0x3F8C6FA84B77012B)
  %12 = tail call double @llvm.fma.f64(double %6, double %11, double 0x3F91C6C111DCCB70)
  %13 = tail call double @llvm.fma.f64(double %6, double %12, double 0x3F96E89F0A0ADACF)
  %14 = tail call double @llvm.fma.f64(double %6, double %13, double 0x3F9F1C72C668963F)
  %15 = tail call double @llvm.fma.f64(double %6, double %14, double 0x3FA6DB6DB41CE4BD)
  %16 = tail call double @llvm.fma.f64(double %6, double %15, double 0x3FB333333336FD5B)
  %17 = tail call double @llvm.fma.f64(double %6, double %16, double 0x3FC5555555555380)
  %18 = fmul double %6, %17
  %19 = tail call double @llvm.fma.f64(double %0, double %18, double %0)
  %20 = fsub double -0.000000e+00, %19
  %21 = tail call double @llvm.fma.f64(double 0x3FEDD9AD336A0500, double 0x3FFAF154EEB562D6, double %20)
  br i1 %3, label %22, label %66

; <label>:22:                                     ; preds = %1
  %23 = tail call double @llvm.amdgcn.rsq.f64(double %6) #47
  %24 = fmul double %6, %23
  %25 = fmul double %23, 5.000000e-01
  %26 = fsub double -0.000000e+00, %25
  %27 = tail call double @llvm.fma.f64(double %26, double %24, double 5.000000e-01) #47
  %28 = tail call double @llvm.fma.f64(double %25, double %27, double %25) #47
  %29 = tail call double @llvm.fma.f64(double %24, double %27, double %24) #47
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %30, double %29, double %6) #47
  %32 = tail call double @llvm.fma.f64(double %31, double %28, double %29) #47
  %33 = fmul double %32, %32
  %34 = fsub double -0.000000e+00, %33
  %35 = tail call double @llvm.fma.f64(double %32, double %32, double %34) #47
  %36 = fsub double %6, %33
  %37 = fsub double %6, %36
  %38 = fsub double %37, %33
  %39 = fsub double %38, %35
  %40 = fadd double %36, %39
  %41 = fmul double %32, 2.000000e+00
  %42 = tail call double @llvm.amdgcn.rcp.f64(double %41) #47
  %43 = fsub double -0.000000e+00, %41
  %44 = tail call double @llvm.fma.f64(double %43, double %42, double 1.000000e+00) #47
  %45 = tail call double @llvm.fma.f64(double %44, double %42, double %42) #47
  %46 = tail call double @llvm.fma.f64(double %43, double %45, double 1.000000e+00) #47
  %47 = tail call double @llvm.fma.f64(double %46, double %45, double %45) #47
  %48 = fmul double %40, %47
  %49 = tail call double @llvm.fma.f64(double %43, double %48, double %40) #47
  %50 = tail call double @llvm.fma.f64(double %49, double %47, double %48) #47
  %51 = fadd double %32, %50
  %52 = fsub double %51, %32
  %53 = fsub double %50, %52
  %54 = tail call double @llvm.fma.f64(double %51, double %18, double %51)
  %55 = fmul double %54, -2.000000e+00
  %56 = tail call double @llvm.fma.f64(double 0x3FFDD9AD336A0500, double 0x3FFAF154EEB562D6, double %55)
  %57 = tail call double @llvm.fma.f64(double %51, double %18, double %53)
  %58 = fadd double %51, %57
  %59 = fmul double %58, 2.000000e+00
  %60 = fcmp olt double %0, 0.000000e+00
  %61 = select i1 %60, double %56, double %59
  %62 = fcmp oeq double %0, -1.000000e+00
  %63 = select i1 %62, double 0x400921FB54442D18, double %61
  %64 = fcmp oeq double %0, 1.000000e+00
  %65 = select i1 %64, double 0.000000e+00, double %63
  br label %66

; <label>:66:                                     ; preds = %22, %1
  %67 = phi double [ %65, %22 ], [ %21, %1 ]
  ret double %67
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected double @__ocml_fdim_f64(double, double) local_unnamed_addr #28 {
  %3 = fsub double %0, %1
  %4 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %12

; <label>:6:                                      ; preds = %2
  %7 = tail call i32 @__ocml_isnan_f64(double %0) #21
  %8 = tail call i32 @__ocml_isnan_f64(double %1) #21
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, double 0.000000e+00, double 0x7FF8000000000000
  br label %12

; <label>:12:                                     ; preds = %6, %2
  %13 = phi double [ %11, %6 ], [ 0.000000e+00, %2 ]
  %14 = fcmp ogt double %0, %1
  %15 = select i1 %14, double %3, double %13
  ret double %15
}

; Function Attrs: nounwind readnone
define linkonce_odr protected float @__ocml_fmax_f32(float, float) local_unnamed_addr #29 {
  %3 = load i8, i8 addrspace(4)* @__oclc_daz_opt, align 1, !tbaa !140, !range !43
  %4 = zext i8 %3 to i32
  %5 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %6 = icmp ne i8 %5, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = and i32 %8, %4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %2
  %12 = tail call float @llvm.canonicalize.f32(float %0)
  %13 = tail call float @llvm.canonicalize.f32(float %1)
  %14 = tail call float @llvm.maxnum.f32(float %12, float %13)
  br label %22

; <label>:15:                                     ; preds = %2
  br i1 %6, label %16, label %18

; <label>:16:                                     ; preds = %15
  %17 = tail call float @llvm.maxnum.f32(float %0, float %1)
  br label %22

; <label>:18:                                     ; preds = %15
  %19 = tail call float @llvm.canonicalize.f32(float %0)
  %20 = tail call float @llvm.canonicalize.f32(float %1)
  %21 = tail call float @llvm.maxnum.f32(float %19, float %20)
  br label %22

; <label>:22:                                     ; preds = %18, %16, %11
  %23 = phi float [ %14, %11 ], [ %17, %16 ], [ %21, %18 ]
  ret float %23
}

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_ceil_f64(double) local_unnamed_addr #29 {
  %2 = tail call double @llvm.ceil.f64(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #25

; Function Attrs: nounwind readnone
define linkonce_odr protected double @__ocml_fmod_f64(double, double) local_unnamed_addr #29 {
  %3 = tail call double @llvm.fabs.f64(double %0)
  %4 = tail call double @llvm.fabs.f64(double %1)
  %5 = fcmp ogt double %3, %4
  br i1 %5, label %6, label %48

; <label>:6:                                      ; preds = %2
  %7 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %3)
  %8 = tail call double @llvm.amdgcn.frexp.mant.f64(double %3)
  %9 = tail call double @llvm.amdgcn.ldexp.f64(double %8, i32 26)
  %10 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %4)
  %11 = add nsw i32 %10, -1
  %12 = tail call double @llvm.amdgcn.frexp.mant.f64(double %4)
  %13 = tail call double @llvm.amdgcn.ldexp.f64(double %12, i32 1)
  %14 = sub i32 %7, %10
  %15 = fdiv double 1.000000e+00, %13
  %16 = icmp sgt i32 %14, 26
  br i1 %16, label %17, label %30

; <label>:17:                                     ; preds = %17, %6
  %18 = phi double [ %27, %17 ], [ %9, %6 ]
  %19 = phi i32 [ %28, %17 ], [ %14, %6 ]
  %20 = fmul double %15, %18
  %21 = tail call double @llvm.rint.f64(double %20)
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %22, double %13, double %18) #47
  %24 = fcmp olt double %23, 0.000000e+00
  %25 = fadd double %13, %23
  %26 = select i1 %24, double %25, double %23
  %27 = tail call double @llvm.amdgcn.ldexp.f64(double %26, i32 26)
  %28 = add nsw i32 %19, -26
  %29 = icmp sgt i32 %28, 26
  br i1 %29, label %17, label %30

; <label>:30:                                     ; preds = %17, %6
  %31 = phi i32 [ %14, %6 ], [ %28, %17 ]
  %32 = phi double [ %9, %6 ], [ %27, %17 ]
  %33 = add nsw i32 %31, -25
  %34 = tail call double @llvm.amdgcn.ldexp.f64(double %32, i32 %33)
  %35 = fmul double %15, %34
  %36 = tail call double @llvm.rint.f64(double %35)
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %37, double %13, double %34) #47
  %39 = fcmp olt double %38, 0.000000e+00
  %40 = fadd double %13, %38
  %41 = select i1 %39, double %40, double %38
  %42 = tail call double @llvm.amdgcn.ldexp.f64(double %41, i32 %11)
  %43 = bitcast double %0 to i64
  %44 = and i64 %43, -9223372036854775808
  %45 = bitcast double %42 to i64
  %46 = xor i64 %44, %45
  %47 = bitcast i64 %46 to double
  br label %52

; <label>:48:                                     ; preds = %2
  %49 = fcmp oeq double %3, %4
  %50 = tail call double @llvm.copysign.f64(double 0.000000e+00, double %0)
  %51 = select i1 %49, double %50, double %0
  br label %52

; <label>:52:                                     ; preds = %48, %30
  %53 = phi double [ %47, %30 ], [ %51, %48 ]
  %54 = load i8, i8 addrspace(4)* @__oclc_finite_only_opt, align 1, !tbaa !140, !range !43
  %55 = icmp eq i8 %54, 0
  %56 = fcmp oeq double %1, 0.000000e+00
  %57 = fcmp uno double %1, 0.000000e+00
  %58 = tail call i1 @llvm.amdgcn.class.f64(double %0, i32 519)
  %59 = or i1 %58, %57
  %60 = or i1 %56, %59
  %61 = and i1 %60, %55
  %62 = select i1 %61, double 0x7FF8000000000000, double %53
  ret double %62
}

; Function Attrs: convergent nounwind readnone
define linkonce_odr protected half @__ocml_log2_f16(half) local_unnamed_addr #28 {
  %2 = tail call half @llvm.log2.f16(half %0) #21
  ret half %2
}

; Function Attrs: alwaysinline convergent nounwind readnone
define linkonce_odr protected i32 @__ockl_lane_u32() local_unnamed_addr #22 {
  %1 = tail call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0) #21
  %2 = tail call i32 @llvm.amdgcn.mbcnt.hi(i32 -1, i32 %1) #21
  ret i32 %2
}

; Function Attrs: nounwind readnone
declare i32 @llvm.amdgcn.mbcnt.lo(i32, i32) #33

; Function Attrs: nounwind readnone
declare i32 @llvm.amdgcn.mbcnt.hi(i32, i32) #33

; Function Attrs: alwaysinline convergent nounwind readonly
define linkonce_odr protected zeroext i1 @__ockl_wfall_i32(i32) local_unnamed_addr #34 {
  %2 = tail call i64 @llvm.amdgcn.icmp.i32(i32 %0, i32 0, i32 33)
  %3 = tail call i64 @llvm.read_register.i64(metadata !144) #53
  %4 = icmp eq i64 %2, %3
  ret i1 %4
}

; Function Attrs: convergent nounwind readnone
declare i64 @llvm.amdgcn.icmp.i32(i32, i32, i32) #21

; Function Attrs: nounwind readonly
declare i64 @llvm.read_register.i64(metadata) #35

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_acq_wi() local_unnamed_addr #36 {
  fence syncscope("singlethread") acquire
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_acq_sg() local_unnamed_addr #36 {
  fence syncscope("wavefront") acquire
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_acq_wg() local_unnamed_addr #36 {
  fence syncscope("workgroup") acquire
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_acq_dev() local_unnamed_addr #36 {
  fence syncscope("agent") acquire
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_acq_sys() local_unnamed_addr #36 {
  fence acquire
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_rel_wi() local_unnamed_addr #36 {
  fence syncscope("singlethread") release
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_rel_sg() local_unnamed_addr #36 {
  fence syncscope("wavefront") release
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_rel_wg() local_unnamed_addr #36 {
  fence syncscope("workgroup") release
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_rel_dev() local_unnamed_addr #36 {
  fence syncscope("agent") release
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_rel_sys() local_unnamed_addr #36 {
  fence release
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_ar_wi() local_unnamed_addr #36 {
  fence syncscope("singlethread") acq_rel
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_ar_sg() local_unnamed_addr #36 {
  fence syncscope("wavefront") acq_rel
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_ar_wg() local_unnamed_addr #36 {
  fence syncscope("workgroup") acq_rel
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_ar_dev() local_unnamed_addr #36 {
  fence syncscope("agent") acq_rel
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_ar_sys() local_unnamed_addr #36 {
  fence acq_rel
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_sc_wi() local_unnamed_addr #36 {
  fence syncscope("singlethread") seq_cst
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_sc_sg() local_unnamed_addr #36 {
  fence syncscope("wavefront") seq_cst
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_sc_wg() local_unnamed_addr #36 {
  fence syncscope("workgroup") seq_cst
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_sc_dev() local_unnamed_addr #36 {
  fence syncscope("agent") seq_cst
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind
define protected void @__llvm_fence_sc_sys() local_unnamed_addr #36 {
  fence seq_cst
  ret void
}

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_1d_v4f32_i32(i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %6 = tail call <4 x float> @llvm.amdgcn.image.load.1d.v4f32.i32(i32 %0, i32 %1, <8 x i32> %2, i32 %3, i32 %4) #35
  ret <4 x float> %6
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.1d.v4f32.i32(i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_2d_v4f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_3d_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.3d.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.3d.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_cube_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.cube.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.cube.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_1darray_v4f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.1darray.v4f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.1darray.v4f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_2darray_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.2darray.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.2darray.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_2dmsaa_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.2dmsaa.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.2dmsaa.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_2darraymsaa_v4f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.load.2darraymsaa.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.2darraymsaa.v4f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_1d_v4f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x float> @llvm.amdgcn.image.load.mip.1d.v4f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x float> %7
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.1d.v4f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_2d_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.mip.2d.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.2d.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_3d_v4f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.load.mip.3d.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.3d.v4f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_cube_v4f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.load.mip.cube.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.cube.v4f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_1darray_v4f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.load.mip.1darray.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.1darray.v4f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_load_mip_2darray_v4f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.load.mip.2darray.v4f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.load.mip.2darray.v4f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_1d_v4f16_i32(i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %6 = tail call <4 x half> @llvm.amdgcn.image.load.1d.v4f16.i32(i32 %0, i32 %1, <8 x i32> %2, i32 %3, i32 %4) #35
  ret <4 x half> %6
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.1d.v4f16.i32(i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_2d_v4f16_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.2d.v4f16.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.2d.v4f16.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_3d_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.3d.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.3d.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_cube_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.cube.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.cube.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_1darray_v4f16_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.1darray.v4f16.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.1darray.v4f16.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_2darray_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.2darray.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.2darray.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_2dmsaa_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.2dmsaa.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.2dmsaa.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_2darraymsaa_v4f16_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.load.2darraymsaa.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.2darraymsaa.v4f16.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_1d_v4f16_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call <4 x half> @llvm.amdgcn.image.load.mip.1d.v4f16.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret <4 x half> %7
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.1d.v4f16.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_2d_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.mip.2d.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.2d.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_3d_v4f16_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.load.mip.3d.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.3d.v4f16.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_cube_v4f16_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.load.mip.cube.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.cube.v4f16.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_1darray_v4f16_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.load.mip.1darray.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.1darray.v4f16.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_load_mip_2darray_v4f16_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.load.mip.2darray.v4f16.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.load.mip.2darray.v4f16.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_1d_f32_i32(i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %6 = tail call float @llvm.amdgcn.image.load.1d.f32.i32(i32 %0, i32 %1, <8 x i32> %2, i32 %3, i32 %4) #35
  ret float %6
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.1d.f32.i32(i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_2d_f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call float @llvm.amdgcn.image.load.2d.f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret float %7
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.2d.f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_3d_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.3d.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.3d.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_cube_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.cube.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.cube.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_1darray_f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call float @llvm.amdgcn.image.load.1darray.f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret float %7
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.1darray.f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_2darray_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.2darray.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.2darray.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_2dmsaa_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.2dmsaa.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.2dmsaa.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_2darraymsaa_f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.load.2darraymsaa.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.2darraymsaa.f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_1d_f32_i32(i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %7 = tail call float @llvm.amdgcn.image.load.mip.1d.f32.i32(i32 %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #35
  ret float %7
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.1d.f32.i32(i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_2d_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.mip.2d.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.2d.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_3d_f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.load.mip.3d.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.3d.f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_cube_f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.load.mip.cube.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.cube.f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_1darray_f32_i32(i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.load.mip.1darray.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.1darray.f32.i32(i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_load_mip_2darray_f32_i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.load.mip.2darray.f32.i32(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.load.mip.2darray.f32.i32(i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #35

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1d_v4f32_i32(<4 x float>, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1d.v4f32.i32(<4 x float>, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2d_v4f32_i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2d.v4f32.i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_3d_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.3d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.3d.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_cube_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.cube.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.cube.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1darray_v4f32_i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1darray.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1darray.v4f32.i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darray_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darray.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darray.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2dmsaa_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2dmsaa.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2dmsaa.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darraymsaa_v4f32_i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darraymsaa.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darraymsaa.v4f32.i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1d_v4f32_i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1d.v4f32.i32(<4 x float>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2d_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2d.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_3d_v4f32_i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.3d.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.3d.v4f32.i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_cube_v4f32_i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.cube.v4f32.i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1darray_v4f32_i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1darray.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1darray.v4f32.i32(<4 x float>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2darray_v4f32_i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2darray.v4f32.i32(<4 x float> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.v4f32.i32(<4 x float>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1d_v4f16_i32(<4 x half>, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1d.v4f16.i32(<4 x half>, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2d_v4f16_i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2d.v4f16.i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_3d_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.3d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.3d.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_cube_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.cube.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.cube.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1darray_v4f16_i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1darray.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1darray.v4f16.i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darray_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darray.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darray.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2dmsaa_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2dmsaa.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2dmsaa.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darraymsaa_v4f16_i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darraymsaa.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darraymsaa.v4f16.i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1d_v4f16_i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1d.v4f16.i32(<4 x half>, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2d_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2d.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_3d_v4f16_i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.3d.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.3d.v4f16.i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_cube_v4f16_i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.cube.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.cube.v4f16.i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1darray_v4f16_i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1darray.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1darray.v4f16.i32(<4 x half>, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2darray_v4f16_i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2darray.v4f16.i32(<4 x half> %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.v4f16.i32(<4 x half>, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1d_f32_i32(float, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1d.f32.i32(float %0, i32 %1, i32 %2, <8 x i32> %3, i32 %4, i32 %5) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1d.f32.i32(float, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2d_f32_i32(float, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2d.f32.i32(float %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2d.f32.i32(float, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_3d_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.3d.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.3d.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_cube_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.cube.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.cube.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_1darray_f32_i32(float, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.1darray.f32.i32(float %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.1darray.f32.i32(float, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darray_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darray.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darray.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2dmsaa_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2dmsaa.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2dmsaa.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_2darraymsaa_f32_i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.2darraymsaa.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.2darraymsaa.f32.i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1d_f32_i32(float, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1d.f32.i32(float %0, i32 %1, i32 %2, i32 %3, <8 x i32> %4, i32 %5, i32 %6) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1d.f32.i32(float, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2d_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2d.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2d.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_3d_f32_i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.3d.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.3d.f32.i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_cube_f32_i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.cube.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.cube.f32.i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_1darray_f32_i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.1darray.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, <8 x i32> %5, i32 %6, i32 %7) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.1darray.f32.i32(float, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind writeonly
define protected void @__llvm_amdgcn_image_store_mip_2darray_f32_i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) local_unnamed_addr #38 {
  tail call void @llvm.amdgcn.image.store.mip.2darray.f32.i32(float %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, <8 x i32> %6, i32 %7, i32 %8) #39
  ret void
}

; Function Attrs: nounwind writeonly
declare void @llvm.amdgcn.image.store.mip.2darray.f32.i32(float, i32, i32, i32, i32, i32, <8 x i32>, i32, i32) #39

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_1d_v4f32_f32(i32, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.1d.v4f32.f32(i32 %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 zeroext %4, i32 %5, i32 %6) #35
  ret <4 x float> %8
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.1d.v4f32.f32(i32, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_1d_v4f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.sample.l.1d.v4f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.1d.v4f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_1d_v4f32_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.d.1d.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.1d.v4f32.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_2d_v4f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.2d.v4f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_2d_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.l.2d.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.2d.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_2d_v4f32_f32_f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %13 = tail call <4 x float> @llvm.amdgcn.image.sample.d.2d.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 zeroext %9, i32 %10, i32 %11) #35
  ret <4 x float> %13
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.2d.v4f32.f32.f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_3d_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.3d.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.3d.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_3d_v4f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.sample.l.3d.v4f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.3d.v4f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_3d_v4f32_f32_f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %16 = tail call <4 x float> @llvm.amdgcn.image.sample.d.3d.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, float %8, float %9, <8 x i32> %10, <4 x i32> %11, i1 zeroext %12, i32 %13, i32 %14) #35
  ret <4 x float> %16
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.3d.v4f32.f32.f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_cube_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.cube.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.cube.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_cube_v4f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.sample.l.cube.v4f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.cube.v4f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_cube_v4f32_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call <4 x float> @llvm.amdgcn.image.sample.d.cube.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret <4 x float> %14
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.cube.v4f32.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_1darray_v4f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.1darray.v4f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.1darray.v4f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_1darray_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.l.1darray.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.1darray.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_1darray_v4f32_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.sample.d.1darray.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.1darray.v4f32.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_lz_2darray_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.sample.lz.2darray.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.lz.2darray.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_l_2darray_v4f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.sample.l.2darray.v4f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.l.2darray.v4f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_sample_d_2darray_v4f32_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call <4 x float> @llvm.amdgcn.image.sample.d.2darray.v4f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret <4 x float> %14
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.d.2darray.v4f32.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_1d_v4f16_f32(i32, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %8 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.1d.v4f16.f32(i32 %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 zeroext %4, i32 %5, i32 %6) #35
  ret <4 x half> %8
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.1d.v4f16.f32(i32, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_1d_v4f16_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.sample.l.1d.v4f16.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.1d.v4f16.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_1d_v4f16_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.d.1d.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.1d.v4f16.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_2d_v4f16_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.2d.v4f16.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.2d.v4f16.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_2d_v4f16_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.l.2d.v4f16.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.2d.v4f16.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_2d_v4f16_f32_f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %13 = tail call <4 x half> @llvm.amdgcn.image.sample.d.2d.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 zeroext %9, i32 %10, i32 %11) #35
  ret <4 x half> %13
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.2d.v4f16.f32.f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_3d_v4f16_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.3d.v4f16.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.3d.v4f16.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_3d_v4f16_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x half> @llvm.amdgcn.image.sample.l.3d.v4f16.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x half> %11
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.3d.v4f16.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_3d_v4f16_f32_f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %16 = tail call <4 x half> @llvm.amdgcn.image.sample.d.3d.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, float %8, float %9, <8 x i32> %10, <4 x i32> %11, i1 zeroext %12, i32 %13, i32 %14) #35
  ret <4 x half> %16
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.3d.v4f16.f32.f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_cube_v4f16_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.cube.v4f16.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.cube.v4f16.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_cube_v4f16_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x half> @llvm.amdgcn.image.sample.l.cube.v4f16.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x half> %11
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.cube.v4f16.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_cube_v4f16_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call <4 x half> @llvm.amdgcn.image.sample.d.cube.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret <4 x half> %14
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.cube.v4f16.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_1darray_v4f16_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.1darray.v4f16.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x half> %9
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.1darray.v4f16.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_1darray_v4f16_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.l.1darray.v4f16.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.1darray.v4f16.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_1darray_v4f16_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x half> @llvm.amdgcn.image.sample.d.1darray.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x half> %11
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.1darray.v4f16.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_lz_2darray_v4f16_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x half> @llvm.amdgcn.image.sample.lz.2darray.v4f16.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x half> %10
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.lz.2darray.v4f16.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_l_2darray_v4f16_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x half> @llvm.amdgcn.image.sample.l.2darray.v4f16.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x half> %11
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.l.2darray.v4f16.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x half> @__llvm_amdgcn_image_sample_d_2darray_v4f16_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call <4 x half> @llvm.amdgcn.image.sample.d.2darray.v4f16.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret <4 x half> %14
}

; Function Attrs: nounwind readonly
declare <4 x half> @llvm.amdgcn.image.sample.d.2darray.v4f16.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_1d_f32_f32(i32, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %8 = tail call float @llvm.amdgcn.image.sample.lz.1d.f32.f32(i32 %0, float %1, <8 x i32> %2, <4 x i32> %3, i1 zeroext %4, i32 %5, i32 %6) #35
  ret float %8
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.1d.f32.f32(i32, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_1d_f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.sample.l.1d.f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.1d.f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_1d_f32_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.d.1d.f32.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.1d.f32.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_2d_f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.2d.f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_2d_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.l.2d.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.2d.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_2d_f32_f32_f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %13 = tail call float @llvm.amdgcn.image.sample.d.2d.f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, <8 x i32> %7, <4 x i32> %8, i1 zeroext %9, i32 %10, i32 %11) #35
  ret float %13
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.2d.f32.f32.f32(i32, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_3d_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.lz.3d.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.3d.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_3d_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call float @llvm.amdgcn.image.sample.l.3d.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret float %11
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.3d.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_3d_f32_f32_f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %16 = tail call float @llvm.amdgcn.image.sample.d.3d.f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, float %8, float %9, <8 x i32> %10, <4 x i32> %11, i1 zeroext %12, i32 %13, i32 %14) #35
  ret float %16
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.3d.f32.f32.f32(i32, float, float, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_cube_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.lz.cube.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.cube.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_cube_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call float @llvm.amdgcn.image.sample.l.cube.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret float %11
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.cube.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_cube_f32_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call float @llvm.amdgcn.image.sample.d.cube.f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret float %14
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.cube.f32.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_1darray_f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call float @llvm.amdgcn.image.sample.lz.1darray.f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret float %9
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.1darray.f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_1darray_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.l.1darray.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.1darray.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_1darray_f32_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call float @llvm.amdgcn.image.sample.d.1darray.f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret float %11
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.1darray.f32.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_lz_2darray_f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call float @llvm.amdgcn.image.sample.lz.2darray.f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret float %10
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.lz.2darray.f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_l_2darray_f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call float @llvm.amdgcn.image.sample.l.2darray.f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret float %11
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.l.2darray.f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected float @__llvm_amdgcn_image_sample_d_2darray_f32_f32_f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %14 = tail call float @llvm.amdgcn.image.sample.d.2darray.f32.f32.f32(i32 %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, <8 x i32> %8, <4 x i32> %9, i1 zeroext %10, i32 %11, i32 %12) #35
  ret float %14
}

; Function Attrs: nounwind readonly
declare float @llvm.amdgcn.image.sample.d.2darray.f32.f32.f32(i32, float, float, float, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_lz_2d_v4f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather4.lz.2d.v4f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_l_2d_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.image.amdgcn.gather4.l.2d.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.image.amdgcn.gather4.l.2d.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_lz_cube_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.cube.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather4.lz.cube.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_l_cube_v4f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.gather4.l.cube.v4f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather4.l.cube.v4f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_lz_2darray_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.amdgcn.image.gather4.lz.2darray.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather4.lz.2darray.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_image_gather4_l_2darray_v4f32_f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %11 = tail call <4 x float> @llvm.amdgcn.image.gather4.l.2darray.v4f32.f32(i32 %0, float %1, float %2, float %3, float %4, <8 x i32> %5, <4 x i32> %6, i1 zeroext %7, i32 %8, i32 %9) #35
  ret <4 x float> %11
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather4.l.2darray.v4f32.f32(i32, float, float, float, float, <8 x i32>, <4 x i32>, i1, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_gather_4h_2d_v4f32_f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %9 = tail call <4 x float> @llvm.amdgcn.image.gather.4h.2d.v4f32.f32(i32 %0, float %1, float %2, <8 x i32> %3, <4 x i32> %4, i1 zeroext %5, i32 %6, i32 %7) #35
  ret <4 x float> %9
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.gather.4h.2d.v4f32.f32(i32, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_gather_4h_cube_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.image.amdgcn.gather.4h.cube.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.image.amdgcn.gather.4h.cube.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) #35

; Function Attrs: alwaysinline nounwind readonly
define protected <4 x float> @__llvm_amdgcn_gather_4h_2darray_v4f32_f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) local_unnamed_addr #37 {
  %10 = tail call <4 x float> @llvm.image.amdgcn.gather.4h.2darray.v4f32.f32(i32 %0, float %1, float %2, float %3, <8 x i32> %4, <4 x i32> %5, i1 zeroext %6, i32 %7, i32 %8) #35
  ret <4 x float> %10
}

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.image.amdgcn.gather.4h.2darray.v4f32.f32(i32, float, float, float, <8 x i32>, <4 x i32>, i1 zeroext, i32, i32) #35

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i32 @__llvm_ld_atomic_a1_x_dev_i32(i32 addrspace(1)* nocapture readonly) #40 {
  %2 = load atomic volatile i32, i32 addrspace(1)* %0 monotonic, align 4
  ret i32 %2
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i64 @__llvm_ld_atomic_a1_x_dev_i64(i64 addrspace(1)* nocapture readonly) #40 {
  %2 = load atomic volatile i64, i64 addrspace(1)* %0 monotonic, align 8
  ret i64 %2
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i32 @__llvm_ld_atomic_a3_x_wg_i32(i32 addrspace(3)* nocapture readonly) #40 {
  %2 = load atomic volatile i32, i32 addrspace(3)* %0 monotonic, align 4
  ret i32 %2
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i64 @__llvm_ld_atomic_a3_x_wg_i64(i64 addrspace(3)* nocapture readonly) #40 {
  %2 = load atomic volatile i64, i64 addrspace(3)* %0 monotonic, align 8
  ret i64 %2
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected void @__llvm_st_atomic_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  store atomic volatile i32 %1, i32 addrspace(1)* %0 monotonic, align 4
  ret void
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected void @__llvm_st_atomic_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  store atomic volatile i64 %1, i64 addrspace(1)* %0 monotonic, align 8
  ret void
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected void @__llvm_st_atomic_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  store atomic volatile i32 %1, i32 addrspace(3)* %0 monotonic, align 4
  ret void
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected void @__llvm_st_atomic_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  store atomic volatile i64 %1, i64 addrspace(3)* %0 monotonic, align 8
  ret void
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_add_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile add i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_add_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile add i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_add_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile add i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_add_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile add i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_and_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile and i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_and_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile and i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_and_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile and i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_and_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile and i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_or_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile or i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_or_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile or i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_or_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile or i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_or_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile or i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i32 @__llvm_atomic_max_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #40 {
  %3 = atomicrmw volatile max i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_umax_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile umax i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_max_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile max i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_umax_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile umax i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_max_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile max i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_umax_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile umax i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_max_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile max i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_umax_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile umax i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_min_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile min i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_umin_a1_x_dev_i32(i32 addrspace(1)* nocapture, i32) #41 {
  %3 = atomicrmw volatile umin i32 addrspace(1)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_min_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile min i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_umin_a1_x_dev_i64(i64 addrspace(1)* nocapture, i64) #41 {
  %3 = atomicrmw volatile umin i64 addrspace(1)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_min_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile min i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_atomic_umin_a3_x_wg_i32(i32 addrspace(3)* nocapture, i32) #41 {
  %3 = atomicrmw volatile umin i32 addrspace(3)* %0, i32 %1 monotonic
  ret i32 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_min_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile min i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_atomic_umin_a3_x_wg_i64(i64 addrspace(3)* nocapture, i64) #41 {
  %3 = atomicrmw volatile umin i64 addrspace(3)* %0, i64 %1 monotonic
  ret i64 %3
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind readonly
define protected i32 @__llvm_cmpxchg_a1_x_x_dev_i32(i32 addrspace(1)* nocapture, i32, i32) #40 {
  %4 = cmpxchg volatile i32 addrspace(1)* %0, i32 %1, i32 %2 monotonic monotonic
  %5 = extractvalue { i32, i1 } %4, 0
  ret i32 %5
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_cmpxchg_a1_x_x_dev_i64(i64 addrspace(1)* nocapture, i64, i64) #41 {
  %4 = cmpxchg volatile i64 addrspace(1)* %0, i64 %1, i64 %2 monotonic monotonic
  %5 = extractvalue { i64, i1 } %4, 0
  ret i64 %5
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i32 @__llvm_cmpxchg_a3_x_x_wg_i32(i32 addrspace(3)* nocapture, i32, i32) #41 {
  %4 = cmpxchg volatile i32 addrspace(3)* %0, i32 %1, i32 %2 monotonic monotonic
  %5 = extractvalue { i32, i1 } %4, 0
  ret i32 %5
}

; Function Attrs: alwaysinline argmemonly norecurse nounwind
define protected i64 @__llvm_cmpxchg_a3_x_x_wg(i64 addrspace(3)* nocapture, i64, i64) #41 {
  %4 = cmpxchg volatile i64 addrspace(3)* %0, i64 %1, i64 %2 monotonic monotonic
  %5 = extractvalue { i64, i1 } %4, 0
  ret i64 %5
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i8 @__llvm_ctlz_i8(i8) #42 {
  %2 = call i8 @llvm.ctlz.i8(i8 %0, i1 false)
  ret i8 %2
}

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.ctlz.i8(i8, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i16 @__llvm_ctlz_i16(i16) #42 {
  %2 = call i16 @llvm.ctlz.i16(i16 %0, i1 false)
  ret i16 %2
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.ctlz.i16(i16, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i32 @__llvm_ctlz_i32(i32) #42 {
  %2 = call i32 @llvm.ctlz.i32(i32 %0, i1 false)
  ret i32 %2
}

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i64 @__llvm_ctlz_i64(i64) #42 {
  %2 = call i64 @llvm.ctlz.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i8 @__llvm_cttz_i8(i8) #42 {
  %2 = call i8 @llvm.cttz.i8(i8 %0, i1 false)
  ret i8 %2
}

; Function Attrs: nounwind readnone speculatable
declare i8 @llvm.cttz.i8(i8, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i16 @__llvm_cttz_i16(i16) #42 {
  %2 = call i16 @llvm.cttz.i16(i16 %0, i1 false)
  ret i16 %2
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.cttz.i16(i16, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i32 @__llvm_cttz_i32(i32) #42 {
  %2 = call i32 @llvm.cttz.i32(i32 %0, i1 false)
  ret i32 %2
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1) #25

; Function Attrs: alwaysinline norecurse nounwind readnone
define protected i64 @__llvm_cttz_i64(i64) #42 {
  %2 = call i64 @llvm.cttz.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1) #25

attributes #0 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse nounwind readnone "HC" "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { alwaysinline "HC" "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { alwaysinline norecurse "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { alwaysinline norecurse "HC" "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { alwaysinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { norecurse nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { norecurse nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { norecurse "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { "HC" "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "uniform-work-group-size"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { convergent nounwind readnone }
attributes #22 = { alwaysinline convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #23 = { alwaysinline convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #24 = { alwaysinline nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #25 = { nounwind readnone speculatable }
attributes #26 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #27 = { alwaysinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #28 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #29 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #30 = { convergent nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #31 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #32 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #33 = { nounwind readnone }
attributes #34 = { alwaysinline convergent nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+fp64-fp16-denormals,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #35 = { nounwind readonly }
attributes #36 = { alwaysinline norecurse nounwind }
attributes #37 = { alwaysinline nounwind readonly }
attributes #38 = { alwaysinline nounwind writeonly }
attributes #39 = { nounwind writeonly }
attributes #40 = { alwaysinline argmemonly norecurse nounwind readonly }
attributes #41 = { alwaysinline argmemonly norecurse nounwind }
attributes #42 = { alwaysinline norecurse nounwind readnone }
attributes #43 = { nobuiltin }
attributes #44 = { nobuiltin nounwind readnone }
attributes #45 = { nobuiltin nounwind }
attributes #46 = { nobuiltin noreturn }
attributes #47 = { nounwind }
attributes #48 = { builtin nobuiltin }
attributes #49 = { builtin nobuiltin nounwind }
attributes #50 = { nobuiltin noreturn nounwind }
attributes #51 = { nobuiltin nounwind readonly }
attributes #52 = { convergent nounwind }
attributes #53 = { convergent }

!llvm.ident = !{}
!llvm.printf.fmts = !{!1, !2, !3, !4, !5, !6, !7}
!llvm.module.flags = !{!8, !9}
!opencl.ocl.version = !{}

!0 = !{!"HCC clang version 8.0.0 (https://github.com/RadeonOpenCompute/hcc-clang-upgrade.git 03ed09e819eda9ea858adbd0c4dfddc8355f42f5) (git@github.com:ssahasra/llvm-roc.git 6035bb3d89caab524784b97561b3ec2453924d66) (based on HCC 1.3.18402-aaac0a59-03ed09e819-6035bb3d89c )"}
!1 = !{!"1:3:unknown"}
!2 = !{!"2:3:unknown"}
!3 = !{!"3:3:unknown"}
!4 = !{!"4:3:unknown"}
!5 = !{!"5:3:unknown"}
!6 = !{!"6:3:unknown"}
!7 = !{!"7:3:unknown"}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 2, i32 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"__fp16", !13, i64 0}
!13 = !{!"omnipotent char", !14, i64 0}
!14 = !{!"Simple C++ TBAA"}
!15 = !{!16, !16, i64 0}
!16 = !{!"double", !13, i64 0}
!17 = !{!18, !18, i64 0}
!18 = !{!"float", !13, i64 0}
!19 = !{!20, !21, i64 0}
!20 = !{!"_ZTSN6Kalmar12__index_leafILi0EEE", !21, i64 0, !21, i64 4}
!21 = !{!"int", !13, i64 0}
!22 = !{!21, !21, i64 0}
!23 = !{!24, !21, i64 0}
!24 = !{!"_ZTSN6Kalmar12__index_leafILi1EEE", !21, i64 0, !21, i64 4}
!25 = !{!26, !21, i64 0}
!26 = !{!"_ZTSN6Kalmar12__index_leafILi2EEE", !21, i64 0, !21, i64 4}
!27 = !{!28, !28, i64 0}
!28 = !{!"any pointer", !13, i64 0}
!29 = !{!30, !28, i64 0}
!30 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !28, i64 0}
!31 = !{!32, !32, i64 0}
!32 = !{!"long", !13, i64 0}
!33 = !{!34, !28, i64 0}
!34 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !30, i64 0, !32, i64 8, !13, i64 16}
!35 = !{!13, !13, i64 0}
!36 = !{!34, !32, i64 8}
!37 = !{!38, !38, i64 0}
!38 = !{!"vtable pointer", !14, i64 0}
!39 = !{!40, !28, i64 72}
!40 = !{!"_ZTSN6Kalmar5CLAMP14PlatformDetectE", !34, i64 8, !34, i64 40, !28, i64 72}
!41 = !{!42, !42, i64 0}
!42 = !{!"bool", !13, i64 0}
!43 = !{i8 0, i8 2}
!44 = !{!45, !47, i64 32}
!45 = !{!"_ZTSSt8ios_base", !32, i64 8, !32, i64 16, !46, i64 24, !47, i64 28, !47, i64 32, !28, i64 40, !48, i64 48, !13, i64 64, !21, i64 192, !28, i64 200, !49, i64 208}
!46 = !{!"_ZTSSt13_Ios_Fmtflags", !13, i64 0}
!47 = !{!"_ZTSSt12_Ios_Iostate", !13, i64 0}
!48 = !{!"_ZTSNSt8ios_base6_WordsE", !28, i64 0, !32, i64 8}
!49 = !{!"_ZTSSt6locale", !28, i64 0}
!50 = !{!51, !28, i64 240}
!51 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !28, i64 216, !13, i64 224, !42, i64 225, !28, i64 232, !28, i64 240, !28, i64 248, !28, i64 256}
!52 = !{!53, !13, i64 56}
!53 = !{!"_ZTSSt5ctypeIcE", !28, i64 16, !42, i64 24, !28, i64 32, !28, i64 40, !28, i64 48, !13, i64 56, !13, i64 57, !13, i64 313, !13, i64 569}
!54 = !{!55, !28, i64 32}
!55 = !{!"_ZTS11RuntimeImpl", !34, i64 0, !28, i64 32, !28, i64 40, !28, i64 48, !28, i64 56, !42, i64 64}
!56 = !{!55, !28, i64 40}
!57 = !{!55, !28, i64 48}
!58 = !{!55, !28, i64 56}
!59 = !{!55, !42, i64 64}
!60 = !{!61, !28, i64 8}
!61 = !{!"_ZTSN6Kalmar11KalmarQueueE", !28, i64 8, !62, i64 16, !63, i64 20, !32, i64 24}
!62 = !{!"_ZTSN6Kalmar5enums12queuing_modeE", !13, i64 0}
!63 = !{!"_ZTSN6Kalmar5enums13execute_orderE", !13, i64 0}
!64 = !{!65, !28, i64 0}
!65 = !{!"_ZTSNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEE12_Alloc_hiderE", !28, i64 0}
!66 = !{!67, !28, i64 0}
!67 = !{!"_ZTSNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE", !65, i64 0, !32, i64 8, !13, i64 16}
!68 = !{!69, !69, i64 0}
!69 = !{!"wchar_t", !13, i64 0}
!70 = !{!67, !32, i64 8}
!71 = !{!72, !28, i64 8}
!72 = !{!"_ZTSN6Kalmar13KalmarContextE", !28, i64 8, !73, i64 16, !42, i64 40}
!73 = !{!"_ZTSSt6vectorIPN6Kalmar12KalmarDeviceESaIS2_EE"}
!74 = !{!75, !28, i64 8}
!75 = !{!"_ZTSSt12_Vector_baseIPN6Kalmar12KalmarDeviceESaIS2_EE", !76, i64 0}
!76 = !{!"_ZTSNSt12_Vector_baseIPN6Kalmar12KalmarDeviceESaIS2_EE12_Vector_implE", !28, i64 0, !28, i64 8, !28, i64 16}
!77 = !{!75, !28, i64 0}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZNK2hc11accelerator16get_default_viewEv: %agg.result"}
!80 = distinct !{!80, !"_ZNK2hc11accelerator16get_default_viewEv"}
!81 = !{!82, !28, i64 0}
!82 = !{!"_ZTSSt12__shared_ptrIN6Kalmar11KalmarQueueELN9__gnu_cxx12_Lock_policyE1EE", !28, i64 0, !83, i64 8}
!83 = !{!"_ZTSSt14__shared_countILN9__gnu_cxx12_Lock_policyE1EE", !28, i64 0}
!84 = !{!83, !28, i64 0}
!85 = !{i32 -2141477230}
!86 = !{i32 -2141477197}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_: %agg.result"}
!89 = distinct !{!89, !"_ZN2hc17parallel_for_eachILi1EZ4mainE3$_0EENS_17completion_futureERKNS_6extentIXT_EEERKT0_"}
!90 = !{!91, !88}
!91 = distinct !{!91, !92, !"_ZN2hc11accelerator23get_auto_selection_viewEv: %agg.result"}
!92 = distinct !{!92, !"_ZN2hc11accelerator23get_auto_selection_viewEv"}
!93 = !{!94, !91, !88}
!94 = distinct !{!94, !95, !"_ZN6Kalmar13KalmarContext11auto_selectEv: %agg.result"}
!95 = distinct !{!95, !"_ZN6Kalmar13KalmarContext11auto_selectEv"}
!96 = !{!91}
!97 = !{!98, !28, i64 0}
!98 = !{!"_ZTSSt12__shared_ptrINSt13__future_base13_State_baseV2ELN9__gnu_cxx12_Lock_policyE1EE", !28, i64 0, !83, i64 8}
!99 = !{!100, !28, i64 0}
!100 = !{!"_ZTSSt12__shared_ptrIN6Kalmar13KalmarAsyncOpELN9__gnu_cxx12_Lock_policyE1EE", !28, i64 0, !83, i64 8}
!101 = !{!102, !28, i64 16}
!102 = !{!"_ZTSN2hc17completion_futureE", !103, i64 0, !28, i64 16, !104, i64 24}
!103 = !{!"_ZTSSt13shared_futureIvE"}
!104 = !{!"_ZTSSt10shared_ptrIN6Kalmar13KalmarAsyncOpEE"}
!105 = !{!106, !28, i64 0}
!106 = !{!"_ZTSN9__gnu_cxx17__normal_iteratorIPPN6Kalmar12KalmarDeviceESt6vectorIS3_SaIS3_EEEE", !28, i64 0}
!107 = !{!108, !28, i64 0}
!108 = !{!"_ZTSZN6Kalmar13KalmarContext9getDeviceENSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEUlPKNS_12KalmarDeviceEE_", !28, i64 0}
!109 = !{!110, !32, i64 40}
!110 = !{!"_ZTSSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE", !111, i64 0}
!111 = !{!"_ZTSNSt8_Rb_treeINSt6thread2idESt4pairIKS1_St10shared_ptrIN6Kalmar11KalmarQueueEEESt10_Select1stIS8_ESt4lessIS1_ESaIS8_EE13_Rb_tree_implISC_Lb1EEE", !112, i64 0, !113, i64 8, !32, i64 40}
!112 = !{!"_ZTSSt4lessINSt6thread2idEE"}
!113 = !{!"_ZTSSt18_Rb_tree_node_base", !114, i64 0, !28, i64 8, !28, i64 16, !28, i64 24}
!114 = !{!"_ZTSSt14_Rb_tree_color", !13, i64 0}
!115 = !{!116, !28, i64 0}
!116 = !{!"_ZTSSt23_Rb_tree_const_iteratorISt4pairIKNSt6thread2idESt10shared_ptrIN6Kalmar11KalmarQueueEEEE", !28, i64 0}
!117 = !{!110, !28, i64 16}
!118 = !{!110, !28, i64 24}
!119 = !{!113, !28, i64 24}
!120 = !{!121, !121, i64 0}
!121 = !{!"int", !122, i64 0}
!122 = !{!"omnipotent char", !123, i64 0}
!123 = !{!"Simple C/C++ TBAA"}
!124 = !{!125, !125, i64 0}
!125 = !{!"half", !122, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"float", !122, i64 0}
!128 = !{!129, !129, i64 0}
!129 = !{!"double", !122, i64 0}
!130 = !{i32 0, i32 1024}
!131 = !{!132, !133, i64 4}
!132 = !{!"hsa_kernel_dispatch_packet_s", !133, i64 0, !133, i64 2, !133, i64 4, !133, i64 6, !133, i64 8, !133, i64 10, !121, i64 12, !121, i64 16, !121, i64 20, !121, i64 24, !121, i64 28, !134, i64 32, !135, i64 40, !134, i64 48, !136, i64 56}
!133 = !{!"short", !122, i64 0}
!134 = !{!"long", !122, i64 0}
!135 = !{!"any pointer", !122, i64 0}
!136 = !{!"hsa_signal_s", !134, i64 0}
!137 = !{!132, !133, i64 6}
!138 = !{!132, !133, i64 8}
!139 = !{!134, !134, i64 0}
!140 = !{!141, !141, i64 0}
!141 = !{!"bool", !122, i64 0}
!142 = !{float 2.500000e+00}
!143 = !{i32 0, i32 33}
!144 = !{!"exec"}
